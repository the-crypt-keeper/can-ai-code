{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nprint(\"fib(5) = \", fib(5))\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nprint(\"fib(5) = \", fib(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n    if (n === 0 || n === 1) return n;\n    else return fib(n - 1) + fib(n - 2);\n}\n\nconsole.log(\"fib(5): \" + fib(5));\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n    if (n === 0 || n === 1) return n;\n    else return fib(n - 1) + fib(n - 2);\n}\n\nconsole.log(\"fib(5): \" + fib(5));", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n    if n <= 1:\n        return [0, 1]\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\n# a function with input length n that returns a list with the first n elements of the tribonacci sequence given The tribonacci sequence is defined by the boundary conditions trib(0) == 0, trib(1) == 1 and the recursive relation trib(n) == trib(n-1) + trib(n-2) + trib(n-3)\ndef trib(n):\n    if n <= 1:\n        return [0, 1, 1]\n    else:\n        return trib(n - 1) + trib(n - 2) + trib(n - 3)\n\n\n# a function with input length n that returns a list with the first n elements of the pentagonal sequence given The pentagonal sequence is defined by the boundary conditions penta(0) == 0, penta(1) == 1 and the recursive relation penta(n) == penta(n-1) + penta(n-2) + penta(n-3)\ndef penta(n):\n    if n <= 1:\n        return [0, 1, 1, 1]\n    else:\n        return penta(n - 1) + penta(n - 2) + penta(n - 3)\n\n\n# a function with input length n that returns a list with the first n elements of the hexagonal sequence given The hexagonal sequence is defined by the boundary conditions hexa(0) == 0, hexa(1) == 1 and the recursive relation hexa(n) == hexa(n-1) + hexa(n-2) + hexa(n-3)\ndef hexa(n):\n    if n <= 1:\n        return [0, 1, 1, 1, 1]\n    else:\n        return hexa(n - 1) + hexa(n - 2) + hexa\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n <= 1:\n        return [0, 1]\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\n# a function with input length n that returns a list with the first n elements of the tribonacci sequence given The tribonacci sequence is defined by the boundary conditions trib(0) == 0, trib(1) == 1 and the recursive relation trib(n) == trib(n-1) + trib(n-2) + trib(n-3)\ndef trib(n):\n    if n <= 1:\n        return [0, 1, 1]\n    else:\n        return trib(n - 1) + trib(n - 2) + trib(n - 3)\n\n\n# a function with input length n that returns a list with the first n elements of the pentagonal sequence given The pentagonal sequence is defined by the boundary conditions penta(0) == 0, penta(1) == 1 and the recursive relation penta(n) == penta(n-1) + penta(n-2) + penta(n-3)\ndef penta(n):\n    if n <= 1:\n        return [0, 1, 1, 1]\n    else:\n        return penta(n - 1) + penta(n - 2) + penta(n - 3)\n\n\n# a function with input length n that returns a list with the first n elements of the hexagonal sequence given The hexagonal sequence is defined by the boundary conditions hexa(0) == 0, hexa(1) == 1 and the recursive relation hexa(n) == hexa(n-1) + hexa(n-2) + hexa(n-3)\ndef hexa(n):\n    if n <= 1:\n        return [0, 1, 1, 1, 1]\n    else:\n        return hexa(n - 1) + hexa(n - 2) + hexa", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1, 0, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 0, 1, 0, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "\n// a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n    if (n === 0 || n === 1) return [0, 1];\n\n    let result = [];\n    for (let i = 2; i <= n; i++) {\n        result.push(result[i - 2] + result[i - 1]);\n    }\n    return result;\n}\n\nconsole.log(fib(10));\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n    if (n === 0 || n === 1) return [0, 1];\n\n    let result = [];\n    for (let i = 2; i <= n; i++) {\n        result.push(result[i - 2] + result[i - 1]);\n    }\n    return result;\n}\n\nconsole.log(fib(10));", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [null], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [null, null], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [null, null, null, null], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n    if bork < 2:\n        return [0]\n    else:\n        return [0, 1] + glork(bork - 1)[:-1] + [glork(bork - 1)[-1] + glork(bork - 2)[-1]]\n\n\nprint(glork(10))\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if bork < 2:\n        return [0]\n    else:\n        return [0, 1] + glork(bork - 1)[:-1] + [glork(bork - 1)[-1] + glork(bork - 2)[-1]]\n\n\nprint(glork(10))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1, 0], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 0, 1, 0], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 0, 1, 0, 1, 0, 1, 0], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 5, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n    if (bork < 2) return [0];\n    var result = [];\n    for (var i = 0; i < bork - 1; i++) {\n        result.push(result[i] + result[i+1]);\n    }\n    return result;\n}\n\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {\n    if (bork < 2) return [0];\n    var result = [];\n    for (var i = 0; i < bork - 1; i++) {\n        result.push(result[i] + result[i+1]);\n    }\n    return result;\n}\n\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {\n    if (bork < 2) return [0];\n    var result = [];\n    for (var i = 0; i < bork - 1; i++) {\n        result.push(result[i] + result[i+1]);\n    }\n    return result;\n}\n\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n    if (bork < 2) return [0];\n    var result = [];\n    for (var i = 0; i < bork - 1; i++) {\n        result.push(result[i] + result[i+1]);\n    }\n    return result;\n}\n\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {\n    if (bork < 2) return [0];\n    var result = [];\n    for (var i = 0; i < bork - 1; i++) {\n        result.push(result[i] + result[i+1]);\n    }\n    return result;\n}\n\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {\n    if (bork < 2) return [0];\n    var result = [];\n    for (var i = 0; i < bork - 1; i++) {\n        result.push(result[i] + result[i+1]);\n    }\n    return result;\n}\n\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [null], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [null, null], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [null, null, null, null], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 5, "total": 8}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\ndef meaning_of_life():\n", "answer": "\ndef meaning_of_life():\n    return 42\n\n\n# a function with one input that returns the square of its argument\ndef square(x):\n    return x * x\n\n\n# a function with two inputs that returns their sum\ndef add(x, y):\n    return x + y\n\n\n# a function with three inputs that returns the product of its arguments\ndef multiply(x, y, z):\n    return x * y * z\n\n\n# a function with four inputs that returns the average of its arguments\ndef average(x, y, z, w):\n    return (x + y + z + w) / 4.0\n\n\n# a function with five inputs that returns the minimum of its arguments\ndef min(x, y, z, w, u):\n    if x < y:\n        if x < z:\n            if x < w:\n                if x < u:\n                    return x\n                else:\n                    return u\n            else:\n                if x < w:\n                    return x\n                else:\n                    return w\n        else:\n            if x < z:\n                if x < w:\n                    return x\n                else:\n                    return w\n            else:\n                if x < z:\n                    return x\n                else:\n                    return z\n    else:\n        if y < z:\n            if y < w:\n                if y < u:\n                    return y\n                else:\n                    return u\n            else:\n                if y < w:\n                    return y\n                else:\n                    return w\n        else:\n            if z < w:\n                if z < u:\n                    return z\n                else:\n                    return u\n            else:\n                if w < u:\n                    return w\n                else:\n                    return u\n\n\n# a function with six inputs that returns the maximum of its arguments\ndef max(x, y, z, w, u, v):\n    if x > y:\n        if x > z:\n            if x > w:\n                if x > u:\n                    if x > v:\n                        return x\n                    else:\n                        return v\n                else:\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42\n\n\n# a function with one input that returns the square of its argument\ndef square(x):\n    return x * x\n\n\n# a function with two inputs that returns their sum\ndef add(x, y):\n    return x + y\n\n\n# a function with three inputs that returns the product of its arguments\ndef multiply(x, y, z):\n    return x * y * z\n\n\n# a function with four inputs that returns the average of its arguments\ndef average(x, y, z, w):\n    return (x + y + z + w) / 4.0\n\n\n# a function with five inputs that returns the minimum of its arguments\ndef min(x, y, z, w, u):\n    if x < y:\n        if x < z:\n            if x < w:\n                if x < u:\n                    return x\n                else:\n                    return u\n            else:\n                if x < w:\n                    return x\n                else:\n                    return w\n        else:\n            if x < z:\n                if x < w:\n                    return x\n                else:\n                    return w\n            else:\n                if x < z:\n                    return x\n                else:\n                    return z\n    else:\n        if y < z:\n            if y < w:\n                if y < u:\n                    return y\n                else:\n                    return u\n            else:\n                if y < w:\n                    return y\n                else:\n                    return w\n        else:\n            if z < w:\n                if z < u:\n                    return z\n                else:\n                    return u\n            else:\n                if w < u:\n                    return w\n                else:\n                    return u\n\n\n# a function with six inputs that returns the maximum of its arguments\ndef max(x, y, z, w, u, v):\n    if x > y:\n        if x > z:\n            if x > w:\n                if x > u:\n                    if x > v:\n                        return x\n                    else:\n                        return v\n                else:", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": {"error": "expected an indented block (<string>, line 85)", "exc_type": "IndentationError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "\n// a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life() {", "answer": "\n\nfunction meaning_of_life() {\n\n    return 42;\n}\n\n// a function with one input that takes an integer and returns the square of it\nfunction square(x) {\n    return x * x;\n}\n\n// a function with two inputs that adds them together\nfunction add(a, b) {\n    return a + b;\n}\n\n// a function with three inputs that multiplies them all together\nfunction multiply(a, b, c) {\n    return a * b * c;\n}\n\n// a function with four inputs that divides them all into their sum\nfunction divide(a, b, c, d) {\n    return (a + b + c + d) / 4;\n}\n\n// a function with five inputs that subtracts them all from each other\nfunction subtract(a, b, c, d, e) {\n    return a - b - c - d - e;\n}\n\n// a function with six inputs that divides them all by their product\nfunction divideByProduct(a, b, c, d, e, f) {\n    return (a * b * c * d * e * f) / 6;\n}\n\n// a function with seven inputs that adds them all up\nfunction addAll(a, b, c, d, e, f, g) {\n    return a + b + c + d + e + f + g;\n}\n\n// a function with eight inputs that divides them all by their quotient\nfunction divideByQuotient(a, b, c, d, e, f, g, h) {\n    return (a / b / c / d / e / f / g / h);\n}\n\n// a function with nine inputs that subtracts them all from each other\nfunction subtractAll(a, b, c, d, e, f, g, h, i) {\n    return a - b - c - d - e - f - g - h - i;\n}\n\n// a function with ten inputs that divides them all by their difference\nfunction divideByDifference(a, b, c, d, e, f, g, h, i,\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n\n    return 42;\n}\n\n// a function with one input that takes an integer and returns the square of it\nfunction square(x) {\n    return x * x;\n}\n\n// a function with two inputs that adds them together\nfunction add(a, b) {\n    return a + b;\n}\n\n// a function with three inputs that multiplies them all together\nfunction multiply(a, b, c) {\n    return a * b * c;\n}\n\n// a function with four inputs that divides them all into their sum\nfunction divide(a, b, c, d) {\n    return (a + b + c + d) / 4;\n}\n\n// a function with five inputs that subtracts them all from each other\nfunction subtract(a, b, c, d, e) {\n    return a - b - c - d - e;\n}\n\n// a function with six inputs that divides them all by their product\nfunction divideByProduct(a, b, c, d, e, f) {\n    return (a * b * c * d * e * f) / 6;\n}\n\n// a function with seven inputs that adds them all up\nfunction addAll(a, b, c, d, e, f, g) {\n    return a + b + c + d + e + f + g;\n}\n\n// a function with eight inputs that divides them all by their quotient\nfunction divideByQuotient(a, b, c, d, e, f, g, h) {\n    return (a / b / c / d / e / f / g / h);\n}\n\n// a function with nine inputs that subtracts them all from each other\nfunction subtractAll(a, b, c, d, e, f, g, h, i) {\n    return a - b - c - d - e - f - g - h - i;\n}\n\n// a function with ten inputs that divides them all by their difference\nfunction divideByDifference(a, b, c, d, e, f, g, h, i,", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": {"error": "Unexpected token 'var'", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\ndef things():\n", "answer": "\ndef things():\n    return [5, \"foobar\", \"Madrid\"]\n\nprint(things())\n\n# a function with one input that returns the sum of its two arguments\ndef add_two_numbers(a, b):\n    return a + b\n\nprint(add_two_numbers(1, 2))\n\n# a function with one input that returns the product of its two arguments\ndef multiply_two_numbers(a, b):\n    return a * b\n\nprint(multiply_two_numbers(2, 3))\n\n# a function with one input that returns the square root of its argument\ndef sqrt(x):\n    return x ** 0.5\n\nprint(sqrt(4))\n\n# a function with one input that returns the cube root of its argument\ndef cbrt(x):\n    return x ** (1/3)\n\nprint(cbrt(8))\n\n# a function with one input that returns the factorial of its argument\ndef factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(6))\n\n# a function with one input that returns the exponential of its argument\ndef exp(x):\n    return e ** x\n\nprint(exp(0.5))\n\n# a function with one input that returns the logarithm of its argument\ndef lg(x):\n    return math.log10(x)\n\nprint(lg(100))\n\n# a function with one input that returns the sine of its argument\ndef sin(x):\n    return math.sin(math.radians(x))\n\nprint(sin(90))\n\n# a function with one input that returns the cosine of its argument\ndef cos(x):\n    return math.cos(math.radians(x))\n\nprint(cos(90))\n\n# a function with one input that returns the tangent of its argument\ndef tan(x):\n    return math.tan(math.radians\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def things():\n    return [5, \"foobar\", \"Madrid\"]\n\nprint(things())\n\n# a function with one input that returns the sum of its two arguments\ndef add_two_numbers(a, b):\n    return a + b\n\nprint(add_two_numbers(1, 2))\n\n# a function with one input that returns the product of its two arguments\ndef multiply_two_numbers(a, b):\n    return a * b\n\nprint(multiply_two_numbers(2, 3))\n\n# a function with one input that returns the square root of its argument\ndef sqrt(x):\n    return x ** 0.5\n\nprint(sqrt(4))\n\n# a function with one input that returns the cube root of its argument\ndef cbrt(x):\n    return x ** (1/3)\n\nprint(cbrt(8))\n\n# a function with one input that returns the factorial of its argument\ndef factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(6))\n\n# a function with one input that returns the exponential of its argument\ndef exp(x):\n    return e ** x\n\nprint(exp(0.5))\n\n# a function with one input that returns the logarithm of its argument\ndef lg(x):\n    return math.log10(x)\n\nprint(lg(100))\n\n# a function with one input that returns the sine of its argument\ndef sin(x):\n    return math.sin(math.radians(x))\n\nprint(sin(90))\n\n# a function with one input that returns the cosine of its argument\ndef cos(x):\n    return math.cos(math.radians(x))\n\nprint(cos(90))\n\n# a function with one input that returns the tangent of its argument\ndef tan(x):\n    return math.tan(math.radians", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": {"error": "unexpected EOF while parsing (<string>, line 65)", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "\n// a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things() {", "answer": "\n\nfunction things() {\n\n    return [5, \"foobar\", \"Madrid\"];\n}\n\n// a function with one input that takes in an integer and returns the square root of that integer\nfunction squareRoot(num) {\n    return Math.sqrt(num);\n}\n\n// a function with two inputs that takes in two integers and returns their sum\nfunction addTwoNumbers(a, b) {\n    return a + b;\n}\n\n// a function with two inputs that takes in two strings and concatenates them together into one string\nfunction combineStrings(str1, str2) {\n    return str1 + str2;\n}\n\n// a function with two inputs that takes in two numbers and divides the first by the second\nfunction divideByNumber(num1, num2) {\n    return num1 / num2;\n}\n\n// a function with two inputs that takes in two booleans and returns true if both are true, false otherwise\nfunction booleanAnd(bool1, bool2) {\n    return (bool1 && bool2);\n}\n\n// a function with two inputs that takes in two booleans and returns true if either or both are true, false otherwise\nfunction booleanOr(bool1, bool2) {\n    return (bool1 || bool2);\n}\n\n// a function with two inputs that takes in two booleans and returns true if only one is true, false otherwise\nfunction booleanXor(bool1, bool2) {\n    return ((bool1 && !bool2) || (!bool1 && bool2));\n}\n\n// a function with two inputs that takes in two booleans and returns true if they are equal, false otherwise\nfunction booleanEqualTo(bool1, bool2) {\n    return (bool1 == bool2);\n}\n\n// a function with two inputs that takes in two booleans and returns true if the first is greater than the second, false otherwise\nfunction booleanGreaterThan(bool1, bool2) {\n    return (bool1 > bool2);\n}\n\n// a function with two inputs that takes in two booleans and returns\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function things() {\n\n    return [5, \"foobar\", \"Madrid\"];\n}\n\n// a function with one input that takes in an integer and returns the square root of that integer\nfunction squareRoot(num) {\n    return Math.sqrt(num);\n}\n\n// a function with two inputs that takes in two integers and returns their sum\nfunction addTwoNumbers(a, b) {\n    return a + b;\n}\n\n// a function with two inputs that takes in two strings and concatenates them together into one string\nfunction combineStrings(str1, str2) {\n    return str1 + str2;\n}\n\n// a function with two inputs that takes in two numbers and divides the first by the second\nfunction divideByNumber(num1, num2) {\n    return num1 / num2;\n}\n\n// a function with two inputs that takes in two booleans and returns true if both are true, false otherwise\nfunction booleanAnd(bool1, bool2) {\n    return (bool1 && bool2);\n}\n\n// a function with two inputs that takes in two booleans and returns true if either or both are true, false otherwise\nfunction booleanOr(bool1, bool2) {\n    return (bool1 || bool2);\n}\n\n// a function with two inputs that takes in two booleans and returns true if only one is true, false otherwise\nfunction booleanXor(bool1, bool2) {\n    return ((bool1 && !bool2) || (!bool1 && bool2));\n}\n\n// a function with two inputs that takes in two booleans and returns true if they are equal, false otherwise\nfunction booleanEqualTo(bool1, bool2) {\n    return (bool1 == bool2);\n}\n\n// a function with two inputs that takes in two booleans and returns true if the first is greater than the second, false otherwise\nfunction booleanGreaterThan(bool1, bool2) {\n    return (bool1 > bool2);\n}\n\n// a function with two inputs that takes in two booleans and returns", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\ndef secretidentities():\n", "answer": "\ndef secretidentities():\n    return {'Superman': '<NAME>', 'Batman': '<NAME>', 'Spider-Man': '<NAME>'}\n\n\n# a function with one input that prints out the superhero's real name if it exists in the dictionary returned by secretidentities() or prints out \"I don't know\" otherwise.\ndef printrealname(hero):\n    identities = secretidentities()\n    try:\n        print(f\"The real name of {hero} is {identities[hero]}\")\n    except KeyError:\n        print(\"I don't know\")\n\n\nprintrealname('Superman')\nprintrealname('Batman')\nprintrealname('Spider-Man')\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def secretidentities():\n    return {'Superman': '<NAME>', 'Batman': '<NAME>', 'Spider-Man': '<NAME>'}\n\n\n# a function with one input that prints out the superhero's real name if it exists in the dictionary returned by secretidentities() or prints out \"I don't know\" otherwise.\ndef printrealname(hero):\n    identities = secretidentities()\n    try:\n        print(f\"The real name of {hero} is {identities[hero]}\")\n    except KeyError:\n        print(\"I don't know\")\n\n\nprintrealname('Superman')\nprintrealname('Batman')\nprintrealname('Spider-Man')", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "<NAME>", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "<NAME>", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "<NAME>", "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "\n// a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\nfunction secretidentities() {", "answer": "\n\nfunction secretidentities() {\n\n    return {\n        \"Superman\": \"<NAME>\",\n        \"Batman\": \"<NAME>\",\n        \"Spider-Man\": \"<NAME>\"\n    };\n}\n\n// a function with one input that takes in a superhero name and returns its real name if it exists in the secret identities object. If not, then return 'That hero does not exist.'\nfunction getRealName(hero) {\n    let identity = secretidentities();\n    if (identity[hero]) {\n        return `${hero}'s real name is ${identity[hero]}`;\n    } else {\n        return \"That hero does not exist.\";\n    }\n}\n\nconsole.log(getRealName(\"Superman\")); // Superman's real name is <NAME>.\nconsole.log(getRealName(\"Batman\")); // Batman's real name is <NAME>.\nconsole.log(getRealName(\"Spider-Man\")); // Spider-Man's real name is <NAME>.\nconsole.log(getRealName(\"Iron Man\")); // That hero does not exist.\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function secretidentities() {\n\n    return {\n        \"Superman\": \"<NAME>\",\n        \"Batman\": \"<NAME>\",\n        \"Spider-Man\": \"<NAME>\"\n    };\n}\n\n// a function with one input that takes in a superhero name and returns its real name if it exists in the secret identities object. If not, then return 'That hero does not exist.'\nfunction getRealName(hero) {\n    let identity = secretidentities();\n    if (identity[hero]) {\n        return ${hero}'s real name is ${identity[hero]};\n    } else {\n        return \"That hero does not exist.\";\n    }\n}\n\nconsole.log(getRealName(\"Superman\")); // Superman's real name is <NAME>.\nconsole.log(getRealName(\"Batman\")); // Batman's real name is <NAME>.\nconsole.log(getRealName(\"Spider-Man\")); // Spider-Man's real name is <NAME>.\nconsole.log(getRealName(\"Iron Man\")); // That hero does not exist.", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b\ndef gcd(a, b):\n", "answer": "\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\n# a function with one input n that returns the sum of all numbers from 1 to n\ndef sum_of_numbers(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_of_numbers(n - 1)\n\n\n# a function with one input n that returns the factorial of n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\n# a function with one input n that returns the number of digits in n\ndef num_digits(n):\n    if n <= 9:\n        return 1\n    else:\n        return num_digits(int(n / 10)) + 1\n\n\n# a function with one input n that returns the largest prime factor of n\ndef largest_prime_factor(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n = n // i\n    return n\n\n\n# a function with one input n that returns the smallest positive integer that is evenly divisible by all of the numbers from 1 to n\ndef lcm(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * lcm(n - 1) // gcd(n, n - 1)\n\n\n# a function with one input n that returns the sum of all even-valued terms in the Fibonacci sequence whose values do not exceed n\ndef fibo_sum(n):\n    if n <= 2:\n        return n\n    else:\n        return fibo_sum(n - 1) + fibo_sum(n - 2)\n\n\n# a function with one input n that returns the sum of all odd-valued terms in the Fibonacci sequence whose values do not exceed n\ndef fibo_odd_sum(n):\n    if n <=\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\n# a function with one input n that returns the sum of all numbers from 1 to n\ndef sum_of_numbers(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_of_numbers(n - 1)\n\n\n# a function with one input n that returns the factorial of n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\n# a function with one input n that returns the number of digits in n\ndef num_digits(n):\n    if n <= 9:\n        return 1\n    else:\n        return num_digits(int(n / 10)) + 1\n\n\n# a function with one input n that returns the largest prime factor of n\ndef largest_prime_factor(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n = n // i\n    return n\n\n\n# a function with one input n that returns the smallest positive integer that is evenly divisible by all of the numbers from 1 to n\ndef lcm(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * lcm(n - 1) // gcd(n, n - 1)\n\n\n# a function with one input n that returns the sum of all even-valued terms in the Fibonacci sequence whose values do not exceed n\ndef fibo_sum(n):\n    if n <= 2:\n        return n\n    else:\n        return fibo_sum(n - 1) + fibo_sum(n - 2)\n\n\n# a function with one input n that returns the sum of all odd-valued terms in the Fibonacci sequence whose values do not exceed n\ndef fibo_odd_sum(n):\n    if n <=", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "invalid syntax (<string>, line 60)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "invalid syntax (<string>, line 60)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "\n// a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b\nfunction gcd(a, b) {", "answer": "\n\nfunction gcd(a, b) {\n\n  if (b === 0) return a;\n  else return gcd(b, a % b);\n}\n\n// a function with one input n that returns an array containing all prime numbers less than or equal to n\nfunction primes(n) {\n  let arr = [];\n\n  for (let i = 2; i <= n; i++) {\n    // check if number is prime by checking if it's divisible by any other number between 1 and itself\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n\n  return arr;\n}\n\n// a function with one input n that returns true if n is prime, false otherwise\nfunction isPrime(n) {\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n\n  if (b === 0) return a;\n  else return gcd(b, a % b);\n}\n\n// a function with one input n that returns an array containing all prime numbers less than or equal to n\nfunction primes(n) {\n  let arr = [];\n\n  for (let i = 2; i <= n; i++) {\n    // check if number is prime by checking if it's divisible by any other number between 1 and itself\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n\n  return arr;\n}\n\n// a function with one input n that returns true if n is prime, false otherwise\nfunction isPrime(n) {\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana\ndef fofx(x, banana):\n", "answer": "\ndef fofx(x, banana):\n    return gcd(x,banana)\n\nprint(\"The GCD of 5 and 10 is\",fofx(5,10))<jupyter_output><empty_output><jupyter_text>**Exercise 2.2:** Write a function called `fibonacci` that takes an integer as input and returns the nth number in the Fibonacci sequence. The first two numbers in the Fibonacci sequence are 0 and 1, the next one is the sum of the previous two, and so on.<jupyter_code># your code here\ndef fibonacci(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n    \nprint(\"The 3rd number in the Fibonacci sequence is\",fibonacci(3))<jupyter_output><empty_output><jupyter_text>**Exercise 2.3:** Write a function called `is_prime` that takes an integer as input and returns True if it is prime and False otherwise. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.<jupyter_code># your code here\ndef is_prime(num):\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n\nprint(\"Is 7 a prime number?\",is_prime(7))<jupyter_output><empty_output><jupyter_text>**Exercise 2.4:** Write a function called `factorial` that takes an integer as input and returns its factorial. For example, the factorial of 4 is equal to 24.<jupyter_code># your code here\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num*factorial(num-1)\n        \nprint(\"Factorial of 4 is\",factorial(4))<jupyter_output><empty_output><jupyter_text>**Exercise 2.5:** Write a function called `sum_digits` that takes an integer as input and returns the sum of all digits in the given number.<jupyter_code># your code here\ndef sum_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total\n\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n    return gcd(x,banana)\n\nprint(\"The GCD of 5 and 10 is\",fofx(5,10))<jupyter_output><empty_output><jupyter_text>**Exercise 2.2:** Write a function called fibonacci that takes an integer as input and returns the nth number in the Fibonacci sequence. The first two numbers in the Fibonacci sequence are 0 and 1, the next one is the sum of the previous two, and so on.<jupyter_code># your code here\ndef fibonacci(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n    \nprint(\"The 3rd number in the Fibonacci sequence is\",fibonacci(3))<jupyter_output><empty_output><jupyter_text>**Exercise 2.3:** Write a function called is_prime that takes an integer as input and returns True if it is prime and False otherwise. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.<jupyter_code># your code here\ndef is_prime(num):\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n\nprint(\"Is 7 a prime number?\",is_prime(7))<jupyter_output><empty_output><jupyter_text>**Exercise 2.4:** Write a function called factorial that takes an integer as input and returns its factorial. For example, the factorial of 4 is equal to 24.<jupyter_code># your code here\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num*factorial(num-1)\n        \nprint(\"Factorial of 4 is\",factorial(4))<jupyter_output><empty_output><jupyter_text>**Exercise 2.5:** Write a function called sum_digits that takes an integer as input and returns the sum of all digits in the given number.<jupyter_code># your code here\ndef sum_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "invalid syntax (<string>, line 4)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "invalid syntax (<string>, line 4)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "\n// a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\n\nfunction fofx(x, banana) {\n\n  return gcd(x, banana);\n}\n\nconsole.log(\"fofx(3, 6):\", fofx(3, 6)); // 3\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n\n  return gcd(x, banana);\n}\n\nconsole.log(\"fofx(3, 6):\", fofx(3, 6)); // 3", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using iteration\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n\nprint(\"Enter an integer: \")\nnum = int(input())\nprint(factorial(num))\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n\nprint(\"Enter an integer: \")\nnum = int(input())\nprint(factorial(num))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  let result = 1;\n\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n\n  return result;\n}\n\nconsole.log(factorial(5)); // 120\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n  let result = 1;\n\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n\n  return result;\n}\n\nconsole.log(factorial(5)); // 120", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using recursion\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(\"The factorial of 5 is\", factorial(5))\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(\"The factorial of 5 is\", factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  if (n === 0 || n === 1) return 1;\n  else return n * factorial(n - 1);\n}\n\nconsole.log(\"factorial(5):\", factorial(5)); // 120\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n  if (n === 0 || n === 1) return 1;\n  else return n * factorial(n - 1);\n}\n\nconsole.log(\"factorial(5):\", factorial(5)); // 120", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a function with input bork that returns the factorial of bork\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n\n\nprint(\"glork(5) =\", glork(5))\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n\n\nprint(\"glork(5) =\", glork(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "\n// a function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  return bork * (bork - 1);\n}\n\nconsole.log(\"glork(5):\", glork(5)); // 5! = 120\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n  return bork * (bork - 1);\n}\n\nconsole.log(\"glork(5):\", glork(5)); // 5! = 120", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": 20, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str\ndef substrcount(str, substr):\n", "answer": "\ndef substrcount(str, substr):\n    count = 0\n    for i in range(len(str) - len(substr) + 1):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n\n\n# a function with input str that returns the length of the longest substring without repeating characters\ndef max_length(str):\n    max_length = 0\n    for i in range(len(str)):\n        temp = []\n        for j in range(i, len(str)):\n            if str[j] not in temp:\n                temp.append(str[j])\n            else:\n                break\n        if len(temp) > max_length:\n            max_length = len(temp)\n    return max_length\n\n\n# a function with inputs str1 and str2 that returns True if they are anagrams or False otherwise\ndef is_anagram(str1, str2):\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n\n\n# a function with inputs str1 and str2 that returns True if they are permutations or False otherwise\ndef is_permutation(str1, str2):\n    if sorted(str1) == sorted(str2):\n        return True\n    elif sorted(list(set(str1))) == sorted(list(set(str2))):\n        return True\n    else:\n        return False\n\n\n# a function with inputs str1 and str2 that returns True if they are rotations or False otherwise\ndef is_rotation(str1, str2):\n    if str1 == str2[0:len(str1)] and str2[0:len(str1)] == str2[len(str1):]:\n        return True\n    else:\n        return False\n\n\n# a function with inputs str1 and str2 that returns True if they are palindromes or False otherwise\ndef is_palindrome(str1, str2):\n    if str1 == str2[::-1]:\n        return True\n    else:\n        return False\n\n\n# a function\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    count = 0\n    for i in range(len(str) - len(substr) + 1):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n\n\n# a function with input str that returns the length of the longest substring without repeating characters\ndef max_length(str):\n    max_length = 0\n    for i in range(len(str)):\n        temp = []\n        for j in range(i, len(str)):\n            if str[j] not in temp:\n                temp.append(str[j])\n            else:\n                break\n        if len(temp) > max_length:\n            max_length = len(temp)\n    return max_length\n\n\n# a function with inputs str1 and str2 that returns True if they are anagrams or False otherwise\ndef is_anagram(str1, str2):\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n\n\n# a function with inputs str1 and str2 that returns True if they are permutations or False otherwise\ndef is_permutation(str1, str2):\n    if sorted(str1) == sorted(str2):\n        return True\n    elif sorted(list(set(str1))) == sorted(list(set(str2))):\n        return True\n    else:\n        return False\n\n\n# a function with inputs str1 and str2 that returns True if they are rotations or False otherwise\ndef is_rotation(str1, str2):\n    if str1 == str2[0:len(str1)] and str2[0:len(str1)] == str2[len(str1):]:\n        return True\n    else:\n        return False\n\n\n# a function with inputs str1 and str2 that returns True if they are palindromes or False otherwise\ndef is_palindrome(str1, str2):\n    if str1 == str2[::-1]:\n        return True\n    else:\n        return False\n\n\n# a function", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "\n// a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str\nfunction substrcount(str, substr) {", "answer": "\n\nfunction substrcount(str, substr) {\n\n  var count = 0;\n  for (var i=0; i<str.length; i++) {\n    if (str[i] === substr) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconsole.log(\"substrcount('hello', 'll') should be 2:\", substrcount('hello', 'll'));\nconsole.log(\"substrcount('hello', 'l') should be 1:\", substrcount('hello', 'l'));\nconsole.log(\"substrcount('hello', 'o') should be 1:\", substrcount('hello', 'o'));\nconsole.log(\"substrcount('hello', 'x') should be 0:\", substrcount('hello', 'x'));\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-multi-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n\n  var count = 0;\n  for (var i=0; i<str.length; i++) {\n    if (str[i] === substr) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconsole.log(\"substrcount('hello', 'll') should be 2:\", substrcount('hello', 'll'));\nconsole.log(\"substrcount('hello', 'l') should be 1:\", substrcount('hello', 'l'));\nconsole.log(\"substrcount('hello', 'o') should be 1:\", substrcount('hello', 'o'));\nconsole.log(\"substrcount('hello', 'x') should be 0:\", substrcount('hello', 'x'));", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 0, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 0, "status": 0}], "status": "FAIL", "passed": 5, "total": 7}