{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sum(arr) {\n  let total = 0;\n  for (let i = 0; i < arr.length; i++) {\n    total += arr[i];\n  }\n  return total;\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction avg(arr) {\n  return sum(arr) / arr.length;\n}\n\n// a function that takes an array of numbers and returns the smallest number in the array\nfunction min(arr) {\n  let smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\n// a function that takes an array of numbers and returns the largest number in the array\nfunction max(arr) {\n  let largest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n}\n\n// a function that takes an array of numbers and returns the sum of all the even numbers in the array\nfunction evenSum(arr) {\n  let total = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      total += arr[i];\n    }\n  }\n  return total;\n}\n\n// a function that takes an array of numbers and\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sum(arr) {\n  let total = 0;\n  for (let i = 0; i < arr.length; i++) {\n    total += arr[i];\n  }\n  return total;\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction avg(arr) {\n  return sum(arr) / arr.length;\n}\n\n// a function that takes an array of numbers and returns the smallest number in the array\nfunction min(arr) {\n  let smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\n// a function that takes an array of numbers and returns the largest number in the array\nfunction max(arr) {\n  let largest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n}\n\n// a function that takes an array of numbers and returns the sum of all the even numbers in the array\nfunction evenSum(arr) {\n  let total = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      total += arr[i];\n    }\n  }\n  return total;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": 1, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": 1, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": 2, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": 5, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "\n// a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sumArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the even numbers in an array\nfunction sumEvenArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the odd numbers in an array\nfunction sumOddArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sumArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the even numbers in an array\nfunction sumEvenArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sumArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the even numbers in an array\nfunction sumEvenArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the odd numbers in an array\nfunction sumOddArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sumArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": 1, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": 1, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": 2, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": 5, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n    if bork == 0:\n        return [0]\n    elif bork == 1:\n        return [1]\n    else:\n        return [glork(bork - 1) + glork(bork - 2)]\n\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if bork == 0:\n        return [0]\n    elif bork == 1:\n        return [1]\n    else:\n        return [glork(bork - 1) + glork(bork - 2)]\n\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [[1, 0]], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [[[1, 0], 1]], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [[[[[1, 0], 1], [1, 0]], [[1, 0], 1]]], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  if (bork === 0) {\n    return [0];\n  } else if (bork === 1) {\n    return [1];\n  } else {\n    return [1, 1]\n     .concat(glork(bork - 1))\n     .concat(glork(bork - 2));\n  }\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sum(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sum(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sum(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sum(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sum(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sum(\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n  if (bork === 0) {\n    return [0];\n  } else if (bork === 1) {\n    return [1];\n  } else {\n    return [1, 1]\n     .concat(glork(bork - 1))\n     .concat(glork(bork - 2));\n  }\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sum(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sum(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sum(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sum(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n// a function that returns the sum of all the numbers in an array\nfunction sum(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 1, 1, 0], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 1, 1, 1, 1, 0, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\ndef meaning_of_life():\n", "answer": "\ndef meaning_of_life():\n    return 42\n\nprint(meaning_of_life())\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42\n\nprint(meaning_of_life())\n", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "\n// a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life() {", "answer": "\n\nfunction meaning_of_life() {\n\n  return 42;\n}\n\n// a function with one input that returns a string, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life(answer) {\n  return `The answer to life, the universe and everything is ${answer}`;\n}\n\n// a function with two inputs that returns a string, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life(answer, another_answer) {\n  return `The answer to life, the universe and everything is ${answer} ${another_answer}`;\n}\n\n// a function with three inputs that returns a string, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life(answer, another_answer, yet_another_answer) {\n  return `The answer to life, the universe and everything is ${answer} ${another_answer} ${yet_another_answer}`;\n}\n\n// a function with four inputs that returns a string, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life(answer, another_answer, yet_another_answer, last_answer) {\n  return `The answer to life, the universe and everything is ${answer} ${another_answer} ${yet_another_answer} ${last_answer}`;\n}\n\n// a function with five inputs that returns a string, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life(answer, another_answer, yet_another_answer, last_answer, last_lucky_number) {\n  return `The answer to life, the universe and everything is ${answer} ${another_answer} ${yet_another_answer} ${last_answer} ${last_lucky_number}`;\n}\n\n// a function with six inputs that returns a string, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n\n  return 42;\n}\n\n// a function with one input that returns a string, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life(answer) {\n  return The answer to life, the universe and everything is ${answer};\n}\n\n// a function with two inputs that returns a string, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life(answer, another_answer) {\n  return The answer to life, the universe and everything is ${answer} ${another_answer};\n}\n\n// a function with three inputs that returns a string, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life(answer, another_answer, yet_another_answer) {\n  return The answer to life, the universe and everything is ${answer} ${another_answer} ${yet_another_answer};\n}\n\n// a function with four inputs that returns a string, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life(answer, another_answer, yet_another_answer, last_answer) {\n  return The answer to life, the universe and everything is ${answer} ${another_answer} ${yet_another_answer} ${last_answer};\n}\n\n// a function with five inputs that returns a string, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life(answer, another_answer, yet_another_answer, last_answer, last_lucky_number) {\n  return The answer to life, the universe and everything is ${answer} ${another_answer} ${yet_another_answer} ${last_answer} ${last_lucky_number};\n}\n", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": {"error": "Unexpected identifier", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\ndef things():\n", "answer": "\ndef things():\n    return [5, 'foobar', 'Madrid']\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def things():\n    return [5, 'foobar', 'Madrid']\n", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "\n// a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things() {", "answer": "\n\nfunction things() {\n\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with one input that returns the value of the input\nfunction add(a) {\n  return a;\n}\n\n// a function with two inputs that returns the sum of the two inputs\nfunction addTwo(a, b) {\n  return a + b;\n}\n\n// a function with three inputs that returns the product of the three inputs\nfunction multiply(a, b, c) {\n  return a * b * c;\n}\n\n// a function with four inputs that returns the quotient of the four inputs\nfunction divide(a, b, c, d) {\n  return a / b / c / d;\n}\n\n// a function with five inputs that returns the remainder of the five inputs\nfunction modulo(a, b, c, d, e) {\n  return a % b % c % d % e;\n}\n\n// a function with six inputs that returns the factorial of the six inputs\nfunction factorial(a, b, c, d, e, f) {\n  return a * b * c * d * e * f;\n}\n\n// a function with seven inputs that returns the factorial of the seven inputs\nfunction factorial2(a, b, c, d, e, f, g) {\n  return a * b * c * d * e * f * g;\n}\n\n// a function with eight inputs that returns the factorial of the eight inputs\nfunction factorial3(a, b, c, d, e, f, g, h) {\n  return a * b * c * d * e * f * g * h;\n}\n\n// a function with nine inputs that returns the factorial of the nine inputs\nfunction factorial4(a, b, c, d, e, f, g, h, i) {\n  return a * b * c * d * e * f * g * h * i;\n}\n\n// a function with ten inputs that returns the factorial of the ten inputs\nfunction factorial5(a,\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function things() {\n\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with one input that returns the value of the input\nfunction add(a) {\n  return a;\n}\n\n// a function with two inputs that returns the sum of the two inputs\nfunction addTwo(a, b) {\n  return a + b;\n}\n\n// a function with three inputs that returns the product of the three inputs\nfunction multiply(a, b, c) {\n  return a * b * c;\n}\n\n// a function with four inputs that returns the quotient of the four inputs\nfunction divide(a, b, c, d) {\n  return a / b / c / d;\n}\n\n// a function with five inputs that returns the remainder of the five inputs\nfunction modulo(a, b, c, d, e) {\n  return a % b % c % d % e;\n}\n\n// a function with six inputs that returns the factorial of the six inputs\nfunction factorial(a, b, c, d, e, f) {\n  return a * b * c * d * e * f;\n}\n\n// a function with seven inputs that returns the factorial of the seven inputs\nfunction factorial2(a, b, c, d, e, f, g) {\n  return a * b * c * d * e * f * g;\n}\n\n// a function with eight inputs that returns the factorial of the eight inputs\nfunction factorial3(a, b, c, d, e, f, g, h) {\n  return a * b * c * d * e * f * g * h;\n}\n\n// a function with nine inputs that returns the factorial of the nine inputs\nfunction factorial4(a, b, c, d, e, f, g, h, i) {\n  return a * b * c * d * e * f * g * h * i;\n}\n", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\ndef secretidentities():\n", "answer": "\ndef secretidentities():\n    return {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker'}\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def secretidentities():\n    return {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker'}\n", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "\n// a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\nfunction secretidentities() {", "answer": "\n\nfunction secretidentities() {\n\n  return {\n    Superman: 'Clark Kent',\n    Batman: 'Bruce Wayne',\n    Spiderman: 'Peter Parker'\n  };\n}\n\n// Write a function that takes in a string and returns true if it contains at least one of the characters 'a', 'e', 'i', 'o', 'u'.\nfunction hasVowels(str) {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Write a function that takes in a string and returns true if it contains all of the characters 'a', 'e', 'i', 'o', 'u', 'y'.\nfunction hasConsonants(str) {\n  let consonants = ['a', 'e', 'i', 'o', 'u', 'y'];\n  for (let i = 0; i < str.length; i++) {\n    if (!consonants.includes(str[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Write a function that takes in a string and returns true if it contains only lowercase letters.\nfunction isLowerCase(str) {\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!== str[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Write a function that takes in a string and returns true if it contains only uppercase letters.\nfunction isUpperCase(str) {\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!== str[i].toUpperCase()) {\n      return false;\n    }\n  }\n  \n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function secretidentities() {\n\n  return {\n    Superman: 'Clark Kent',\n    Batman: 'Bruce Wayne',\n    Spiderman: 'Peter Parker'\n  };\n}\n\n// Write a function that takes in a string and returns true if it contains at least one of the characters 'a', 'e', 'i', 'o', 'u'.\nfunction hasVowels(str) {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Write a function that takes in a string and returns true if it contains all of the characters 'a', 'e', 'i', 'o', 'u', 'y'.\nfunction hasConsonants(str) {\n  let consonants = ['a', 'e', 'i', 'o', 'u', 'y'];\n  for (let i = 0; i < str.length; i++) {\n    if (!consonants.includes(str[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Write a function that takes in a string and returns true if it contains only lowercase letters.\nfunction isLowerCase(str) {\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!== str[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n}\n", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b\ndef gcd(a, b):\n", "answer": "\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "\n// a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b\nfunction gcd(a, b) {", "answer": "\n\nfunction gcd(a, b) {\n\n  if (b === 0) return a;\n  return gcd(b, a % b);\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sum(arr) {\n  return arr.reduce((a, b) => a + b, 0);\n}\n\n// a function that takes an array of numbers and returns the product of all the numbers in the array\nfunction product(arr) {\n  return arr.reduce((a, b) => a * b, 1);\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction average(arr) {\n  return sum(arr) / arr.length;\n}\n\n// a function that takes an array of numbers and returns the median of all the numbers in the array\nfunction median(arr) {\n  const sorted = arr.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  return sorted.length % 2!== 0? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;\n}\n\n// a function that takes an array of numbers and returns the mode of all the numbers in the array\nfunction mode(arr) {\n  const counts = {};\n  for (let i = 0; i < arr.length; i++) {\n    counts[arr[i]] = (counts[arr[i]] || 0) + 1;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const keys = Object.keys(counts).filter(key => counts[key] === maxCount);\n  return keys[0];\n}\n\n// a function that takes an array of numbers and returns the variance of all the numbers in the array\nfunction variance(arr) {\n  const avg = average(arr);\n  return arr.reduce((a, b) => a + Math.pow(b - avg, 2), 0) / arr.length;\n}\n\n// a function that\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n\n  if (b === 0) return a;\n  return gcd(b, a % b);\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sum(arr) {\n  return arr.reduce((a, b) => a + b, 0);\n}\n\n// a function that takes an array of numbers and returns the product of all the numbers in the array\nfunction product(arr) {\n  return arr.reduce((a, b) => a * b, 1);\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction average(arr) {\n  return sum(arr) / arr.length;\n}\n\n// a function that takes an array of numbers and returns the median of all the numbers in the array\nfunction median(arr) {\n  const sorted = arr.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  return sorted.length % 2!== 0? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;\n}\n\n// a function that takes an array of numbers and returns the mode of all the numbers in the array\nfunction mode(arr) {\n  const counts = {};\n  for (let i = 0; i < arr.length; i++) {\n    counts[arr[i]] = (counts[arr[i]] || 0) + 1;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const keys = Object.keys(counts).filter(key => counts[key] === maxCount);\n  return keys[0];\n}\n\n// a function that takes an array of numbers and returns the variance of all the numbers in the array\nfunction variance(arr) {\n  const avg = average(arr);\n  return arr.reduce((a, b) => a + Math.pow(b - avg, 2), 0) / arr.length;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana\ndef fofx(x, banana):\n", "answer": "\ndef fofx(x, banana):\n    return gcd(x, banana)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n    return gcd(x, banana)\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "\n// a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\n\nfunction fofx(x, banana) {\n\n  let gcd = 0;\n  for (let i = 1; i <= Math.max(x, banana); i++) {\n    if (x % i === 0 && banana % i === 0) {\n      gcd = i;\n    }\n  }\n  return gcd;\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sumArray(array) {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction averageArray(array) {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum / array.length;\n}\n\n// a function that takes an array of numbers and returns the smallest number in the array\nfunction minArray(array) {\n  let min = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n}\n\n// a function that takes an array of numbers and returns the largest number in the array\nfunction maxArray(array) {\n  let max = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i];\n    }\n  }\n  return max;\n}\n\n// a function that takes an array of numbers and returns the product of all the numbers in the array\nfunction productArray(array) {\n  let product = 1;\n  for (let i = 0; i < array.length; i++) {\n    product *= array[i];\n  }\n  return product;\n}\n\n// a function that takes an array of\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n\n  let gcd = 0;\n  for (let i = 1; i <= Math.max(x, banana); i++) {\n    if (x % i === 0 && banana % i === 0) {\n      gcd = i;\n    }\n  }\n  return gcd;\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sumArray(array) {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction averageArray(array) {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum / array.length;\n}\n\n// a function that takes an array of numbers and returns the smallest number in the array\nfunction minArray(array) {\n  let min = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n}\n\n// a function that takes an array of numbers and returns the largest number in the array\nfunction maxArray(array) {\n  let max = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i];\n    }\n  }\n  return max;\n}\n\n// a function that takes an array of numbers and returns the product of all the numbers in the array\nfunction productArray(array) {\n  let product = 1;\n  for (let i = 0; i < array.length; i++) {\n    product *= array[i];\n  }\n  return product;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using iteration\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion2(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion2(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion3(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion3(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion4(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion4(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion5(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion5(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion6(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion6(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion7(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion7(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion8(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion8(\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion2(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion2(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion3(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion3(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion4(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion4(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion5(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion5(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion6(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion6(n - 1);\n}\n\n// a function with input n that returns the factorial of n using recursion\nfunction factorialRecursion7(n) {\n  if (n === 0) return 1;\n  return n * factorialRecursion7(n - 1);\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using recursion\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\n// a function that takes an array and returns the sum of all elements in the array\nfunction sumArray(arr) {\n  let total = 0;\n  for (let i = 0; i < arr.length; i++) {\n    total += arr[i];\n  }\n  return total;\n}\n\n// a function that takes an array and returns the average of all elements in the array\nfunction averageArray(arr) {\n  return sumArray(arr) / arr.length;\n}\n\n// a function that takes an array and returns the largest element in the array\nfunction maxArray(arr) {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}\n\n// a function that takes an array and returns the smallest element in the array\nfunction minArray(arr) {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n}\n\n// a function that takes an array and returns the first element in the array\nfunction firstArray(arr) {\n  return arr[0];\n}\n\n// a function that takes an array and returns the last element in the array\nfunction lastArray(arr) {\n  return arr[arr.length - 1];\n}\n\n// a function that takes an array and returns the second to last element in the array\nfunction secondToLastArray(arr) {\n  return arr[arr.length - 2];\n}\n\n// a function that takes an array and returns the third to last element in the array\nfunction thirdToLastArray(arr) {\n  return arr[arr.length - 3];\n}\n\n// a function that takes an array and returns the n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\n// a function that takes an array and returns the sum of all elements in the array\nfunction sumArray(arr) {\n  let total = 0;\n  for (let i = 0; i < arr.length; i++) {\n    total += arr[i];\n  }\n  return total;\n}\n\n// a function that takes an array and returns the average of all elements in the array\nfunction averageArray(arr) {\n  return sumArray(arr) / arr.length;\n}\n\n// a function that takes an array and returns the largest element in the array\nfunction maxArray(arr) {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}\n\n// a function that takes an array and returns the smallest element in the array\nfunction minArray(arr) {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n}\n\n// a function that takes an array and returns the first element in the array\nfunction firstArray(arr) {\n  return arr[0];\n}\n\n// a function that takes an array and returns the last element in the array\nfunction lastArray(arr) {\n  return arr[arr.length - 1];\n}\n\n// a function that takes an array and returns the second to last element in the array\nfunction secondToLastArray(arr) {\n  return arr[arr.length - 2];\n}\n\n// a function that takes an array and returns the third to last element in the array\nfunction thirdToLastArray(arr) {\n  return arr[arr.length - 3];\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a function with input bork that returns the factorial of bork\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "\n// a function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  if (bork === 0) {\n    return 1;\n  } else {\n    return bork * glork(bork - 1);\n  }\n}\n\n// a function that takes an array and returns the sum of all the elements in the array\nfunction sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++) {\n    total += array[i];\n  }\n  return total;\n}\n\n// a function that takes an array and returns the average of all the elements in the array\nfunction average(array) {\n  return sum(array) / array.length;\n}\n\n// a function that takes an array and returns the largest element in the array\nfunction max(array) {\n  var max = array[0];\n  for (var i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i];\n    }\n  }\n  return max;\n}\n\n// a function that takes an array and returns the smallest element in the array\nfunction min(array) {\n  var min = array[0];\n  for (var i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n}\n\n// a function that takes an array and returns the first element in the array\nfunction first(array) {\n  return array[0];\n}\n\n// a function that takes an array and returns the last element in the array\nfunction last(array) {\n  return array[array.length - 1];\n}\n\n// a function that takes an array and returns the second to last element in the array\nfunction secondToLast(array) {\n  return array[array.length - 2];\n}\n\n// a function that takes an array and returns the third to last element in the array\nfunction thirdToLast(array) {\n  return array[array.length - 3];\n}\n\n// a function that takes an array and returns the nth to last element\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n  if (bork === 0) {\n    return 1;\n  } else {\n    return bork * glork(bork - 1);\n  }\n}\n\n// a function that takes an array and returns the sum of all the elements in the array\nfunction sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++) {\n    total += array[i];\n  }\n  return total;\n}\n\n// a function that takes an array and returns the average of all the elements in the array\nfunction average(array) {\n  return sum(array) / array.length;\n}\n\n// a function that takes an array and returns the largest element in the array\nfunction max(array) {\n  var max = array[0];\n  for (var i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i];\n    }\n  }\n  return max;\n}\n\n// a function that takes an array and returns the smallest element in the array\nfunction min(array) {\n  var min = array[0];\n  for (var i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n}\n\n// a function that takes an array and returns the first element in the array\nfunction first(array) {\n  return array[0];\n}\n\n// a function that takes an array and returns the last element in the array\nfunction last(array) {\n  return array[array.length - 1];\n}\n\n// a function that takes an array and returns the second to last element in the array\nfunction secondToLast(array) {\n  return array[array.length - 2];\n}\n\n// a function that takes an array and returns the third to last element in the array\nfunction thirdToLast(array) {\n  return array[array.length - 3];\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str\ndef substrcount(str, substr):\n", "answer": "\ndef substrcount(str, substr):\n    return str.count(substr)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    return str.count(substr)\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "\n// a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str\nfunction substrcount(str, substr) {", "answer": "\n\nfunction substrcount(str, substr) {\n\n    var count = 0;\n    for (var i = 0; i < str.length; i++) {\n        if (str.substr(i, substr.length) == substr) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found in str\nfunction substrfind(str, substr) {\n    return str.indexOf(substr)!= -1;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is not found in str\nfunction substrnotfind(str, substr) {\n    return str.indexOf(substr) == -1;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found at the beginning of str\nfunction substrstart(str, substr) {\n    return str.indexOf(substr) == 0;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found at the end of str\nfunction substrend(str, substr) {\n    return str.indexOf(substr) == str.length - substr.length;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found anywhere in str\nfunction substrany(str, substr) {\n    return str.indexOf(substr)!= -1;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found only once in str\nfunction substronce(str, substr) {\n    return substrcount(str, substr) == 1;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found exactly once in str\nfunction substrexact(str, substr) {\n    return substrcount(str, substr) == 1;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found more than once in str\nfunction substrmore(str, substr) {\n    return substrcount(str, substr) > 1;\n}\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-7B-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n\n    var count = 0;\n    for (var i = 0; i < str.length; i++) {\n        if (str.substr(i, substr.length) == substr) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found in str\nfunction substrfind(str, substr) {\n    return str.indexOf(substr)!= -1;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is not found in str\nfunction substrnotfind(str, substr) {\n    return str.indexOf(substr) == -1;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found at the beginning of str\nfunction substrstart(str, substr) {\n    return str.indexOf(substr) == 0;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found at the end of str\nfunction substrend(str, substr) {\n    return str.indexOf(substr) == str.length - substr.length;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found anywhere in str\nfunction substrany(str, substr) {\n    return str.indexOf(substr)!= -1;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found only once in str\nfunction substronce(str, substr) {\n    return substrcount(str, substr) == 1;\n}\n\n// a function with inputs str and substr that returns true if the sub-string substr is found exactly once in str\nfunction substrexact(str, substr) {\n    return substrcount(str, substr) == 1;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}