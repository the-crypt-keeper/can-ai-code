{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) +\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 1, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 2, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 8, "status": 0}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        return [fib(n-1), fib(n-2)]\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        return [fib(n-1), fib(n-2)]\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [[1], [0]], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [[[1], [0]], [1]], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [[[[[1], [0]], [1]], [[1], [0]]], [[[1], [0]], [1]]], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "\n// a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n  if (n < 2) return [0, 1];\n  return [fib(n-1), fib(n-2)];\n}\n\n// a function with input length n that returns a list with the first n elements of the fibonacci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return [0, 1];\n  return [fib(n-1), fib(n-2)];\n}\n\n// a function with input length n that returns a list with the first n elements of the fibonacci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return [0, 1];\n  return [fib(n-1), fib(n-2)];\n}\n\n// a function with input length n that returns a list with the first n elements of the fibonacci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return [0, 1];\n  return [fib(n-1), fib(n-2)];\n}\n\n// a function with input length n that returns a list with the first n elements of the fibonacci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n  if (n < 2) return [0, 1];\n  return [fib(n-1), fib(n-2)];\n}\n\n// a function with input length n that returns a list with the first n elements of the fibonacci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return [0, 1];\n  return [fib(n-1), fib(n-2)];\n}\n\n// a function with input length n that returns a list with the first n elements of the fibonacci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return [0, 1];\n  return [fib(n-1), fib(n-2)];\n}\n\n// a function with input length n that returns a list with the first n elements of the fibonacci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n  if (n < 2) return [0, 1];\n  return [fib(n-1), fib(n-2)];\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [[0, 1], [0, 1]], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [[[0, 1], [0, 1]], [0, 1]], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [[[[[0, 1], [0, 1]], [0, 1]], [[0, 1], [0, 1]]], [[[0, 1], [0, 1]], [0, 1]]], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n    if bork == 0:\n        return [0]\n    elif bork == 1:\n        return [1]\n    else:\n        return glork(bork-1) + glork(bork-2)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if bork == 0:\n        return [0]\n    elif bork == 1:\n        return [1]\n    else:\n        return glork(bork-1) + glork(bork-2)\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 0], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 0, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 0, 1, 1, 0, 1, 0, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  var fib = [0, 1];\n  for (var i = 2; i <= bork; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib;\n}\n\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork2(bork) {\n  var fib = [0, 1];\n  for (var i = 2; i <= bork; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib;\n}\n\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork3(bork) {\n  var fib = [0, 1];\n  for (var i = 2; i <= bork; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib;\n}\n\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork4(bork) {\n  var fib\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n  var fib = [0, 1];\n  for (var i = 2; i <= bork; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib;\n}\n\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork2(bork) {\n  var fib = [0, 1];\n  for (var i = 2; i <= bork; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib;\n}\n\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork3(bork) {\n  var fib = [0, 1];\n  for (var i = 2; i <= bork; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\ndef meaning_of_life():\n", "answer": "\ndef meaning_of_life():\n    return 42\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42\n", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "\n// a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life() {", "answer": "\n\nfunction meaning_of_life() {\n\n  let answer = 42;\n  let input = prompt(\"What is your name?\");\n  if (input === null) {\n    alert(\"Please enter your name\");\n  } else {\n    answer = input;\n  }\n  return answer;\n}\n\n// a function that takes in an array of numbers and returns the sum of all the numbers in the array\nfunction sum_of_numbers(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n// a function that takes in an array of strings and returns the sum of all the strings in the array\nfunction sum_of_strings(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].length;\n  }\n  return sum;\n}\n\n// a function that takes in an array of integers and returns the sum of all the integers in the array\nfunction sum_of_integers(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n// a function that takes in an array of booleans and returns the sum of all the booleans in the array\nfunction sum_of_booleans(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n// a function that takes in an array of objects and returns the sum of all the objects in the array\nfunction sum_of_objects(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].length;\n  }\n  return sum;\n}\n\n// a function that takes in an array of arrays and returns the\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n\n  let answer = 42;\n  let input = prompt(\"What is your name?\");\n  if (input === null) {\n    alert(\"Please enter your name\");\n  } else {\n    answer = input;\n  }\n  return answer;\n}\n\n// a function that takes in an array of numbers and returns the sum of all the numbers in the array\nfunction sum_of_numbers(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n// a function that takes in an array of strings and returns the sum of all the strings in the array\nfunction sum_of_strings(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].length;\n  }\n  return sum;\n}\n\n// a function that takes in an array of integers and returns the sum of all the integers in the array\nfunction sum_of_integers(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n// a function that takes in an array of booleans and returns the sum of all the booleans in the array\nfunction sum_of_booleans(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n// a function that takes in an array of objects and returns the sum of all the objects in the array\nfunction sum_of_objects(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].length;\n  }\n  return sum;\n}\n", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": {"error": "prompt is not defined", "exc_type": "ReferenceError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\ndef things():\n", "answer": "\ndef things():\n    return [5, 'foobar', 'Madrid']\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def things():\n    return [5, 'foobar', 'Madrid']\n", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "\n// a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things() {", "answer": "\n\nfunction things() {\n\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with one input that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x) {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with two inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x, y) {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with three inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x, y, z) {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with four inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x, y, z, a) {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with five inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x, y, z, a, b) {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with six inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x, y, z, a, b, c) {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with seven inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function things() {\n\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with one input that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x) {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with two inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x, y) {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with three inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x, y, z) {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with four inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x, y, z, a) {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with five inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x, y, z, a, b) {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// a function with six inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things(x, y, z, a, b, c) {\n  return [5, 'foobar', 'Madrid'];\n}\n", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\ndef secretidentities():\n", "answer": "\ndef secretidentities():\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    }\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def secretidentities():\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    }\n", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "\n// a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\nfunction secretidentities() {", "answer": "\n\nfunction secretidentities() {\n\n  let superheroes = {\n    \"Clark Kent\": \"Superman\",\n    \"Bruce Wayne\": \"Batman\",\n    \"Peter Parker\": \"Spider-Man\"\n  };\n\n  let Batman = superheroes[\"Bruce Wayne\"];\n  let Superman = superheroes[\"Clark Kent\"];\n  let SpiderMan = superheroes[\"Peter Parker\"];\n\n  console.log(superman);\n  console.log(Batman);\n  console.log(SpiderMan);\n}\n\nsecretidentities();\n<|javascript|>import React from'react';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { fetchWeather } from '../actions/index';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { term: '' };\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  onInputChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  onFormSubmit(event) {\n    event.preventDefault();\n    this.props.fetchWeather(this.state.term);\n    this.setState({ term: '' });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onFormSubmit} className=\"input-group\">\n        <input\n          placeholder=\"Get a five day forecast in your favorite cities\"\n          className=\"form-control\"\n          value={this.state.term}\n          onChange={this.onInputChange}\n        />\n        <span className=\"input-group-btn\">\n          <button type=\"submit\" className=\"btn btn-secondary\">\n            Submit\n          </button>\n        </span>\n      </form>\n    );\n  }\n}\n\nfunction mapDispatchToPro\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function secretidentities() {\n\n  let superheroes = {\n    \"Clark Kent\": \"Superman\",\n    \"Bruce Wayne\": \"Batman\",\n    \"Peter Parker\": \"Spider-Man\"\n  };\n\n  let Batman = superheroes[\"Bruce Wayne\"];\n  let Superman = superheroes[\"Clark Kent\"];\n  let SpiderMan = superheroes[\"Peter Parker\"];\n\n  console.log(superman);\n  console.log(Batman);\n  console.log(SpiderMan);\n}\n\nsecretidentities();\n<|javascript|>import React from'react';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { fetchWeather } from '../actions/index';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { term: '' };\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  onInputChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  onFormSubmit(event) {\n    event.preventDefault();\n    this.props.fetchWeather(this.state.term);\n    this.setState({ term: '' });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onFormSubmit} className=\"input-group\">\n        <input\n          placeholder=\"Get a five day forecast in your favorite cities\"\n          className=\"form-control\"\n          value={this.state.term}\n          onChange={this.onInputChange}\n        />\n        <span className=\"input-group-btn\">\n          <button type=\"submit\" className=\"btn btn-secondary\">\n            Submit\n          </button>\n        </span>\n      </form>\n    );\n  }\n}\n\nfunction mapDispatchToPro", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b\ndef gcd(a, b):\n", "answer": "\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "\n// a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b\nfunction gcd(a, b) {", "answer": "\n\nfunction gcd(a, b) {\n\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sum(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n}\n\n// a function that takes an array of numbers and returns the product of all the numbers in the array\nfunction product(numbers) {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n}\n\n// a function that takes an array of numbers and returns the smallest number in the array\nfunction min(numbers) {\n  let min = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) min = numbers[i];\n  }\n  return min;\n}\n\n// a function that takes an array of numbers and returns the largest number in the array\nfunction max(numbers) {\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) max = numbers[i];\n  }\n  return max;\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction average(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n}\n\n// a function that takes an array of numbers and returns the median of all the numbers in the array\nfunction median(numbers) {\n  let median = 0;\n  let sorted = numbers.sort((a, b) => a -\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sum(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n}\n\n// a function that takes an array of numbers and returns the product of all the numbers in the array\nfunction product(numbers) {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n}\n\n// a function that takes an array of numbers and returns the smallest number in the array\nfunction min(numbers) {\n  let min = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) min = numbers[i];\n  }\n  return min;\n}\n\n// a function that takes an array of numbers and returns the largest number in the array\nfunction max(numbers) {\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) max = numbers[i];\n  }\n  return max;\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction average(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana\ndef fofx(x, banana):\n", "answer": "\ndef fofx(x, banana):\n    return gcd(x, banana)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n    return gcd(x, banana)\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "\n// a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\n\nfunction fofx(x, banana) {\n\n  return gcd(x, banana);\n}\n\n// a function with two inputs x and banana that returns the greatest common divisor (gcd) of x and banana\nfunction fofx(x, banana) {\n  return gcd(x, banana);\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n\n  return gcd(x, banana);\n}\n\n// a function with two inputs x and banana that returns the greatest common divisor (gcd) of x and banana\nfunction fofx(x, banana) {\n  return gcd(x, banana);\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n\n// a function with two inputs x and banana that returns the least common multiple of x and banana\nfunction lcm(x, banana) {\n  return x * (banana / gcd(x, banana));\n}\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using iteration\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sum(numbers) {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    result += numbers[i];\n  }\n  return result;\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction average(numbers) {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    result += numbers[i] / i;\n  }\n  return result / numbers.length;\n}\n\n// a function that takes an array of numbers and returns the product of all the numbers in the array\nfunction product(numbers) {\n  let result = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    result *= numbers[i];\n  }\n  return result;\n}\n\n// a function that takes an array of numbers and returns the minimum of all the numbers in the array\nfunction minimum(numbers) {\n  let result = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < result) {\n      result = numbers[i];\n    }\n  }\n  return result;\n}\n\n// a function that takes an array of numbers and returns the maximum of all the numbers in the array\nfunction maximum(numbers) {\n  let result = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > result) {\n      result = numbers[i];\n    }\n  }\n  return result;\n}\n\n// a function that takes an array of numbers and returns the median of all the numbers in the array\nfunction median(numbers) {\n  let result = 0;\n  \n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sum(numbers) {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    result += numbers[i];\n  }\n  return result;\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction average(numbers) {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    result += numbers[i] / i;\n  }\n  return result / numbers.length;\n}\n\n// a function that takes an array of numbers and returns the product of all the numbers in the array\nfunction product(numbers) {\n  let result = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    result *= numbers[i];\n  }\n  return result;\n}\n\n// a function that takes an array of numbers and returns the minimum of all the numbers in the array\nfunction minimum(numbers) {\n  let result = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < result) {\n      result = numbers[i];\n    }\n  }\n  return result;\n}\n\n// a function that takes an array of numbers and returns the maximum of all the numbers in the array\nfunction maximum(numbers) {\n  let result = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > result) {\n      result = numbers[i];\n    }\n  }\n  return result;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using recursion\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\n// a function that takes in an array of numbers and returns the sum of all the numbers in the array\nfunction sum(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n}\n\n// a function that takes in an array of numbers and returns the average of all the numbers in the array\nfunction average(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n}\n\n// a function that takes in an array of numbers and returns the product of all the numbers in the array\nfunction product(numbers) {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n}\n\n// a function that takes in an array of numbers and returns the minimum of all the numbers in the array\nfunction minimum(numbers) {\n  let min = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  return min;\n}\n\n// a function that takes in an array of numbers and returns the maximum of all the numbers in the array\nfunction maximum(numbers) {\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\n// a function that takes in an array of numbers and returns the median of all the numbers in the array\nfunction median(numbers) {\n  let median = 0;\n  \n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\n// a function that takes in an array of numbers and returns the sum of all the numbers in the array\nfunction sum(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n}\n\n// a function that takes in an array of numbers and returns the average of all the numbers in the array\nfunction average(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n}\n\n// a function that takes in an array of numbers and returns the product of all the numbers in the array\nfunction product(numbers) {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n}\n\n// a function that takes in an array of numbers and returns the minimum of all the numbers in the array\nfunction minimum(numbers) {\n  let min = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  return min;\n}\n\n// a function that takes in an array of numbers and returns the maximum of all the numbers in the array\nfunction maximum(numbers) {\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a function with input bork that returns the factorial of bork\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n    return bork * (bork - 1)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def glork(bork):\n    return bork * (bork - 1)\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": 20, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "\n// a function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  return bork * (bork - 1);\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sum(numbers) {\n  return numbers.reduce((a, b) => a + b, 0);\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction average(numbers) {\n  return numbers.reduce((a, b) => a + b, 0) / numbers.length;\n}\n\n// a function that takes an array of numbers and returns the product of all the numbers in the array\nfunction product(numbers) {\n  return numbers.reduce((a, b) => a * b, 1);\n}\n\n// a function that takes an array of numbers and returns the minimum of all the numbers in the array\nfunction minimum(numbers) {\n  return Math.min(...numbers);\n}\n\n// a function that takes an array of numbers and returns the maximum of all the numbers in the array\nfunction maximum(numbers) {\n  return Math.max(...numbers);\n}\n\n// a function that takes an array of numbers and returns the median of all the numbers in the array\nfunction median(numbers) {\n  const sorted = numbers.sort((a, b) => a - b);\n  return sorted[Math.floor(sorted.length / 2)];\n}\n\n// a function that takes an array of numbers and returns the mode of all the numbers in the array\nfunction mode(numbers) {\n  return numbers.reduce((a, b) => a + b, 0) / numbers.length;\n}\n\n// a function that takes an array of numbers and returns the variance of all the numbers in the array\nfunction variance(numbers) {\n  const sorted = numbers.sort((a, b) => a - b);\n  return sorted.map((a, i) => a - sorted[i - 1])\n   .reduce((a, b) => a + b, 0) / numbers.length;\n}\n\n// a function that takes an array of numbers and returns the\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n  return bork * (bork - 1);\n}\n\n// a function that takes an array of numbers and returns the sum of all the numbers in the array\nfunction sum(numbers) {\n  return numbers.reduce((a, b) => a + b, 0);\n}\n\n// a function that takes an array of numbers and returns the average of all the numbers in the array\nfunction average(numbers) {\n  return numbers.reduce((a, b) => a + b, 0) / numbers.length;\n}\n\n// a function that takes an array of numbers and returns the product of all the numbers in the array\nfunction product(numbers) {\n  return numbers.reduce((a, b) => a * b, 1);\n}\n\n// a function that takes an array of numbers and returns the minimum of all the numbers in the array\nfunction minimum(numbers) {\n  return Math.min(...numbers);\n}\n\n// a function that takes an array of numbers and returns the maximum of all the numbers in the array\nfunction maximum(numbers) {\n  return Math.max(...numbers);\n}\n\n// a function that takes an array of numbers and returns the median of all the numbers in the array\nfunction median(numbers) {\n  const sorted = numbers.sort((a, b) => a - b);\n  return sorted[Math.floor(sorted.length / 2)];\n}\n\n// a function that takes an array of numbers and returns the mode of all the numbers in the array\nfunction mode(numbers) {\n  return numbers.reduce((a, b) => a + b, 0) / numbers.length;\n}\n\n// a function that takes an array of numbers and returns the variance of all the numbers in the array\nfunction variance(numbers) {\n  const sorted = numbers.sort((a, b) => a - b);\n  return sorted.map((a, i) => a - sorted[i - 1])\n   .reduce((a, b) => a + b, 0) / numbers.length;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": 20, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str\ndef substrcount(str, substr):\n", "answer": "\ndef substrcount(str, substr):\n    return sum(1 for i, c in enumerate(str) if c == substr)\n\n#\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    return sum(1 for i, c in enumerate(str) if c == substr)\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 0, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 0, "status": 0}], "status": "FAIL", "passed": 5, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "\n// a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str\nfunction substrcount(str, substr) {", "answer": "\n\nfunction substrcount(str, substr) {\n\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === substr) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// a function that takes an array of strings and returns the sum of the values in the array\nfunction sum(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Number(arr[i]);\n  }\n  return sum;\n}\n\n// a function that takes an array of strings and returns the average of the values in the array\nfunction avg(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Number(arr[i]);\n  }\n  return sum / arr.length;\n}\n\n// a function that takes an array of strings and returns the average of the values in the array\nfunction avg2(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Number(arr[i]);\n  }\n  return sum / arr.length;\n}\n\n// a function that takes an array of strings and returns the average of the values in the array\nfunction avg3(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Number(arr[i]);\n  }\n  return sum / arr.length;\n}\n\n// a function that takes an array of strings and returns the average of the values in the array\nfunction avg4(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Number(arr[i]);\n  }\n  return sum / arr.length;\n}\n\n// a function that takes an array of strings and returns the average of the values in the array\nfunction avg5(arr) {\n  let sum = 0;\n  for (\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen2-1B-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === substr) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// a function that takes an array of strings and returns the sum of the values in the array\nfunction sum(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Number(arr[i]);\n  }\n  return sum;\n}\n\n// a function that takes an array of strings and returns the average of the values in the array\nfunction avg(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Number(arr[i]);\n  }\n  return sum / arr.length;\n}\n\n// a function that takes an array of strings and returns the average of the values in the array\nfunction avg2(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Number(arr[i]);\n  }\n  return sum / arr.length;\n}\n\n// a function that takes an array of strings and returns the average of the values in the array\nfunction avg3(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Number(arr[i]);\n  }\n  return sum / arr.length;\n}\n\n// a function that takes an array of strings and returns the average of the values in the array\nfunction avg4(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Number(arr[i]);\n  }\n  return sum / arr.length;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 0, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 0, "status": 0}], "status": "FAIL", "passed": 5, "total": 7}