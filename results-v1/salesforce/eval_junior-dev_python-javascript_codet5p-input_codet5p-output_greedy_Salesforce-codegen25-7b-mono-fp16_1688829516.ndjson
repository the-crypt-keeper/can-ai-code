{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\n# a function with input element number n (0 based) that returns the n-th element of the lucas sequence given The lucas sequence is defined by the boundary conditions luc(0) == 2, luc(1) == 1 and the recursive relation luc(n) == luc(n-1) + luc(n-2)\ndef luc(n):\n    if n < 2:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return luc(n - 1) + luc(n - 2)\n\n\n# a function with input element number n (0 based) that returns the n-th element of the sum_series sequence given The sum_series sequence is defined by the boundary conditions sum_series(0) == 0, sum_series(1) == 1 and the recursive relation sum_series(n) == sum_series(n-1) + sum_series(n-2)\ndef sum_series(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return sum_series(n - 1) + sum_series(n - 2)\n\n\n# a function with input element number n (0 based) that returns the n-th element of the sum_series sequence given The sum_series sequence is defined by the boundary conditions sum_series(0) == 0, sum_series(1) == 1 and the recursive relation sum_series(n) == sum_series(n-1) + sum_series(n-2)\ndef sum_series_with_parameters(n, x=0, y=1):\n    if n < 2:\n        return x\n    elif n == 2:\n        return y\n   \n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\n# a function with input element number n (0 based) that returns the n-th element of the lucas sequence given The lucas sequence is defined by the boundary conditions luc(0) == 2, luc(1) == 1 and the recursive relation luc(n) == luc(n-1) + luc(n-2)\ndef luc(n):\n    if n < 2:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return luc(n - 1) + luc(n - 2)\n\n\n# a function with input element number n (0 based) that returns the n-th element of the sum_series sequence given The sum_series sequence is defined by the boundary conditions sum_series(0) == 0, sum_series(1) == 1 and the recursive relation sum_series(n) == sum_series(n-1) + sum_series(n-2)\ndef sum_series(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return sum_series(n - 1) + sum_series(n - 2)\n\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 1, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 3, "status": 0}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    let f = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        f.push(f[i - 1] + f[i - 2]);\n    }\n    return f[n];\n}\n\"\"\"\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    let f = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        f.push(f[i - 1] + f[i - 2]);\n    }\n    return f[n];\n}\n\"\"\"", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "Invalid or unexpected token", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "Invalid or unexpected token", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "Invalid or unexpected token", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "Invalid or unexpected token", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "Invalid or unexpected token", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n    if n < 2:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        lst = fib(n - 1)\n        lst.append(lst[-1] + lst[-2])\n        return lst\n\n\n# a function with input length n that returns a list with the first n elements of the lucas numbers given The lucas numbers are defined by the boundary conditions lucas(0) == 2, lucas(1) == 1 and the recursive relation lucas(n) == lucas(n-1) + lucas(n-2)\ndef lucas(n):\n    if n < 2:\n        return [2]\n    elif n == 2:\n        return [2, 1]\n    else:\n        lst = lucas(n - 1)\n        lst.append(lst[-1] + lst[-2])\n        return lst\n\n\n# a function with input length n that returns a list with the first n elements of the sum of two series given The sum of two series are defined by the boundary conditions sum_two(0) == 0, sum_two(1) == 1 and the recursive relation sum_two(n) == sum_two(n-1) + sum_two(n-2)\ndef sum_two(n):\n    if n < 2:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        lst = sum_two(n - 1)\n        lst.append(lst[-1] + lst[-2])\n        return lst\n\n\n# a function with input length n that returns a list with the first n elements of the sum of three series given The sum of three series are defined by the boundary conditions sum_three(0) == 0, sum_three(1) == 1 and the recursive\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n < 2:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        lst = fib(n - 1)\n        lst.append(lst[-1] + lst[-2])\n        return lst\n\n\n# a function with input length n that returns a list with the first n elements of the lucas numbers given The lucas numbers are defined by the boundary conditions lucas(0) == 2, lucas(1) == 1 and the recursive relation lucas(n) == lucas(n-1) + lucas(n-2)\ndef lucas(n):\n    if n < 2:\n        return [2]\n    elif n == 2:\n        return [2, 1]\n    else:\n        lst = lucas(n - 1)\n        lst.append(lst[-1] + lst[-2])\n        return lst\n\n\n# a function with input length n that returns a list with the first n elements of the sum of two series given The sum of two series are defined by the boundary conditions sum_two(0) == 0, sum_two(1) == 1 and the recursive relation sum_two(n) == sum_two(n-1) + sum_two(n-2)\ndef sum_two(n):\n    if n < 2:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        lst = sum_two(n - 1)\n        lst.append(lst[-1] + lst[-2])\n        return lst\n\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "\n// a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n    if (n < 2) return n;\n    let f = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        f.push(f[i - 1] + f[i - 2]);\n    }\n    return f[n];\n}\n\n// a function that takes in an array of integers and returns the sum of all the even numbers in the array\nfunction sumOfEvens(arr) {\n    let total = 0;\n    for (let num of arr) {\n        if (num % 2 === 0) {\n            total += num;\n        }\n    }\n    return total;\n}\n\n// a function that takes in an array of integers and returns the product of all the odd numbers in the array\nfunction productOfOdds(arr) {\n    let total = 1;\n    for (let num of arr) {\n        if (num % 2 !== 0) {\n            total *= num;\n        }\n    }\n    return total;\n}\n\n// a function that takes in an array of integers and returns the average of all the values in the array\nfunction average(arr) {\n    let total = 0;\n    for (let num of arr) {\n        total += num;\n    }\n    return total / arr.length;\n}\n\n// a function that takes in an array of integers and returns the maximum value in the array\nfunction maxValue(arr) {\n    let max = arr[0];\n    for (let num of arr) {\n        if (num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n\n// a function that takes in an array of integers and returns the minimum value in the array\nfunction minValue(arr) {\n    let min = arr[0];\n    for (let num of arr) {\n        if (num < min) {\n            min =\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n    if (n < 2) return n;\n    let f = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        f.push(f[i - 1] + f[i - 2]);\n    }\n    return f[n];\n}\n\n// a function that takes in an array of integers and returns the sum of all the even numbers in the array\nfunction sumOfEvens(arr) {\n    let total = 0;\n    for (let num of arr) {\n        if (num % 2 === 0) {\n            total += num;\n        }\n    }\n    return total;\n}\n\n// a function that takes in an array of integers and returns the product of all the odd numbers in the array\nfunction productOfOdds(arr) {\n    let total = 1;\n    for (let num of arr) {\n        if (num % 2 !== 0) {\n            total *= num;\n        }\n    }\n    return total;\n}\n\n// a function that takes in an array of integers and returns the average of all the values in the array\nfunction average(arr) {\n    let total = 0;\n    for (let num of arr) {\n        total += num;\n    }\n    return total / arr.length;\n}\n\n// a function that takes in an array of integers and returns the maximum value in the array\nfunction maxValue(arr) {\n    let max = arr[0];\n    for (let num of arr) {\n        if (num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": 1, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": 1, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": 2, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": 5, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n    if bork < 2:\n        return [0]\n    else:\n        return [glork(bork - 1)[-1], glork(bork - 2)[-1] + glork(bork - 1)[-1]]\n\n\nprint(glork(10))\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if bork < 2:\n        return [0]\n    else:\n        return [glork(bork - 1)[-1], glork(bork - 2)[-1] + glork(bork - 1)[-1]]\n\n\nprint(glork(10))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 0], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 0], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 0], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 5, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n    var i = 0;\n    var j = 1;\n    var k = [];\n    while (i < bork){\n        k.push(j);\n        var l = j;\n        j = j+i;\n        i = l;\n    }\n    return k;\n}\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n    var i = 0;\n    var j = 1;\n    var k = [];\n    while (i < bork){\n        k.push(j);\n        var l = j;\n        j = j+i;\n        i = l;\n    }\n    return k;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 1, 2], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 1, 2, 3], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\ndef meaning_of_life():\n", "answer": "\ndef meaning_of_life():\n    return 42\n\n\n# a function with two inputs: one string and one number, and outputs nothing\ndef print_string(s):\n    print(s)\n\n\n# a function with three inputs: one string, one number, and one boolean value, and outputs nothing\ndef print_string_and_number(s, n):\n    print(s + str(n))\n\n\n# a function with four inputs: one string, one number, one boolean value, and one list of strings, and outputs nothing\ndef print_string_and_number_and_boolean_and_list(s, n, b, lst):\n    print(s + str(n) + str(b) + str(lst))\n\n\n# a function with five inputs: one string, one number, one boolean value, one list of strings, and one dictionary of numbers, and outputs nothing\ndef print_string_and_number_and_boolean_and_list_and_dictionary(s, n, b, lst, dct):\n    print(s + str(n) + str(b) + str(lst) + str(dct))\n\n\n# a function with six inputs: one string, one number, one boolean value, one list of strings, one dictionary of numbers, and one set of numbers, and outputs nothing\ndef print_string_and_number_and_boolean_and_list_and_dictionary_and_set(s, n, b, lst, dct, st):\n    print(s + str(n) + str(b) + str(lst) + str(dct) + str(st))\n\n\n# a function with seven inputs: one string, one number, one boolean value, one list of strings, one dictionary of numbers, one set of numbers, and one tuple of numbers, and outputs nothing\ndef print_string_and_number_and_boolean_and_list_and_dictionary_and_set_and_tuple(s, n, b, lst, dct, st, tpl):\n    print(s + str(n) + str\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42\n\n\n# a function with two inputs: one string and one number, and outputs nothing\ndef print_string(s):\n    print(s)\n\n\n# a function with three inputs: one string, one number, and one boolean value, and outputs nothing\ndef print_string_and_number(s, n):\n    print(s + str(n))\n\n\n# a function with four inputs: one string, one number, one boolean value, and one list of strings, and outputs nothing\ndef print_string_and_number_and_boolean_and_list(s, n, b, lst):\n    print(s + str(n) + str(b) + str(lst))\n\n\n# a function with five inputs: one string, one number, one boolean value, one list of strings, and one dictionary of numbers, and outputs nothing\ndef print_string_and_number_and_boolean_and_list_and_dictionary(s, n, b, lst, dct):\n    print(s + str(n) + str(b) + str(lst) + str(dct))\n\n\n# a function with six inputs: one string, one number, one boolean value, one list of strings, one dictionary of numbers, and one set of numbers, and outputs nothing\ndef print_string_and_number_and_boolean_and_list_and_dictionary_and_set(s, n, b, lst, dct, st):\n    print(s + str(n) + str(b) + str(lst) + str(dct) + str(st))\n\n", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "\n// a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life() {", "answer": "\n\nfunction meaning_of_life() {\n\n    return 42;\n}\n\n// a function that takes two arguments (a string and an array of integers) and returns nothing\nfunction greet(name, lst) {\n    console.log(\"Hello \" + name);\n    for (var i = 0; i < lst.length; i++) {\n        console.log(lst[i]);\n    }\n}\n\n// a function that takes three arguments (two strings and one number), prints them all in order, then returns the sum of those numbers\nfunction add_string_and_number(str1, str2, num) {\n    console.log(str1 + \", \" + str2 + \", \" + num);\n    return num + 1;\n}\n\n// a function that takes four arguments (three strings and one boolean), prints them all in order, then returns true if the boolean argument was true, false otherwise\nfunction print_strings_boolean(str1, str2, str3, bol) {\n    console.log(str1 + \", \" + str2 + \", \" + str3 + \", \" + bol);\n    return bol;\n}\n\n// a function that takes five arguments (four strings and one number), prints them all in order, then returns the product of those numbers\nfunction multiply_strings_numbers(str1, str2, str3, str4, num) {\n    console.log(str1 + \", \" + str2 + \", \" + str3 + \", \" + str4 + \", \" + num);\n    return num * 2;\n}\n\n// a function that takes six arguments (five strings and one number), prints them all in order, then returns the sum of those numbers\nfunction add_strings_numbers(str1, str2, str3, str4, str5, num) {\n    console.log(str1 + \", \" + str2 + \", \" + str3 + \", \" + str4 + \", \" + str5 + \", \" + num);\n    return num + 3;\n}\n\n// a function that takes seven arguments (six strings and one number), prints them all in order, then returns the\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n\n    return 42;\n}\n\n// a function that takes two arguments (a string and an array of integers) and returns nothing\nfunction greet(name, lst) {\n    console.log(\"Hello \" + name);\n    for (var i = 0; i < lst.length; i++) {\n        console.log(lst[i]);\n    }\n}\n\n// a function that takes three arguments (two strings and one number), prints them all in order, then returns the sum of those numbers\nfunction add_string_and_number(str1, str2, num) {\n    console.log(str1 + \", \" + str2 + \", \" + num);\n    return num + 1;\n}\n\n// a function that takes four arguments (three strings and one boolean), prints them all in order, then returns true if the boolean argument was true, false otherwise\nfunction print_strings_boolean(str1, str2, str3, bol) {\n    console.log(str1 + \", \" + str2 + \", \" + str3 + \", \" + bol);\n    return bol;\n}\n\n// a function that takes five arguments (four strings and one number), prints them all in order, then returns the product of those numbers\nfunction multiply_strings_numbers(str1, str2, str3, str4, num) {\n    console.log(str1 + \", \" + str2 + \", \" + str3 + \", \" + str4 + \", \" + num);\n    return num * 2;\n}\n\n// a function that takes six arguments (five strings and one number), prints them all in order, then returns the sum of those numbers\nfunction add_strings_numbers(str1, str2, str3, str4, str5, num) {\n    console.log(str1 + \", \" + str2 + \", \" + str3 + \", \" + str4 + \", \" + str5 + \", \" + num);\n    return num + 3;\n}\n", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\ndef things():\n", "answer": "\ndef things():\n    return [5, \"foobar\", \"Madrid\"]\n\n\nprint(things())\n\n# a function that takes in two arguments and returns their sum\ndef add_two(a, b):\n    return a + b\n\n\nprint(add_two(1, 2))\n\n# a function that takes in one argument and returns its square\ndef square(x):\n    return x * x\n\n\nprint(square(3))\n\n# a function that takes in one argument and returns its cube\ndef cube(y):\n    return y ** 3\n\n\nprint(cube(4))\n\n# a function that takes in one argument and returns its square root\nimport math\n\n\ndef sqrt(z):\n    return math.sqrt(z)\n\n\nprint(sqrt(16))\n\n# a function that takes in two arguments and returns the average of both\ndef avg(a, b):\n    return (a + b) / 2\n\n\nprint(avg(2, 4))\n\n# a function that takes in two arguments and returns True if they are equal, False otherwise\ndef equals(c, d):\n    return c == d\n\n\nprint(equals(2, 2))\n\n# a function that takes in two arguments and returns True if the first is greater than or equal to the second, False otherwise\ndef gteq(e, f):\n    return e >= f\n\n\nprint(gteq(2, 1))\n\n# a function that takes in two arguments and returns True if the first is less than or equal to the second, False otherwise\ndef lteq(g, h):\n    return g <= h\n\n\nprint(lteq(2, 2))\n\n# a function that takes in two arguments and returns True if the first is not equal to the second, False otherwise\ndef notequals(i, j):\n    return i != j\n\n\nprint(notequals(2, 2))\n\n# a function that takes in two arguments and returns True if the first is greater than the second, False otherwise\ndef greaterthan(k, l):\n    return k > l\n\n\nprint(\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def things():\n    return [5, \"foobar\", \"Madrid\"]\n\n\nprint(things())\n\n# a function that takes in two arguments and returns their sum\ndef add_two(a, b):\n    return a + b\n\n\nprint(add_two(1, 2))\n\n# a function that takes in one argument and returns its square\ndef square(x):\n    return x * x\n\n\nprint(square(3))\n\n# a function that takes in one argument and returns its cube\ndef cube(y):\n    return y ** 3\n\n\nprint(cube(4))\n\n# a function that takes in one argument and returns its square root\nimport math\n\n\ndef sqrt(z):\n    return math.sqrt(z)\n\n\nprint(sqrt(16))\n\n# a function that takes in two arguments and returns the average of both\ndef avg(a, b):\n    return (a + b) / 2\n\n\nprint(avg(2, 4))\n\n# a function that takes in two arguments and returns True if they are equal, False otherwise\ndef equals(c, d):\n    return c == d\n\n\nprint(equals(2, 2))\n\n# a function that takes in two arguments and returns True if the first is greater than or equal to the second, False otherwise\ndef gteq(e, f):\n    return e >= f\n\n\nprint(gteq(2, 1))\n\n# a function that takes in two arguments and returns True if the first is less than or equal to the second, False otherwise\ndef lteq(g, h):\n    return g <= h\n\n\nprint(lteq(2, 2))\n\n# a function that takes in two arguments and returns True if the first is not equal to the second, False otherwise\ndef notequals(i, j):\n    return i != j\n\n\nprint(notequals(2, 2))\n", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "\n// a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things() {", "answer": "\n\nfunction things() {\n\n    return [5, \"foobar\", \"Madrid\"];\n}\n\n// a function that takes in two arguments and returns their sum\nfunction add(a, b) {\n    return a + b;\n}\n\n// a function that takes in one argument and returns it\nfunction identity(x) {\n    return x;\n}\n\"\"\"\n\n\ndef test_basic():\n    assert run(\"\"\"\n        var x = 1;\n        var y = 2;\n        var z = 3;\n        \"\"\") == {}\n\n\ndef test_assignments():\n    assert run(\"var foo = 5;\") == {\"foo\": 5}\n    assert run(\"var foo = 5; var bar = 6;\") == {\"foo\": 5, \"bar\": 6}\n    assert run(\"var foo = 5; var bar = 6; var foo = 7;\") == {\"foo\": 7, \"bar\": 6}\n\n\ndef test_functions():\n    assert run(FUNCTIONS) == {\n        \"add\": lambda a, b: a + b,\n        \"identity\": lambda x: x,\n        \"things\": lambda: [5, \"foobar\", \"Madrid\"],\n    }\n\n\ndef test_calls():\n    assert run(CALLS) == {\n        \"add\": 8,\n        \"identity\": 1,\n        \"things\": [5, \"foobar\", \"Madrid\"],\n    }\n\n\ndef test_nested_calls():\n    assert run(NESTED_CALLS) == {\n        \"add\": 13,\n        \"identity\": 1,\n        \"things\": [5, \"foobar\", \"Madrid\"],\n    }\n\n\ndef test_returns():\n    assert run(RETURNS) == {\n        \"add\": 8,\n        \"identity\": 1,\n        \"things\": [5, \"foobar\", \"Madrid\"],\n    }\n\n\ndef test_nested_returns():\n    assert run(NESTED_RETURNS) == {\n        \"add\": 13,\n       \n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "function things() {\n\n    return [5, \"foobar\", \"Madrid\"];\n}\n\n// a function that takes in two arguments and returns their sum\nfunction add(a, b) {\n    return a + b;\n}\n", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\ndef secretidentities():\n", "answer": "\ndef secretidentities():\n    return {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker'}\n\n\n# a function that takes in two arguments (a list of superheroes and a string of a superhero's name) and returns the index of the hero in the list if it exists, or -1 otherwise. For example, find_hero(['Hulk', 'Captain America', 'Thanos'], 'Captain America') should return 1\ndef find_hero(heroes, hero):\n    for i in range(len(heroes)):\n        if heroes[i] == hero:\n            return i\n    return -1\n\n\n# a function that takes in three arguments (a list of superheroes, a string of a hero's name, and a boolean indicating whether or not the hero is awesome), and adds the hero to the list if he/she doesn't exist already. If the hero is awesome, change the last element of the returned list to True. Otherwise, keep the last element as False. For example, add_hero(['Wonder Woman'], 'Wolverine', True) should return ['Wonder Woman', 'Captain Marvel', 'Ant-Man', 'Wolverine', True].\ndef add_hero(heroes, hero, awesome=False):\n    if find_hero(heroes, hero) != -1:\n        return heroes\n    else:\n        heroes.append(hero)\n        if awesome:\n            heroes.append(True)\n        else:\n            heroes.append(False)\n        return heroes\n\n\n# a function that takes in a list of superheroes and a string of a hero's name, removes them from the list if they are there and returns None if they aren't. For example, remove_hero(['Wonder Woman', 'Captain Marvel', 'Ant-Man', 'Wolverine', True], 'Wonder Woman') should return ['Captain Marvel', 'Ant-Man', 'Wolverine', True] and remove_hero(['Wonder Woman', 'Captain Marvel', 'Ant-Man', 'Wolverine', True], 'Batgirl') should return\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def secretidentities():\n    return {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker'}\n\n\n# a function that takes in two arguments (a list of superheroes and a string of a superhero's name) and returns the index of the hero in the list if it exists, or -1 otherwise. For example, find_hero(['Hulk', 'Captain America', 'Thanos'], 'Captain America') should return 1\ndef find_hero(heroes, hero):\n    for i in range(len(heroes)):\n        if heroes[i] == hero:\n            return i\n    return -1\n\n\n# a function that takes in three arguments (a list of superheroes, a string of a hero's name, and a boolean indicating whether or not the hero is awesome), and adds the hero to the list if he/she doesn't exist already. If the hero is awesome, change the last element of the returned list to True. Otherwise, keep the last element as False. For example, add_hero(['Wonder Woman'], 'Wolverine', True) should return ['Wonder Woman', 'Captain Marvel', 'Ant-Man', 'Wolverine', True].\ndef add_hero(heroes, hero, awesome=False):\n    if find_hero(heroes, hero) != -1:\n        return heroes\n    else:\n        heroes.append(hero)\n        if awesome:\n            heroes.append(True)\n        else:\n            heroes.append(False)\n        return heroes\n\n", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "\n// a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\nfunction secretidentities() {", "answer": "\n\nfunction secretidentities() {\n\n    return {\n        \"Clark Kent\": \"Superman\",\n        \"Bruce Wayne\": \"Batman\",\n        \"Peter Parker\": \"Spider-Man\"\n    };\n}\n\"\"\"\n\n\ndef test_secret_identities():\n    assert (\n        get_js_ast(SECRET_IDENTITIES).body[0].value.func.id == \"secretidentities\"\n    )\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "function secretidentities() {\n\n    return {\n        \"Clark Kent\": \"Superman\",\n        \"Bruce Wayne\": \"Batman\",\n        \"Peter Parker\": \"Spider-Man\"\n    };\n}\n\"\"\"\n\n\ndef test_secret_identities():\n    assert (\n        get_js_ast(SECRET_IDENTITIES).body[0].value.func.id == \"secretidentities\"\n    )", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b\ndef gcd(a, b):\n", "answer": "\ndef gcd(a, b):\n    while b != 0:\n        t = b\n        b = a % b\n        a = t\n    return a\n\n\n# a function with three inputs a, b, c that returns the least common multiple (lcm) of a, b, and c\ndef lcm(a, b, c):\n    # find the greatest common denominator between a, b, and c\n    gcd_ab = gcd(a, b)\n    gcd_abc = gcd(gcd_ab, c)\n\n    # calculate the least common multiple by dividing the product of a, b, and c by the greatest common denominator\n    lcm = int((a * b * c) / gcd_abc)\n\n    return lcm\n\n\n# a function with one input n that returns True if n is prime, False otherwise\ndef isPrime(n):\n    # check to see if n is even\n    if n % 2 == 0:\n        return False\n\n    # loop through all numbers from 3 to sqrt(n)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # if there is no remainder when dividing n by i then it's not prime\n        if n % i == 0:\n            return False\n\n    # if we get here then n must be prime\n    return True\n\n\n# a function with one input n that returns True if n is perfect square, False otherwise\ndef isPerfectSquare(n):\n    # use math library to determine whether or not n is an integer\n    if math.isclose(int(math.sqrt(n)), round(math.sqrt(n), 10)):\n        return True\n    else:\n        return False\n\n\n# a function with one input n that returns True if n is a palindrome, False otherwise\ndef isPalindrome(n):\n    # convert n into string so we can compare characters\n    s = str(n)\n    # reverse the string\n    r = s[::-1]\n    # check if they are equal\n    if s == r:\n        return True\n    else:\n        return False\n\n\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    while b != 0:\n        t = b\n        b = a % b\n        a = t\n    return a\n\n\n# a function with three inputs a, b, c that returns the least common multiple (lcm) of a, b, and c\ndef lcm(a, b, c):\n    # find the greatest common denominator between a, b, and c\n    gcd_ab = gcd(a, b)\n    gcd_abc = gcd(gcd_ab, c)\n\n    # calculate the least common multiple by dividing the product of a, b, and c by the greatest common denominator\n    lcm = int((a * b * c) / gcd_abc)\n\n    return lcm\n\n\n# a function with one input n that returns True if n is prime, False otherwise\ndef isPrime(n):\n    # check to see if n is even\n    if n % 2 == 0:\n        return False\n\n    # loop through all numbers from 3 to sqrt(n)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # if there is no remainder when dividing n by i then it's not prime\n        if n % i == 0:\n            return False\n\n    # if we get here then n must be prime\n    return True\n\n\n# a function with one input n that returns True if n is perfect square, False otherwise\ndef isPerfectSquare(n):\n    # use math library to determine whether or not n is an integer\n    if math.isclose(int(math.sqrt(n)), round(math.sqrt(n), 10)):\n        return True\n    else:\n        return False\n\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "\n// a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b\nfunction gcd(a, b) {", "answer": "\n\nfunction gcd(a, b) {\n\n  // Write your code here.\n}\n\n// Test Cases\nconsole.log(gcd(3, 5)) // should return 1\nconsole.log(gcd(14, 28)) // should return 14\n\"\"\"\n\n\ndef gcd(a: int, b: int):\n    if a < 0 or b < 0:\n        raise ValueError(\"Inputs must be positive\")\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\nprint(gcd(3, 5))  # should print 1\nprint(gcd(14, 28))  # should print 14\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n\n  // Write your code here.\n}\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana\ndef fofx(x, banana):\n", "answer": "\ndef fofx(x, banana):\n    # if x is bigger than banana, swap them\n    if x > banana:\n        temp = x\n        x = banana\n        banana = temp\n\n    # initialize gcd to 1\n    gcd = 1\n\n    # loop through all numbers from 2 to banana\n    for i in range(2, banana + 1):\n        # check if x can be divided by i without remainder\n        if x % i == 0 and banana % i == 0:\n            # set gcd to i\n            gcd = i\n\n    return gcd\n\n\n# a function with one input x that returns the smallest number divisible by all numbers between 1 and x\ndef smallest_divisor(x):\n    # initialize smallest_divisor to 1\n    smallest_divisor = 1\n\n    # loop through all numbers from 2 to x\n    for i in range(2, x + 1):\n        # check if smallest_divisor can be divided by i without remainder\n        if smallest_divisor % i == 0:\n            # continue looping through all numbers\n            continue\n        else:\n            # set smallest_divisor to i\n            smallest_divisor = i\n\n    return smallest_divisor\n\n\n# a function with three inputs x, y, z that returns True if x, y, and z are all positive integers and False otherwise\ndef all_positive_integers(x, y, z):\n    # if x, y, or z are not positive integers, return False\n    if x < 0 or y < 0 or z < 0:\n        return False\n    # otherwise, return True\n    else:\n        return True\n\n\n# a function with four inputs x, y, z, and n that returns True if x, y, z, and n are all positive integers and n divides both x and y and z, and False otherwise\ndef all_positive_integers_and_n_divides_both(x, y, z, n):\n    # if x, y, z, or n are not positive integers, return False\n    if x < 0 or y < 0 or z < 0 or n < 0:\n        return\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n    # if x is bigger than banana, swap them\n    if x > banana:\n        temp = x\n        x = banana\n        banana = temp\n\n    # initialize gcd to 1\n    gcd = 1\n\n    # loop through all numbers from 2 to banana\n    for i in range(2, banana + 1):\n        # check if x can be divided by i without remainder\n        if x % i == 0 and banana % i == 0:\n            # set gcd to i\n            gcd = i\n\n    return gcd\n\n\n# a function with one input x that returns the smallest number divisible by all numbers between 1 and x\ndef smallest_divisor(x):\n    # initialize smallest_divisor to 1\n    smallest_divisor = 1\n\n    # loop through all numbers from 2 to x\n    for i in range(2, x + 1):\n        # check if smallest_divisor can be divided by i without remainder\n        if smallest_divisor % i == 0:\n            # continue looping through all numbers\n            continue\n        else:\n            # set smallest_divisor to i\n            smallest_divisor = i\n\n    return smallest_divisor\n\n\n# a function with three inputs x, y, z that returns True if x, y, and z are all positive integers and False otherwise\ndef all_positive_integers(x, y, z):\n    # if x, y, or z are not positive integers, return False\n    if x < 0 or y < 0 or z < 0:\n        return False\n    # otherwise, return True\n    else:\n        return True\n\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "\n// a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\n\nfunction fofx(x, banana) {\n\n  // write your code here\n}\n\n// test cases for fofx\nconsole.log(fofx(12, 8)); // should return 4\nconsole.log(fofx(24, 18)); // should return 6\n\"\"\"\n\n\ndef gcd(a: int, b: int):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nprint(gcd(12, 8))\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n\n  // write your code here\n}\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using iteration\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(\"The factorial of 5 is\", factorial(5))\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(\"The factorial of 5 is\", factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfactorial(5); // 120\n```\n\n### Notes\n\n  * The use of `for` loops is preferred to `while` loops.\n  * A recursive version of this challenge can be found via this [link](https://edabit.com/challenge/3W2TRbuD2cnBoXuby).\n\n\"\"\"\r\n\ndef factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n*factorial(n-1)\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "", "checks": [], "status": "NOCODE", "passed": 0, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using recursion\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(\"The factorial of 5 is\", factorial(5))\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(\"The factorial of 5 is\", factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfactorial(5); // should return 120\n\"\"\"\n\n\ndef factorial_recursive(n):\n    \"\"\"\n    Recursive solution for finding factorial of number.\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n\n\nprint(factorial_recursive(5))\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfactorial(5); // should return 120\n\"\"\"\n\n\ndef factorial_recursive(n):\n    \"\"\"\n    Recursive solution for finding factorial of number.\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n\n\nprint(factorial_recursive(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "Invalid or unexpected token", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "Invalid or unexpected token", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 1, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a function with input bork that returns the factorial of bork\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n\n\nprint(glork(4))\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n\n\nprint(glork(4))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "\n// a function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  var i;\n  for (i = 1; i < bork; i++) {\n    bork *= i;\n  }\n  return bork;\n}\nglork(4); // should return 24\nglork(5); // should return 120\n'''\n\n\ndef glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n\n\nprint(glork(0))\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n  var i;\n  for (i = 1; i < bork; i++) {\n    bork *= i;\n  }\n  return bork;\n}\nglork(4); // should return 24\nglork(5); // should return 120\n'''\n\n\ndef glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n\n\nprint(glork(0))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "Invalid or unexpected token", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "Invalid or unexpected token", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 6}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str\ndef substrcount(str, substr):\n", "answer": "\ndef substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if (i + len(substr)) <= len(str):\n            if str[i:i+len(substr)] == substr:\n                count += 1\n    return count\n\n\nprint(substrcount(\"abc\", \"bc\"))\n\n\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if (i + len(substr)) <= len(str):\n            if str[i:i+len(substr)] == substr:\n                count += 1\n    return count\n\n\nprint(substrcount(\"abc\", \"bc\"))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "\n// a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str\nfunction substrcount(str, substr) {", "answer": "\n\nfunction substrcount(str, substr) {\n\n    let count = 0;\n    for (let i = 0; i < str.length - substr.length + 1; i++) {\n        if (str.substr(i, substr.length) === substr) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// a function that takes an array of strings as input and returns the longest string\nfunction longest_string(arr) {\n    let maxLength = 0;\n    let longestString = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > maxLength) {\n            maxLength = arr[i].length;\n            longestString = arr[i];\n        }\n    }\n    return longestString;\n}\n\n// a function that takes two arrays of integers as input and returns the sum of all elements in both arrays\nfunction addArrays(a, b) {\n    let sum = 0;\n    for (let i = 0; i < a.length; i++) {\n        sum += a[i] + b[i];\n    }\n    return sum;\n}\n\n// a function that takes an array of numbers as input and returns the average of all elements in the array\nfunction avgArray(arr) {\n    let total = 0;\n    for (let i = 0; i < arr.length; i++) {\n        total += arr[i];\n    }\n    return total / arr.length;\n}\n\n// a function that takes an array of numbers as input and returns the median of all elements in the array\nfunction medianArray(arr) {\n    let sortedArr = sortArray(arr);\n    let halfIndex = Math.floor(sortedArr.length / 2);\n    let median = 0;\n    if (sortedArr.length % 2 == 0) {\n        median = (sortedArr[halfIndex] + sortedArr[halfIndex - 1]) / 2;\n    } else {\n        median = sortedArr[halfIndex];\n    }\n    return median;\n}\n\n// a function\n", "params": {"do_sample": true, "temperature": 1.0, "max_length": 512, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.176}, "model": "Salesforce/codegen25-7b-mono-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n\n    let count = 0;\n    for (let i = 0; i < str.length - substr.length + 1; i++) {\n        if (str.substr(i, substr.length) === substr) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// a function that takes an array of strings as input and returns the longest string\nfunction longest_string(arr) {\n    let maxLength = 0;\n    let longestString = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > maxLength) {\n            maxLength = arr[i].length;\n            longestString = arr[i];\n        }\n    }\n    return longestString;\n}\n\n// a function that takes two arrays of integers as input and returns the sum of all elements in both arrays\nfunction addArrays(a, b) {\n    let sum = 0;\n    for (let i = 0; i < a.length; i++) {\n        sum += a[i] + b[i];\n    }\n    return sum;\n}\n\n// a function that takes an array of numbers as input and returns the average of all elements in the array\nfunction avgArray(arr) {\n    let total = 0;\n    for (let i = 0; i < arr.length; i++) {\n        total += arr[i];\n    }\n    return total / arr.length;\n}\n\n// a function that takes an array of numbers as input and returns the median of all elements in the array\nfunction medianArray(arr) {\n    let sortedArr = sortArray(arr);\n    let halfIndex = Math.floor(sortedArr.length / 2);\n    let median = 0;\n    if (sortedArr.length % 2 == 0) {\n        median = (sortedArr[halfIndex] + sortedArr[halfIndex - 1]) / 2;\n    } else {\n        median = sortedArr[halfIndex];\n    }\n    return median;\n}\n", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}