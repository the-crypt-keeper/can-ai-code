{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\n\n### Response:", "answer": "\ndef meaning_of_life():\n    \n    return 42", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    \n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\n\n### Response:", "answer": "\nconst meaningOfLife = () => {\n  return 42;\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const meaningOfLife = () => {\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaningOfLife", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n\n### Response:", "answer": "\ndef things():\n    \n    return [5, 'foobar', 'Spain']", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def things():\n    \n    return [5, 'foobar', 'Spain']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Spain"], "status": 0}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n\n### Response:", "answer": "\nconst things = () => {\n  return [\n    5,\n    'foobar',\n    'Spain'\n  ];\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const things = () => {\n  return [\n    5,\n    'foobar',\n    'Spain'\n  ];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Spain"], "status": 0}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\n\n### Response:", "answer": "\ndef secretidentities():\n    \n    return {\n        'Superman': 'Aladdin',\n        'Batman': 'Bruce Wayne',\n        'Spider-Man': 'Sirius Black'\n    }", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def secretidentities():\n    \n    return {\n        'Superman': 'Aladdin',\n        'Batman': 'Bruce Wayne',\n        'Spider-Man': 'Sirius Black'\n    }", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Aladdin", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Sirius Black", "status": 0}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\n\n### Response:", "answer": "\nconst secretIdentities = () => {\n  return {\n    Superman: 'Aladdin',\n    Batman: 'Bruce',\n    SpiderMan: 'Spider'\n  }\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const secretIdentities = () => {\n  return {\n    Superman: 'Aladdin',\n    Batman: 'Bruce',\n    SpiderMan: 'Spider'\n  }\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretIdentities", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Aladdin", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b.\n\n### Response:", "answer": "\ndef gcd(a, b):\n    \n    while b:\n        a, b = b, a % b\n    return a", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    \n    while b:\n        a, b = b, a % b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b.\n\n### Response:", "answer": "\nconst gcd = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const gcd = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana.\n\n### Response:", "answer": "\ndef fofx(x, banana):\n    \n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(x, banana)", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n    \n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(x, banana)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana.\n\n### Response:", "answer": "\nconst fofx = (x, banana) => {\n  while (x != banana) {\n    if (x > banana) {\n      x = x % banana;\n    } else {\n      banana = banana % x;\n    }\n  }\n  return x;\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const fofx = (x, banana) => {\n  while (x != banana) {\n    if (x > banana) {\n      x = x % banana;\n    } else {\n      banana = banana % x;\n    }\n  }\n  return x;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 5, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function factorial(n) with input n that returns the factorial of n using iteration.\n\n### Response:", "answer": "\ndef factorial(n):\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def factorial(n):\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function factorial(n) with input n that returns the factorial of n using iteration.\n\n### Response:", "answer": "\nconst factorial = (n) => {\n  let p = 1;\n  let k = 1;\n  while (n >= 1) {\n    let t = p;\n    while (t > 0) {\n      t--;\n      k *= n;\n    }\n    p++;\n    n--;\n  }\n  return k\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const factorial = (n) => {\n  let p = 1;\n  let k = 1;\n  while (n >= 1) {\n    let t = p;\n    while (t > 0) {\n      t--;\n      k *= n;\n    }\n    p++;\n    n--;\n  }\n  return k\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 34560, "status": 0}], "status": "FAIL", "passed": 3, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function factorial(n) with input n that returns the factorial of n using recursion.\n\n### Response:", "answer": "\ndef factorial(n):\n    \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def factorial(n):\n    \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function factorial(n) with input n that returns the factorial of n using recursion.\n\n### Response:", "answer": "\nconst factorial = (n) => {\n  if (n == 1)\n    return 1;\n  return n * factorial(n - 1);\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const factorial = (n) => {\n  if (n == 1)\n    return 1;\n  return n * factorial(n - 1);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function glork(bork) with input bork that returns the factorial of bork.\n\n### Response:", "answer": "\ndef glork(bork):\n    \n    def fact(i):\n        if i == 0:\n            return 1\n        else:\n            return i * fact(i-1)\n    return fact(bork)", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def glork(bork):\n    \n    def fact(i):\n        if i == 0:\n            return 1\n        else:\n            return i * fact(i-1)\n    return fact(bork)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function glork(bork) with input bork that returns the factorial of bork.\n\n### Response:", "answer": "\nconst glork = (bork) => {\n  if (bork == 1)\n    return 1;\n  return bork * glork(bork - 1);\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const glork = (bork) => {\n  if (bork == 1)\n    return 1;\n  return bork * glork(bork - 1);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence.\n\n### Response:", "answer": "\ndef fib(n):\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def fib(n):\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence.\n\n### Response:", "answer": "\nconst fib = (n) => {\n  if (n == 0 || n == 1)\n    return n;\n  return fib(n - 1) + fib(n - 2);\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const fib = (n) => {\n  if (n == 0 || n == 1)\n    return n;\n  return fib(n - 1) + fib(n - 2);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence.\n\n### Response:", "answer": "\ndef fib(n):\n    \n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    return [0, 1] + fib(n - 2)", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def fib(n):\n    \n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    return [0, 1] + fib(n - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 0], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 0, 1, 0], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 5, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence.\n\n### Response:", "answer": "\nconst fib = (n) => {\n  if (n == 0)\n    return [0];\n  if (n == 1)\n    return [0, 1];\n  return [0, 1, ...fib(n - 2)];\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const fib = (n) => {\n  if (n == 0)\n    return [0];\n  if (n == 1)\n    return [0, 1];\n  return [0, 1, ...fib(n - 2)];\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1, 0], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 0, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 0, 1, 0, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence.\n\n### Response:", "answer": "\ndef glork(bork):\n    \n    if len(bork) == 0:\n        return []\n    elif len(bork) == 1:\n        return [bork[0]]\n    else:\n        return [bork[0]] + glork(bork[1:])", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def glork(bork):\n    \n    if len(bork) == 0:\n        return []\n    elif len(bork) == 1:\n        return [bork[0]]\n    else:\n        return [bork[0]] + glork(bork[1:])", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence.\n\n### Response:", "answer": "\nconst fibbonacci = (bork) => {\n  if (bork == 0) { return [0] }\n  if (bork == 1) { return [0, 1] }\n  let f = [0, 1]\n  while (f.length < bork) {\n    f.push(f[f.length - 2] + f[f.length - 1])\n  }\n  return f\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const fibbonacci = (bork) => {\n  if (bork == 0) { return [0] }\n  if (bork == 1) { return [0, 1] }\n  let f = [0, 1]\n  while (f.length < bork) {\n    f.push(f[f.length - 2] + f[f.length - 1])\n  }\n  return f\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "fibbonacci", "status": 0}], "status": "FAIL", "passed": 6, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a python function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str.\n\n### Response:", "answer": "\ndef substrcount(str, substr):\n    \n    return str.count(substr)", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    \n    return str.count(substr)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "Below is an instruction that describes a task, paired with an input that provides further context.\nWrite a response that appropriately completes the request.\n\n### Instruction:\nWrite a program to perform the given task.\n\n###Input:\nWrite a javascript function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str.\n\n### Response:", "answer": "\nconst substrcount = (str, substr) => {\n  return str.split(substr).reduce((prev, item) => {\n    return prev + (item == substr);\n  }, 0);\n}", "params": {"do_sample": true, "temperature": 1.0, "max_length": 256, "top_k": 1, "top_p": 1.0, "repetition_penalty": 1.0}, "model": "sahil2801/replit-code-instruct-glaive-fp16", "runtime": "transformers", "code": "const substrcount = (str, substr) => {\n  return str.split(substr).reduce((prev, item) => {\n    return prev + (item == substr);\n  }, 0);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 0, "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 0, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 0, "status": 0}], "status": "FAIL", "passed": 4, "total": 7}