{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "<fim_prefix>def meaning_of_life():\n    '''a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef meaning_of_life():\n    return(42)\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def meaning_of_life():\n    return(42)", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "\n<fim_prefix>// a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life() {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction meaning_of_life() {\n        return 42;\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function meaning_of_life() {\n        return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "<fim_prefix>def things():\n    '''a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef things():\n    return [5,'foobar','Madrid']\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def things():\n    return [5,'foobar','Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "\n<fim_prefix>// a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things() {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction things() {\n        return [\n        5,\n        \"foobar\",\n        \"Madrid\"\n    ];\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function things() {\n        return [\n        5,\n        \"foobar\",\n        \"Madrid\"\n    ];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "<fim_prefix>def secretidentities():\n    '''a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef secretidentities():\n    return {'Superman': 'Cl<NAME>',\n            'Batman' : '<NAME>','Spider-Man':'Peter Parker'}\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def secretidentities():\n    return {'Superman': 'Cl<NAME>',\n            'Batman' : '<NAME>','Spider-Man':'Peter Parker'}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Cl<NAME>", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "<NAME>", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "\n<fim_prefix>// a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\nfunction secretidentities() {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction secretidentities() {\n      return {\"Superman\": \"Cl<NAME>\",\n          \"<NAME>\":\"Bruce Wayne\",\n          \"Spider Man\" :\"<NAME>\"};\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function secretidentities() {\n      return {\"Superman\": \"Cl<NAME>\",\n          \"<NAME>\":\"Bruce Wayne\",\n          \"Spider Man\" :\"<NAME>\"};\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Cl<NAME>", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "<fim_prefix>def gcd(a, b):\n    '''a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef gcd(a, b):\n    if not isinstance(b, int):\n        raise TypeError('The second argument must be an integer')\n\n    if b == 0:\n        return abs(a)\n    \n    else: \n        return gcd(b, a % b)\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def gcd(a, b):\n    if not isinstance(b, int):\n        raise TypeError('The second argument must be an integer')\n\n    if b == 0:\n        return abs(a)\n    \n    else: \n        return gcd(b, a % b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "\n<fim_prefix>// a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b\nfunction gcd(a, b) {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction gcd(a, b) {\n      if (!b) return a;\n  else return gcd(b, a % b);\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function gcd(a, b) {\n      if (!b) return a;\n  else return gcd(b, a % b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "<fim_prefix>def fofx(x, banana):\n    '''a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef fofx(x, banana):\n    if not isinstance(banana,(int,float)):\n        raise TypeError('banana must be an integer or float')\n    \n    if banana == 0:\n        return abs(x)\n\n    while True:\n        # find remainder when divided by each number in range from smallest to largest\n        for i in range(1,abs(x)+1):\n            r = x % i\n\n            if r==0:\n                gcd = i\n\n        if gcd!= banana:\n            break\n        \n        else:\n            x += banana\n            \n    return gcd\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def fofx(x, banana):\n    if not isinstance(banana,(int,float)):\n        raise TypeError('banana must be an integer or float')\n    \n    if banana == 0:\n        return abs(x)\n\n    while True:\n        # find remainder when divided by each number in range from smallest to largest\n        for i in range(1,abs(x)+1):\n            r = x % i\n\n            if r==0:\n                gcd = i\n\n        if gcd!= banana:\n            break\n        \n        else:\n            x += banana\n            \n    return gcd", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 2, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": 100, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "\n<fim_prefix>// a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana\nfunction fofx(x, banana) {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction fofx(x, banana) {\n      return Math.abs(Math.floor(banana / x));\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function fofx(x, banana) {\n      return Math.abs(Math.floor(banana / x));\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 0, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 5, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "<fim_prefix>def factorial(n):\n    '''a function with input n that returns the factorial of n using iteration'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef factorial(n):\n    if (n == 0 or n==1):\n        return 1\n    else:\n        result = 1\n        for i in range(2,n+1):\n            result *=i\n        return result\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def factorial(n):\n    if (n == 0 or n==1):\n        return 1\n    else:\n        result = 1\n        for i in range(2,n+1):\n            result *=i\n        return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "\n<fim_prefix>// a function with input n that returns the factorial of n using iteration\nfunction factorial(n) {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction factorial(n) {\n      let result = 1;\n  for (let i=2;i<=n;++i){\n    result *= i;\n  }\n\n  return result\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function factorial(n) {\n      let result = 1;\n  for (let i=2;i<=n;++i){\n    result *= i;\n  }\n\n  return result\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "<fim_prefix>def factorial(n):\n    '''a function with input n that returns the factorial of n using recursion'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef factorial(n):\n    if (n == 1 or n==0) :\n        return 1\n    else: \n        return n * factorial(n-1)\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def factorial(n):\n    if (n == 1 or n==0) :\n        return 1\n    else: \n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "\n<fim_prefix>// a function with input n that returns the factorial of n using recursion\nfunction factorial(n) {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction factorial(n) {\n      if (n === 1 || n === 0){\n    return 1;\n  } else{\n    return n * factorial(n - 1);\n  }\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function factorial(n) {\n      if (n === 1 || n === 0){\n    return 1;\n  } else{\n    return n * factorial(n - 1);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "<fim_prefix>def glork(bork):\n    '''a function with input bork that returns the factorial of bork'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef glork(bork):\n    return 1 if (bork == 0) else bork * glork(bork - 1)\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def glork(bork):\n    return 1 if (bork == 0) else bork * glork(bork - 1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "\n<fim_prefix>// a function with input bork that returns the factorial of bork\nfunction glork(bork) {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction glork(bork) {\n      return (1 + Math.pow(2, -bork));\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function glork(bork) {\n      return (1 + Math.pow(2, -bork));\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1.5, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": 1.03125, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "<fim_prefix>def fib(n):\n    '''a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef fib(n):\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def fib(n):\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "\n<fim_prefix>// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction fib(n) {\n        if (n === 0 || n === 1){\n        return n;\n    } else{\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function fib(n) {\n        if (n === 0 || n === 1){\n        return n;\n    } else{\n        return fib(n - 1) + fib(n - 2);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "<fim_prefix>def fib(n):\n    '''a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef fib(n):\n    if (n==0 or n==1):\n        return [0] if n==0 else[1]\n    elif (n>1):\n        return fib(n-1)+fib(n-2)\n\n\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def fib(n):\n    if (n==0 or n==1):\n        return [0] if n==0 else[1]\n    elif (n>1):\n        return fib(n-1)+fib(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 0], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 0, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 0, 1, 1, 0, 1, 0, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "\n<fim_prefix>// a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction fib(n) {\n        if (n === 0 || n === 1){\n        return [0];\n    } else{\n        let arr = [];\n        for (let i=0;i<n;++i){\n            // console.log(\"arr\",arr);\n            const lastTwo = arr[arr.length - 2] ? arr[arr.length - 2]: 0 ;\n            const lastOne = arr[arr.length - 1]? arr[arr.length - 1]: 1;\n\n            arr.push(lastTwo+lastOne);\n\n        }\n        return arr;\n\n    }\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function fib(n) {\n        if (n === 0 || n === 1){\n        return [0];\n    } else{\n        let arr = [];\n        for (let i=0;i<n;++i){\n            // console.log(\"arr\",arr);\n            const lastTwo = arr[arr.length - 2] ? arr[arr.length - 2]: 0 ;\n            const lastOne = arr[arr.length - 1]? arr[arr.length - 1]: 1;\n\n            arr.push(lastTwo+lastOne);\n\n        }\n        return arr;\n\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "<fim_prefix>def glork(bork):\n    '''a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef glork(bork):\n    if len(bork)!= int:\n        raise TypeError('input must be an integer')\n    \n    if not isinstance(bork,int):\n        raise ValueError('input must be positive')\n\n    elif (bork < 0 or type(bork)!= int):\n        return 'error'\n        \n    else: \n        # create empty lists to store values in\n        f = []\n        g = [0]\n        \n        for i in range(len(g)):\n            f.append(i+1)\n            \n        while True:\n            \n            if len(f) >= bork:\n                break\n                \n            else:\n                \n                h = sum([f[j]+f[j+1] for j in range(len(f)-1)])\n                f.append(h)\n                \n        return f[:bork]\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def glork(bork):\n    if len(bork)!= int:\n        raise TypeError('input must be an integer')\n    \n    if not isinstance(bork,int):\n        raise ValueError('input must be positive')\n\n    elif (bork < 0 or type(bork)!= int):\n        return 'error'\n        \n    else: \n        # create empty lists to store values in\n        f = []\n        g = [0]\n        \n        for i in range(len(g)):\n            f.append(i+1)\n            \n        while True:\n            \n            if len(f) >= bork:\n                break\n                \n            else:\n                \n                h = sum([f[j]+f[j+1] for j in range(len(f)-1)])\n                f.append(h)\n                \n        return f[:bork]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "\n<fim_prefix>// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction glork(bork) {\n    \tvar result = [];\n\n\tfor (i=0; i<bork; ++i){\n\t\tresult.push(fibonacci(i));\n\t}\n\t\n\treturn result;\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function glork(bork) {\n    \tvar result = [];\n\n\tfor (i=0; i<bork; ++i){\n\t\tresult.push(fibonacci(i));\n\t}\n\t\n\treturn result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "fibonacci is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "fibonacci is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "fibonacci is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "fibonacci is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "<fim_prefix>def substrcount(str, substr):\n    '''a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str'''\n    <fim_suffix>\n\n# another function\n<fim_middle>", "answer": "\ndef substrcount(str, substr):\n    return len([i for i in range(len(str)) if str[i:].startswith(substr)])\n\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "def substrcount(str, substr):\n    return len([i for i in range(len(str)) if str[i:].startswith(substr)])", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "\n<fim_prefix>// a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str\nfunction substrcount(str, substr) {\n<fim_suffix>\n}\n\n// another function<fim_middle>", "answer": "\n\nfunction substrcount(str, substr) {\n      return (str.match(new RegExp(substr,\"g\")) || []).length;\n}\n", "params": {"temperature": 0.7, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repetition_penalty": 1.176}, "model": "bigcode/starcoderplus", "runtime": "api-inference", "code": "function substrcount(str, substr) {\n      return (str.match(new RegExp(substr,\"g\")) || []).length;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}