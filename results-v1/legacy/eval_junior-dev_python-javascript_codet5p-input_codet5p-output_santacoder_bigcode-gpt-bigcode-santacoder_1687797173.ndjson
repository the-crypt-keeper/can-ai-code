{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n\tif n <= 1:\n\t\treturn n\n\n\telse:\n\t\treturn fib(n - 1) + fib(n - 2)\n\n\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def fib(n):\n\tif n <= 1:\n\t\treturn n\n\n\telse:\n\t\treturn fib(n - 1) + fib(n - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "\n// a function with input element number n (0 based) that returns the n-th element of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n    if (n <= 1){\n        return n;\n    } else{\n        return fib(n - 1) + fib(n - 2);\n    };\n};\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function fib(n) {\n\n    if (n <= 1){\n        return n;\n    } else{\n        return fib(n - 1) + fib(n - 2);\n    };\n};", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n\tif (n <= 1):\n\t\treturn [n]\n\n\telse:\n\t\treturn [fib[i - 1] + fib[i - 2] for i in range(3)]\n\n\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def fib(n):\n\tif (n <= 1):\n\t\treturn [n]\n\n\telse:\n\t\treturn [fib[i - 1] + fib[i - 2] for i in range(3)]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "'function' object is not subscriptable", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "'function' object is not subscriptable", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "'function' object is not subscriptable", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "\n// a function with input length n that returns a list with the first n elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n  if (n === 0 || n === 1) return [n];\n\n  let result = [];\n  for (let i = 3; i <= n; ++i)\n    result.push(result[i - 1] + result[i - 2]);\n  return result;\n}\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function fib(n) {\n\n  if (n === 0 || n === 1) return [n];\n\n  let result = [];\n  for (let i = 3; i <= n; ++i)\n    result.push(result[i - 1] + result[i - 2]);\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [null], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [null, null, null], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n\tif (len(bork)==0 or len(bork)==1):\n\t\treturn [bork[0]]\n\n\telse:\n\t\treturn [glork(bork[:-1])[-1] + glork(bork[:-2])[-1], glork(bork[:-3])[-1]]\n\n\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def glork(bork):\n\tif (len(bork)==0 or len(bork)==1):\n\t\treturn [bork[0]]\n\n\telse:\n\t\treturn [glork(bork[:-1])[-1] + glork(bork[:-2])[-1], glork(bork[:-3])[-1]]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "\n// a function with input length bork that returns a list with the first bork elements of the fibbonaci sequence given The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n    if (bork.length === 0 || bork[0] > bork[bork.length - 1]) return [];\n\n    let result = [bork[0]]; // start with the first element in the array as the first element of the sequence\n    for (let i = 1; i < bork.length; ++i) {\n        const next = result[result.length - 1];\n\n        if (next >= bork[i])\n            continue;\n\n        result.push(next);\n    }\n\n    return result;\n}\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function glork(bork) {\n\n    if (bork.length === 0 || bork[0] > bork[bork.length - 1]) return [];\n\n    let result = [bork[0]]; // start with the first element in the array as the first element of the sequence\n    for (let i = 1; i < bork.length; ++i) {\n        const next = result[result.length - 1];\n\n        if (next >= bork[i])\n            continue;\n\n        result.push(next);\n    }\n\n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [null], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [null], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [null], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [null], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\ndef meaning_of_life():\n", "answer": "\ndef meaning_of_life():\n\treturn 42\n\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def meaning_of_life():\n\treturn 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "\n// a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life() {", "answer": "\n\nfunction meaning_of_life() {\n\n    return 42;\n}\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function meaning_of_life() {\n\n    return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\ndef things():\n", "answer": "\ndef things():\n\treturn [5,'foobar','Madrid']\n\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def things():\n\treturn [5,'foobar','Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "\n// a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things() {", "answer": "\n\nfunction things() {\n\n    return [5, \"foobar\", \"Madrid\"];\n}\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function things() {\n\n    return [5, \"foobar\", \"Madrid\"];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\ndef secretidentities():\n", "answer": "\ndef secretidentities():\n\treturn {\n\t\t\"Superman\": \"Clark Kent\", \n\t\t\"Batman\": \"Bruce Wayne\", \n\t\t\"Spider Man\": \"Peter Parker\"}\n\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def secretidentities():\n\treturn {\n\t\t\"Superman\": \"Clark Kent\", \n\t\t\"Batman\": \"Bruce Wayne\", \n\t\t\"Spider Man\": \"Peter Parker\"}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "\n// a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\nfunction secretidentities() {", "answer": "\n\nfunction secretidentities() {\n\n  return [\n    {\n      name: \"Superman\",\n      identity: \"Clark Kent\"\n    },\n    {\n      name: \"Batman\",\n      identity: \"Bruce Wayne\"\n    },\n    {\n      name: \"Spider Man\",\n      identity: \"Peter Parker\"\n    }\n  ];\n}\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function secretidentities() {\n\n  return [\n    {\n      name: \"Superman\",\n      identity: \"Clark Kent\"\n    },\n    {\n      name: \"Batman\",\n      identity: \"Bruce Wayne\"\n    },\n    {\n      name: \"Spider Man\",\n      identity: \"Peter Parker\"\n    }\n  ];\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "'list' object has no attribute 'get'", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "'list' object has no attribute 'get'", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "'list' object has no attribute 'get'", "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b\ndef gcd(a, b):\n", "answer": "\ndef gcd(a, b):\n\tif a == 0:\n\t\treturn b\n\n\telse:\n\t\treturn gcd(b % a, a)\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def gcd(a, b):\n\tif a == 0:\n\t\treturn b\n\n\telse:\n\t\treturn gcd(b % a, a)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "\n// a function with two inputs a and b that returns the greatest common demoninator (gcd) of a and b\nfunction gcd(a, b) {", "answer": "\n\nfunction gcd(a, b) {\n\n  if (!b ||!a) return 0;\n\n  while (true) {\n    let temp = Math.floor((a % b));\n\n    if (temp === 1) break;\n\n    a %= b;\n    b %= temp;\n  }\n\n  return b;\n}\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function gcd(a, b) {\n\n  if (!b ||!a) return 0;\n\n  while (true) {\n    let temp = Math.floor((a % b));\n\n    if (temp === 1) break;\n\n    a %= b;\n    b %= temp;\n  }\n\n  return b;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana\ndef fofx(x, banana):\n", "answer": "\ndef fofx(x, banana):\n\treturn gcd(x,banana)\n\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def fofx(x, banana):\n\treturn gcd(x,banana)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "\n// a function with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\n\nfunction fofx(x, banana) {\n\n  // your code here\n\n  return 0;\n}\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function fofx(x, banana) {\n\n  // your code here\n\n  return 0;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": 0, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using iteration\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n\tif (n == 0 or n == 1):\n\t\treturn 1\n\n\telse:\n\t\treturn n * factorial(n - 1)\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def factorial(n):\n\tif (n == 0 or n == 1):\n\t\treturn 1\n\n\telse:\n\t\treturn n * factorial(n - 1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  if (n === 0 || n == null) return 1;\n\n  let result = 1; // initialize result to one\n\n  for (let i = 2; i <= n; ++i)\n    result *= i; // multiply by each number in range [2, n] and store it in result\n\n  return result; // return result\n}\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function factorial(n) {\n\n  if (n === 0 || n == null) return 1;\n\n  let result = 1; // initialize result to one\n\n  for (let i = 2; i <= n; ++i)\n    result *= i; // multiply by each number in range [2, n] and store it in result\n\n  return result; // return result\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using recursion\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n\tif (n == 0 or n == 1):\n\t\treturn 1\n\n\telse:\n\t\treturn n * factorial(n - 1)\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def factorial(n):\n\tif (n == 0 or n == 1):\n\t\treturn 1\n\n\telse:\n\t\treturn n * factorial(n - 1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  if (n === 0 || n == null) return 1;\n\n  // base case: when n is zero or null, we can just return 1.\n  else return n * factorial(n - 1);\n}\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function factorial(n) {\n\n  if (n === 0 || n == null) return 1;\n\n  // base case: when n is zero or null, we can just return 1.\n  else return n * factorial(n - 1);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a function with input bork that returns the factorial of bork\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n\treturn 1 if (bork == 0) else bork * glork(bork - 1);\n\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def glork(bork):\n\treturn 1 if (bork == 0) else bork * glork(bork - 1);", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "\n// a function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  return (1 / 3 * Math.pow(2, bork)) + ((-1 / 64) * Math.pow(2, bork - 5));\n}\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function glork(bork) {\n\n  return (1 / 3 * Math.pow(2, bork)) + ((-1 / 64) * Math.pow(2, bork - 5));\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 0.6656901041666666, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": 10.651041666666666, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 6}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str\ndef substrcount(str, substr):\n", "answer": "\ndef substrcount(str, substr):\n\treturn len([i for i in range(len(str)) if str[i:i+len(substr)] == substr])\n\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "def substrcount(str, substr):\n\treturn len([i for i in range(len(str)) if str[i:i+len(substr)] == substr])", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "\n// a function with inputs str and substr that returns counts the number of times the sub-string substr occurs in str\nfunction substrcount(str, substr) {", "answer": "\n\nfunction substrcount(str, substr) {\n\n  var count = 0;\n\n  for (var i=0;i<str.length - substr.length +1 ;++i){\n    if (str[i] === substr[0]){\n      // console.log(\"found\");\n\n      for (j=1; j < substr.length && i+j <= str.length; ++j){\n        if (substr[j]!== str[i+j]) break;\n\n        if (j == substr.length - 1){\n          count++;\n          break;\n        }\n      }\n\n    } else {\n      continue;\n    }\n  }\n\n  return count;\n}\n\n\n", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512}, "model": "bigcode/gpt_bigcode-santacoder", "runtime": "transformers", "code": "function substrcount(str, substr) {\n\n  var count = 0;\n\n  for (var i=0;i<str.length - substr.length +1 ;++i){\n    if (str[i] === substr[0]){\n      // console.log(\"found\");\n\n      for (j=1; j < substr.length && i+j <= str.length; ++j){\n        if (substr[j]!== str[i+j]) break;\n\n        if (j == substr.length - 1){\n          count++;\n          break;\n        }\n      }\n\n    } else {\n      continue;\n    }\n  }\n\n  return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 0, "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}