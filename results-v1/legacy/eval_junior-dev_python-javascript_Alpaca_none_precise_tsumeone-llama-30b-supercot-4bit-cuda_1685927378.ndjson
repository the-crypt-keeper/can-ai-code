{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "### Instruction: Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```\ndef meaning_of_life():  # No input required\n    return 42", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def meaning_of_life():  # No input required\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "### Instruction: Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```\nfunction meaning_of_life(){\n    return 42;\n}\n```", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function meaning_of_life(){\n    return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "### Instruction: Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \ndef things():\n    return [5, \"foobar\", \"Madrid\"]", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def things():\n    return [5, \"foobar\", \"Madrid\"]", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "### Instruction: Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```js\nfunction things(){\n    return [5, \"foobar\", \"Madrid\"];\n}\n```", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function things(){\n    return [5, \"foobar\", \"Madrid\"];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "### Instruction: Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \ndef secretidentities():\n    \"\"\"Returns the real identities of Superman, Batman and Spider-Man\"\"\"\n    \n    # Create dictionary for storing the real identities\n    superheros = { \n        'Superman': 'Clark Kent',\n        'Batman': 'Bruce Wayne',\n        'Spider-Man': 'Peter Parker'\n    }\n    \n    return superheros", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def secretidentities():\n    \"\"\"Returns the real identities of Superman, Batman and Spider-Man\"\"\"\n    \n    # Create dictionary for storing the real identities\n    superheros = { \n        'Superman': 'Clark Kent',\n        'Batman': 'Bruce Wayne',\n        'Spider-Man': 'Peter Parker'\n    }\n    \n    return superheros", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "### Instruction: Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```\nfunction secretIdentities(){ \n    let superheros = {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    };\n    \n    return superheros;\n}", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function secretIdentities(){ \n    let superheros = {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    };\n    \n    return superheros;\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretIdentities", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "### Instruction: Write a python function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \ndef gcd(a,b): \n    if (b == 0): \n        return a \n  \n    # Swapping values if a > b \n    if (a > b): \n        temp = a \n        a = b \n        b = temp \n  \n    while (b != 0): \n       div = b \n       b = a % b \n       a = div \n  \n    return a", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def gcd(a,b): \n    if (b == 0): \n        return a \n  \n    # Swapping values if a > b \n    if (a > b): \n        temp = a \n        a = b \n        b = temp \n  \n    while (b != 0): \n       div = b \n       b = a % b \n       a = div \n  \n    return a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "### Instruction: Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```\nfunction gcd(a,b){ \n    if(!b || !a) return;   // Handle zero or negative values \n    while(b !== 0 && a % b === 0){ \n        a = b; \n        b = Math.abs(b); \n    } \n    return a; \n}", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function gcd(a,b){ \n    if(!b || !a) return;   // Handle zero or negative values \n    while(b !== 0 && a % b === 0){ \n        a = b; \n        b = Math.abs(b); \n    } \n    return a; \n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "### Instruction: Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \ndef gcd(x, banana): \n    if not banana: \n        return x \n    else: \n        return gcd(banana, x % banana)", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def gcd(x, banana): \n    if not banana: \n        return x \n    else: \n        return gcd(banana, x % banana)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 5, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "### Instruction: Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```\nfunction gcd(x, banana){ \n    if(!banana || !x) { return NaN; }   // handle zero or undefined values \n    while(banana % x != 0 && x % banana != 0) { \n        x = banana; \n        banana = x; \n    } \n    return Math.abs(x); \n}", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function gcd(x, banana){ \n    if(!banana || !x) { return NaN; }   // handle zero or undefined values \n    while(banana % x != 0 && x % banana != 0) { \n        x = banana; \n        banana = x; \n    } \n    return Math.abs(x); \n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 100, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "### Instruction: Write a python function factorial(n) with input n that returns the factorial of n using iteration. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \ndef factorial_iteration(n): \n    if (n == 0): \n        return 1\n    else: \n        result = 1\n        for i in range(1, n+1): \n            result *= i \n  \n        return result", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def factorial_iteration(n): \n    if (n == 0): \n        return 1\n    else: \n        result = 1\n        for i in range(1, n+1): \n            result *= i \n  \n        return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "### Instruction: Write a javascript function factorial(n) with input n that returns the factorial of n using iteration. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \nfunction factorial(n){ \n    if (n === 0 || isNaN(n)) {  \n        return false; \n    } else { \n        let result = 1; \n        for (let i=2;i<=n;++i) { \n            result *= i; \n        } \n        return result; \n    } \n}", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function factorial(n){ \n    if (n === 0 || isNaN(n)) {  \n        return false; \n    } else { \n        let result = 1; \n        for (let i=2;i<=n;++i) { \n            result *= i; \n        } \n        return result; \n    } \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "### Instruction: Write a python function factorial(n) with input n that returns the factorial of n using recursion. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \ndef factorial(n): \n    if (n == 0): \n        return 1\n    else: \n        return n * factorial(n-1)", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def factorial(n): \n    if (n == 0): \n        return 1\n    else: \n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "### Instruction: Write a javascript function factorial(n) with input n that returns the factorial of n using recursion. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \nfunction factorial(n){ \n    if (n === 0 || isNaN(n)) {  \n        return false; \n    } else { \n        let result = 1; \n        for (let i=2;i<=n;++i) { \n            result *= i; \n        } \n        return result; \n    } \n}", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function factorial(n){ \n    if (n === 0 || isNaN(n)) {  \n        return false; \n    } else { \n        let result = 1; \n        for (let i=2;i<=n;++i) { \n            result *= i; \n        } \n        return result; \n    } \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "### Instruction: Write a python function glork(bork) with input bork that returns the factorial of bork. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \ndef glork(bork):\n    if not isinstance(bork, int):\n        raise TypeError('Input should be an integer')\n    \n    result = 1\n    for i in range(0, bork + 1):\n        result *= i\n        \n    return result", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def glork(bork):\n    if not isinstance(bork, int):\n        raise TypeError('Input should be an integer')\n    \n    result = 1\n    for i in range(0, bork + 1):\n        result *= i\n        \n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": 0, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "### Instruction: Write a javascript function glork(bork) with input bork that returns the factorial of bork. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```\nfunction glork(bork){\n    if (bork === 0 || isNaN(bork)){\n        return 1;\n    } else {\n        let result = 1;\n        for (let i=2;i<=bork;++i){\n            result *= i;\n        }\n        return result;\n    }\n}", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function glork(bork){\n    if (bork === 0 || isNaN(bork)){\n        return 1;\n    } else {\n        let result = 1;\n        for (let i=2;i<=bork;++i){\n            result *= i;\n        }\n        return result;\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "### Instruction: Write a python function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \ndef fib(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (fib(n - 1) + fib(n - 2))", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def fib(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (fib(n - 1) + fib(n - 2))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "### Instruction: Write a javascript function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \nfunction fib(n){ \n    if (n <= 1) { \n        return n; \n    } else { \n        var result = [1, 1]; \n  \n        for (var i=2; i < n+1; ++i) { \n            result[i] = result[i - 1] + result[i - 2]; \n        } \n  \n        return result[n]; \n    } \n}", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function fib(n){ \n    if (n <= 1) { \n        return n; \n    } else { \n        var result = [1, 1]; \n  \n        for (var i=2; i < n+1; ++i) { \n            result[i] = result[i - 1] + result[i - 2]; \n        } \n  \n        return result[n]; \n    } \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 2, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 8, "status": 0}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "### Instruction: Write a python function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \ndef fib(n): \n    if (n == 0): \n        return [1] \n    elif (n==1): \n        return [1,1] \n    else: \n        result = [] \n        for i in range(2,n+1): \n            result += [i] \n        return result", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def fib(n): \n    if (n == 0): \n        return [1] \n    elif (n==1): \n        return [1,1] \n    else: \n        result = [] \n        for i in range(2,n+1): \n            result += [i] \n        return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [2], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [2, 3], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [2, 3, 4, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "### Instruction: Write a javascript function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \nfunction fib(n){ \n    let arr = [0,1]; \n  \n    for (let i=2;i<n+1;++i){ \n        arr[i] = arr[i-1]+arr[i-2]; \n    } \n  \n    return arr; \n}", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function fib(n){ \n    let arr = [0,1]; \n  \n    for (let i=2;i<n+1;++i){ \n        arr[i] = arr[i-1]+arr[i-2]; \n    } \n  \n    return arr; \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "### Instruction: Write a python function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \ndef glork(bork): \n    if not isinstance(bork, int): \n        raise TypeError('Input should be an integer') \n  \n    # Initialize the Fibonacci series \n    fib = [0,1] \n    \n    # Add new element to the series \n    for i in range(len(fib)): \n        fib.append(fib[i]+fib[i+1]) \n          \n    return fib[:bork]", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def glork(bork): \n    if not isinstance(bork, int): \n        raise TypeError('Input should be an integer') \n  \n    # Initialize the Fibonacci series \n    fib = [0,1] \n    \n    # Add new element to the series \n    for i in range(len(fib)): \n        fib.append(fib[i]+fib[i+1]) \n          \n    return fib[:bork]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 7, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "### Instruction: Write a javascript function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```\nfunction glork(bork){\n    let result = [];\n    for (let i=0;i<bork;++i){\n        if (i==0 || i==1){\n            result.push(i);\n        } else {\n            result.push((i-1)+(i+1));\n        }\n    }\n    return result;\n}", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function glork(bork){\n    let result = [];\n    for (let i=0;i<bork;++i){\n        if (i==0 || i==1){\n            result.push(i);\n        } else {\n            result.push((i-1)+(i+1));\n        }\n    }\n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 4], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 4, 6, 8], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 6, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "### Instruction: Write a python function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \ndef substr_count(str, substr): \n    count = 0\n    for i in range (len(str)): \n        if str[i:i+len(substr)] == substr : \n            count +=1\n    \n    return count", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "def substr_count(str, substr): \n    count = 0\n    for i in range (len(str)): \n        if str[i:i+len(substr)] == substr : \n            count +=1\n    \n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substr_count", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "### Instruction: Write a javascript function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \nfunction substrCount(str, substr){ \n    let count = 0; \n    for (let i=0; i<str.length; i++) { \n        if (str.substr(i, substr.length) === substr) { \n            count++; \n        } \n    } \n   return count; \n}", "params": {"temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512}, "model": "4bit", "code": "function substrCount(str, substr){ \n    let count = 0; \n    for (let i=0; i<str.length; i++) { \n        if (str.substr(i, substr.length) === substr) { \n            count++; \n        } \n    } \n   return count; \n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrCount", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}