{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "### Instruction: Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " 42", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmpjen6gic4'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": [], "status": 0}], "status": "FAIL", "passed": 1, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "### Instruction: Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " 42", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmporp16twf'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": {"error": "Unexpected token ')'", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 1, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "### Instruction: Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain. All code must start with ``` and also end with ```.\n\n### Response:", "answer": "\n```python\ndef things():\n    return [5, \"foobar\", \"Madrid\"]\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmp0hountbf'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "def things():\n    return [5, \"foobar\", \"Madrid\"]", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "### Instruction: Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain. All code must start with ``` and also end with ```.\n\n### Response:", "answer": "\n```javascript\nfunction things(){\n    return [5, \"foobar\", \"Madrid\"];\n}\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmpxm79zqa1'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "function things(){\n    return [5, \"foobar\", \"Madrid\"];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "### Instruction: Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```python\nsecret_identities = {\n    'Superman': 'Clark Kent',\n    'Batman': 'Bruce Wayne',\n    'Spider-Man': 'Peter Parker'\n}\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmpvv9b5km7'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "secret_identities = {\n    'Superman': 'Clark Kent',\n    'Batman': 'Bruce Wayne',\n    'Spider-Man': 'Peter Parker'\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "'list' object has no attribute 'get'", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "'list' object has no attribute 'get'", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "'list' object has no attribute 'get'", "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "### Instruction: Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names. All code must start with ``` and also end with ```.\n\n### Response:", "answer": "\n```javascript\nsecretIdentities = {\n  \"Superman\": \"Clark Kent\",\n  \"Batman\": \"Bruce Wayne\",\n  \"Spider-Man\": \"Peter Parker\"\n}\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmpfyjrz8rz'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "secretIdentities = {\n  \"Superman\": \"Clark Kent\",\n  \"Batman\": \"Bruce Wayne\",\n  \"Spider-Man\": \"Peter Parker\"\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "### Instruction: Write a python function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```python\ndef gcd(a,b):\n    if a == 0 or b == 0:\n        return 0\n    else:\n        while True:\n            q = int(a/b)\n            r = a - q*b\n            if r == 0:\n                break\n            else:\n                a = b\n                b = r\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmp4lzln9zo'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "def gcd(a,b):\n    if a == 0 or b == 0:\n        return 0\n    else:\n        while True:\n            q = int(a/b)\n            r = a - q*b\n            if r == 0:\n                break\n            else:\n                a = b\n                b = r", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": null, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": null, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "### Instruction: Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```javascript\nfunction gcd(a,b){\n    if(a==0 || b == 0){\n        return 0;\n    }else{\n        var temp = Math.abs(a);\n        while(temp > 1){\n            a = temp % b;\n            temp = b;\n            b = a;\n        }\n        return b;\n    }\n}\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmp1v2pis8b'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "function gcd(a,b){\n    if(a==0 || b == 0){\n        return 0;\n    }else{\n        var temp = Math.abs(a);\n        while(temp > 1){\n            a = temp % b;\n            temp = b;\n            b = a;\n        }\n        return b;\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": null, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "### Instruction: Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```python\ndef gcd(x, y):\n    if x == 0 or y == 0:\n        return 1\n    \n    while True:\n        \n        temp = x % y\n        if temp == 0:\n            break\n        \n        x = y\n        y = temp\n        \n    return y\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmpj35vdhvn'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "def gcd(x, y):\n    if x == 0 or y == 0:\n        return 1\n    \n    while True:\n        \n        temp = x % y\n        if temp == 0:\n            break\n        \n        x = y\n        y = temp\n        \n    return y", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "y", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "### Instruction: Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```javascript\nfunction gcd(x, y){\n    if(y === 0){\n        return x;\n    } else {\n        return gcd(y, x % y);\n    }\n}\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmp66l180kz'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "function gcd(x, y){\n    if(y === 0){\n        return x;\n    } else {\n        return gcd(y, x % y);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "y", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "### Instruction: Write a python function factorial(n) with input n that returns the factorial of n using iteration. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```python\ndef factorial(n):\n    if (n == 0 or n < 1):\n        return 1\n    \n    else:\n        result = 1\n        \n        for i in range(2, n+1):\n            result *= i\n            \n        return result\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmpjave1fvt'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "def factorial(n):\n    if (n == 0 or n < 1):\n        return 1\n    \n    else:\n        result = 1\n        \n        for i in range(2, n+1):\n            result *= i\n            \n        return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "### Instruction: Write a javascript function factorial(n) with input n that returns the factorial of n using iteration. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```javascript\nfunction factorial(n){\n    var result = 1;\n     for (var i=1;i<=n;i++){\n         result *= i;\n      }\n   return result;\n}\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmp3fkrx6d1'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "function factorial(n){\n    var result = 1;\n     for (var i=1;i<=n;i++){\n         result *= i;\n      }\n   return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "### Instruction: Write a python function factorial(n) with input n that returns the factorial of n using recursion. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```python\ndef factorial(n):\n    if (n == 0 or n == 1):\n        return 1\n    else:\n        return n * factorial(n - 1)\nprint(factorial(5))\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmp04sg_fxg'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "def factorial(n):\n    if (n == 0 or n == 1):\n        return 1\n    else:\n        return n * factorial(n - 1)\nprint(factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "### Instruction: Write a javascript function factorial(n) with input n that returns the factorial of n using recursion. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```javascript\nfunction factorial(n){\n    if (n === 0 || n < 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\nconsole.log(factorial(5)); // 120\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmp3t1fu46d'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "function factorial(n){\n    if (n === 0 || n < 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\nconsole.log(factorial(5)); // 120", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "### Instruction: Write a python function glork(bork) with input bork that returns the factorial of bork. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```python\ndef glork(bork):\n    return (1 if bork == 0 else bork * glork(bork - 1))\nprint(glork(5)) # should print out 120\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmp1fazfe6a'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "def glork(bork):\n    return (1 if bork == 0 else bork * glork(bork - 1))\nprint(glork(5)) # should print out 120", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "### Instruction: Write a javascript function glork(bork) with input bork that returns the factorial of bork. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```javascript\nfunction glork(bork){\n    return (1*2)*3*(4*5)*6*(7*8)*9;\n}\nconsole.log(glork(\"bork\")); // 362880\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmp5e67aecu'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "function glork(bork){\n    return (1*2)*3*(4*5)*6*(7*8)*9;\n}\nconsole.log(glork(\"bork\")); // 362880", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 362880, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": 362880, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "### Instruction: Write a python function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```python\ndef fib(n):\n    if n == 1 or n == 2:\n        return n\n    \n    else:\n        \n        return fib(n - 1) + fib(n - 2)\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmpczl8_24d'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "def fib(n):\n    if n == 1 or n == 2:\n        return n\n    \n    else:\n        \n        return fib(n - 1) + fib(n - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "maximum recursion depth exceeded in comparison", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 2, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 8, "status": 0}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "### Instruction: Write a javascript function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```javascript\nfunction fib(n){\n    if(n==1 || n==2){\n        return n;\n    }else{\n        return fib(n-1)+fib(n-2);\n    }\n}\nconsole.log(fib(5)); // 8\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmpc9lugef0'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "function fib(n){\n    if(n==1 || n==2){\n        return n;\n    }else{\n        return fib(n-1)+fib(n-2);\n    }\n}\nconsole.log(fib(5)); // 8", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 2, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 8, "status": 0}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "### Instruction: Write a python function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```python\ndef fib(n):\n    if (n == 0 or n == 1):\n        return [0, 1]\n    \n    else:\n        temp = []\n        \n        for i in range(2, n+1):\n            temp.append(fib(i-1)+fib(i-2))\n            \n        return temp\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmplj149gps'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "def fib(n):\n    if (n == 0 or n == 1):\n        return [0, 1]\n    \n    else:\n        temp = []\n        \n        for i in range(2, n+1):\n            temp.append(fib(i-1)+fib(i-2))\n            \n        return temp", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [[0, 1, 0, 1]], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [[0, 1, 0, 1], [[0, 1, 0, 1], 0, 1]], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [[0, 1, 0, 1], [[0, 1, 0, 1], 0, 1], [[0, 1, 0, 1], [[0, 1, 0, 1], 0, 1], [0, 1, 0, 1]], [[0, 1, 0, 1], [[0, 1, 0, 1], 0, 1], [[0, 1, 0, 1], [[0, 1, 0, 1], 0, 1], [0, 1, 0, 1]], [0, 1, 0, 1], [[0, 1, 0, 1], 0, 1]]], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "### Instruction: Write a javascript function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```javascript\nfunction fib(n){\n    var result = [];\n    \n    if (n <= 1) {\n        return [0,1];\n    } else {\n        for (var i=2;i<=n;i++){\n            result[i] = result[i-1]+result[i-2];\n        }\n        return result;\n    }\n}\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmpfneu1l3f'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "function fib(n){\n    var result = [];\n    \n    if (n <= 1) {\n        return [0,1];\n    } else {\n        for (var i=2;i<=n;i++){\n            result[i] = result[i-1]+result[i-2];\n        }\n        return result;\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [null, null, null], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [null, null, null, null], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [null, null, null, null, null, null], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "### Instruction: Write a python function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```python\ndef glork(bork):\n    if (bork < 0 or bork > 40):\n        return \"Error\"\n    \n    else:\n        \n        fib = [1, 1]\n        for i in range(2, bork+1):\n            fib.append(fib[i-1]+fib[i-2])\n            \n        return fib[:bork]\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmp9f117sb8'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "def glork(bork):\n    if (bork < 0 or bork > 40):\n        return \"Error\"\n    \n    else:\n        \n        fib = [1, 1]\n        for i in range(2, bork+1):\n            fib.append(fib[i-1]+fib[i-2])\n            \n        return fib[:bork]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "### Instruction: Write a javascript function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```javascript\nfunction glork(bork){\n    var fib = [1,1];\n     for (var i=2;i<=bork;i++){\n        fib[i] = fib[i-1]+fib[i-2];\n    }\n    return fib;\n}\nconsole.log(glork(5)); //returns [1,1,2,3,5]\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmpd1pz1tki'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "function glork(bork){\n    var fib = [1,1];\n     for (var i=2;i<=bork;i++){\n        fib[i] = fib[i-1]+fib[i-2];\n    }\n    return fib;\n}\nconsole.log(glork(5)); //returns [1,1,2,3,5]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 1, 2], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 1, 2, 3], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 1, 2, 3, 5, 8], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "### Instruction: Write a python function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```python\ndef substrCount(str,substr):\n    count = 0\n    for i in range (len(str)):\n        if str[i] == substr[0]:\n            count +=1\n            j=0\n            while j < len(substr)-1:\n                if str[i+j] != substr[j+1]:\n                    break\n                else:\n                    j+=1\n            if j==len(substr)-1:\n                count +=1\n    return count\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmp0p8pc8t7'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "def substrCount(str,substr):\n    count = 0\n    for i in range (len(str)):\n        if str[i] == substr[0]:\n            count +=1\n            j=0\n            while j < len(substr)-1:\n                if str[i+j] != substr[j+1]:\n                    break\n                else:\n                    j+=1\n            if j==len(substr)-1:\n                count +=1\n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrCount", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 6, "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "### Instruction: Write a javascript function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str. All code must start with ``` and also end with ```.\n\n### Response:", "answer": " \n```javascript\nfunction substrCount(str,substr){\n    var count =0;\n    for (var i=0;i<str.length;i++){\n        if(str[i]==substr[0]){\n            count++;\n        }else{\n            break;\n        }\n    }\n    return count;\n}\n```", "params": {"cmdline": "ssh miner '~/ai/latest/main --ctx_size 2048 --batch_size 1024 --threads 4 --model ~/ai/models/v3/llama-2-13b.ggmlv3.q5_0.bin --n_predict 512 --temp 0.7 --top_k 40 --top_p 0.1 --repeat_last_n 256 --repeat_penalty 1.176 --file /tmp/tmpihj1l36g'"}, "model": "llama-2-13b.ggmlv3.q5_0", "runtime": "llamacpp", "code": "function substrCount(str,substr){\n    var count =0;\n    for (var i=0;i<str.length;i++){\n        if(str[i]==substr[0]){\n            count++;\n        }else{\n            break;\n        }\n    }\n    return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrCount", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 0, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 1, "status": 0}], "status": "FAIL", "passed": 4, "total": 7}