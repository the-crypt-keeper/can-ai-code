{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\nAssistant:", "answer": "\n```\ndef meaning_of_life():\n    return 42\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpavdvvzgx'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\nAssistant:", "answer": "\n```\nfunction meaning_of_life() {\n  return 42;\n}\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmp01nwt0i9'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function meaning_of_life() {\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\nAssistant:", "answer": "\n```\n\ndef things():\n    return [5, 'foobar', 'Madrid']\n\nprint(things())\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpyfbhnktl'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "def things():\n    return [5, 'foobar', 'Madrid']\n\nprint(things())", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\nAssistant:", "answer": "\n```\nfunction things() {\n  return [5, 'foobar', 'Madrid'];\n}\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpl25m5k59'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function things() {\n  return [5, 'foobar', 'Madrid'];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\nAssistant:", "answer": "\n\ndef secretidentities():\n    superheroes = {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker'}\n    return superheroes\n\nprint(secretidentities())\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpkx8axhke'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "User", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\nAssistant:", "answer": "\n\nfunction secretidentities() {\n  let superheroes = {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    Spider-Man: \"Peter Parker\"\n  };\n  return superheroes;\n}\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmp26ptr8kj'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function secretidentities() {\n  let superheroes = {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    Spider-Man: \"Peter Parker\"\n  };\n  return superheroes;\n}\nUser", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b.\nAssistant:", "answer": "\n```\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a%b)\n```", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmp2f9qlbpp'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a%b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b.\nAssistant:", "answer": "\n```\nfunction gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  let g = a % b;\n  return g;\n}\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmppv3ibo7v'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  let g = a % b;\n  return g;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": 0, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana.\nAssistant:", "answer": "\n```\ndef fofx(x, banana):\n    gcd = x\n    return gcd\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpskr_jo97'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "def fofx(x, banana):\n    gcd = x\n    return gcd", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 100, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 5, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana.\nAssistant:", "answer": "\n```\nfunction fofx(x, banana) {\n  let gcd = x;\n  let gcdBanana = banana;\n  let result = 0;\n  while (gcd != 0) {\n    result += gcdBanana;\n    gcdBanana = gcdBanana * gcd;\n    gcd = gcdBanana;\n  }\n  return result;\n}\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmp7s7pi5r5'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function fofx(x, banana) {\n  let gcd = x;\n  let gcdBanana = banana;\n  let result = 0;\n  while (gcd != 0) {\n    result += gcdBanana;\n    gcdBanana = gcdBanana * gcd;\n    gcd = gcdBanana;\n  }\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function factorial(n) with input n that returns the factorial of n using iteration.\nAssistant:", "answer": "\n```\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmp4nub2a9o'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function factorial(n) with input n that returns the factorial of n using iteration.\nAssistant:", "answer": "\n```\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmp5xc1x49w'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function factorial(n) with input n that returns the factorial of n using recursion.\nAssistant:", "answer": "\n```\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpunexd31s'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function factorial(n) with input n that returns the factorial of n using recursion.\nAssistant:", "answer": "\n```\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpe3fng5x1'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function glork(bork) with input bork that returns the factorial of bork.\nAssistant:", "answer": "\n```\ndef glork(bork):\n    factorial = 1\n    for i in range(1, bork+1):\n        factorial = factorial*i\n    return factorial\n```", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpo7d2trys'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "def glork(bork):\n    factorial = 1\n    for i in range(1, bork+1):\n        factorial = factorial*i\n    return factorial", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function glork(bork) with input bork that returns the factorial of bork.\nAssistant:", "answer": "\n```\nfunction glork(bork) {\n  let factorial = 1;\n  for (let i = 1; i <= bork; i++) {\n    factorial = factorial * i;\n  }\n  return factorial;\n}\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpqivp6y2q'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function glork(bork) {\n  let factorial = 1;\n  for (let i = 1; i <= bork; i++) {\n    factorial = factorial * i;\n  }\n  return factorial;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence.\nAssistant:", "answer": "\n```\ndef fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n\nprint(fibonacci(n))\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpmrz1mg5d'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "def fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n\nprint(fibonacci(n))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "name 'n' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "name 'n' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "name 'n' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "name 'n' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "name 'n' is not defined", "exc_type": "NameError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence.\nAssistant:", "answer": "\n```\nfunction fib(n) {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmp7evzysbe'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function fib(n) {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence.\nAssistant:", "answer": "\n```\ndef fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==1:\n        return [1]\n    else:\n        return [fibonacci(n-1)+fibonacci(n-2)]\n```", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmph2qh8xx8'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "def fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==1:\n        return [1]\n    else:\n        return [fibonacci(n-1)+fibonacci(n-2)]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "unsupported operand type(s) for +: 'NoneType' and 'NoneType'", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "unsupported operand type(s) for +: 'NoneType' and 'NoneType'", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "unsupported operand type(s) for +: 'NoneType' and 'NoneType'", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence.\nAssistant:", "answer": "\n```\nfunction fib(n) {\n  let result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(i);\n  }\n  return result;\n}\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmph8zvahm5'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function fib(n) {\n  let result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(i);\n  }\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 2, 3, 4], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence.\nAssistant:", "answer": "\n```\ndef glork(bork):\n    fibonacci = [0, 1]\n    n = len(fibonacci)\n    return fibonacci[n-bork:n]\n```", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmp3fbdltvs'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "def glork(bork):\n    fibonacci = [0, 1]\n    n = len(fibonacci)\n    return fibonacci[n-bork:n]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 5, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence.\nAssistant:", "answer": "\n```\nfunction glork(bork) {\n  let fibonacci = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fibonacci.push(fibonacci[i - 1] + fibonacci[i - 2]);\n  }\n  return fibonacci;\n}\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpfstkpii5'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function glork(bork) {\n  let fibonacci = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fibonacci.push(fibonacci[i - 1] + fibonacci[i - 2]);\n  }\n  return fibonacci;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 7, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str.\nAssistant:", "answer": "\n```\ndef substrcount(str, substr):\n    count = 0\n    for i in range(str.length):\n        if str[i] == substr:\n            count += 1\n    return count\n```", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmph4vzbcla'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "def substrcount(str, substr):\n    count = 0\n    for i in range(str.length):\n        if str[i] == substr:\n            count += 1\n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": {"error": "'str' object has no attribute 'length'", "exc_type": "AttributeError"}, "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": {"error": "'str' object has no attribute 'length'", "exc_type": "AttributeError"}, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": {"error": "'str' object has no attribute 'length'", "exc_type": "AttributeError"}, "status": 0}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "User: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str.\nAssistant:", "answer": "\n```\nfunction substrcount(str, substr) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === substr) {\n      count++;\n    }\n  }\n  return count;\n}\n```\nUser ", "params": {"cmdline": "ssh miner '~/ai/ggllm.cpp/build/bin/falcon_main --no-penalize-nl --threads 4 --model ~/ai/models/v3/falcon-7b-instruct.ggccv1.q5_0.bin --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpartpqwym'"}, "model": "falcon-7b-instruct.ggccv1.q5_0", "runtime": "llamacpp", "code": "function substrcount(str, substr) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === substr) {\n      count++;\n    }\n  }\n  return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 0, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 0, "status": 0}], "status": "FAIL", "passed": 5, "total": 7}