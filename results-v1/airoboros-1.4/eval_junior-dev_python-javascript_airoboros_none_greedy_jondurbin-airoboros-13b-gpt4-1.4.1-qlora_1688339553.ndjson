{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything. ASSISTANT:", "answer": "def meaning_of_life():\n    return 42", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything. ASSISTANT:", "answer": "function meaning_of_life() {\n    return 42;\n}", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function meaning_of_life() {\n    return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain. ASSISTANT:", "answer": "def things():\n    return [5, 'foobar', 'Madrid']", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def things():\n    return [5, 'foobar', 'Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain. ASSISTANT:", "answer": "Here's a JavaScript function that returns a list with three values: the number 5, the string 'foobar', and the capital city of Spain (Madrid).\n\n```javascript\nfunction things() {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// Example usage:\nconst result = things();\nconsole.log(result); // Output: [5, 'foobar', 'Madrid']\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function things() {\n  return [5, 'foobar', 'Madrid'];\n}\n\n// Example usage:\nconst result = things();\nconsole.log(result); // Output: [5, 'foobar', 'Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names. ASSISTANT:", "answer": "def secretidentities():\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    }", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def secretidentities():\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    }", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names. ASSISTANT:", "answer": "function secretIdentities() {\n    const superheroes = {\n      Superman: \"Clark Kent\",\n      Batman: \"Bruce Wayne\",\n      SpiderMan: \"Peter Parker\"\n    };\n\n    return superheroes;\n  }", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function secretIdentities() {\n    const superheroes = {\n      Superman: \"Clark Kent\",\n      Batman: \"Bruce Wayne\",\n      SpiderMan: \"Peter Parker\"\n    };\n\n    return superheroes;\n  }", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretIdentities", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b. ASSISTANT:", "answer": "def gcd(a, b):\n    if b == 0:\n        return a % b + b\n    else:\n        return gcd(b, a % b)", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def gcd(a, b):\n    if b == 0:\n        return a % b + b\n    else:\n        return gcd(b, a % b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b. ASSISTANT:", "answer": "function gcd(a, b) {\n    if (b === 0) return a;\n    return gcd(b, a % b);\n}", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function gcd(a, b) {\n    if (b === 0) return a;\n    return gcd(b, a % b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana. ASSISTANT:", "answer": "def fofx(x, banana):\n    if x == 0:\n        return banana\n    elif banana == 0:\n        return x\n    else:\n        return gcd(x, banana)\n\n# Test cases\nprint(fofx(12, 4)) # Output: 4\nprint(fofx(12, 6)) # Output: 2\nprint(fofx(12, 9)) # Output: 3", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def fofx(x, banana):\n    if x == 0:\n        return banana\n    elif banana == 0:\n        return x\n    else:\n        return gcd(x, banana)\n\n# Test cases\nprint(fofx(12, 4)) # Output: 4\nprint(fofx(12, 6)) # Output: 2\nprint(fofx(12, 9)) # Output: 3", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana. ASSISTANT:", "answer": "function fofx(x, banana) {\n    if (banana === 0) return x;\n    else if (x === 0) return banana;\n    else {\n        const gcd = fofx(banana % x, x);\n        return Math.floor(gcd / x) * x;\n    }\n}", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function fofx(x, banana) {\n    if (banana === 0) return x;\n    else if (x === 0) return banana;\n    else {\n        const gcd = fofx(banana % x, x);\n        return Math.floor(gcd / x) * x;\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 0, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 5, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function factorial(n) with input n that returns the factorial of n using iteration. ASSISTANT:", "answer": "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\n# Test the function\nprint(factorial(5))", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\n# Test the function\nprint(factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function factorial(n) with input n that returns the factorial of n using iteration. ASSISTANT:", "answer": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function factorial(n) with input n that returns the factorial of n using recursion. ASSISTANT:", "answer": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nprint(factorial(5)) # Output: 120", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nprint(factorial(5)) # Output: 120", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function factorial(n) with input n that returns the factorial of n using recursion. ASSISTANT:", "answer": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\n// Example usage:\nconsole.log(factorial(5)); // Output: 120", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\n// Example usage:\nconsole.log(factorial(5)); // Output: 120", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function glork(bork) with input bork that returns the factorial of bork. ASSISTANT:", "answer": "def glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork-1)\n\n# Test the function\nprint(glork(5))", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork-1)\n\n# Test the function\nprint(glork(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function glork(bork) with input bork that returns the factorial of bork. ASSISTANT:", "answer": "function glork(bork) {\n    if (bork === 0 || bork === 1) {\n        return 1;\n    } else {\n        return bork * glork(bork - 1);\n    }\n}", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function glork(bork) {\n    if (bork === 0 || bork === 1) {\n        return 1;\n    } else {\n        return bork * glork(bork - 1);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence. ASSISTANT:", "answer": "def fib(n):\n    if n <= 0:\n        return \"Invalid input. Please provide a positive integer.\"\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_seq = [fib(i) for i in range(3)]\n        fib_seq.append(fib(fib_seq[-1][1]) + fib(fib_seq[-1][0]))\n        return fib_seq[n-2]\n\n# Test cases\nprint(fib(0)) # Output: 'Invalid input. Please provide a positive integer.'\nprint(fib(1)) # Output: [0]\nprint(fib(2)) # Output: [0, 1]\nprint(fib(3)) # Output: [0, 1, 1, 2]\nprint(fib(4)) # Output: [0, 1, 1, 2, 3, 5]\nprint(fib(5)) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21]", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def fib(n):\n    if n <= 0:\n        return \"Invalid input. Please provide a positive integer.\"\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_seq = [fib(i) for i in range(3)]\n        fib_seq.append(fib(fib_seq[-1][1]) + fib(fib_seq[-1][0]))\n        return fib_seq[n-2]\n\n# Test cases\nprint(fib(0)) # Output: 'Invalid input. Please provide a positive integer.'\nprint(fib(1)) # Output: [0]\nprint(fib(2)) # Output: [0, 1]\nprint(fib(3)) # Output: [0, 1, 1, 2]\nprint(fib(4)) # Output: [0, 1, 1, 2, 3, 5]\nprint(fib(5)) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "can only concatenate list (not \"str\") to list", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "can only concatenate list (not \"str\") to list", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "can only concatenate list (not \"str\") to list", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "can only concatenate list (not \"str\") to list", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "can only concatenate list (not \"str\") to list", "exc_type": "TypeError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence. ASSISTANT:", "answer": "Here's a JavaScript function fib(n) that returns the n-th element of the Fibonacci sequence:\n\n```javascript\nfunction fib(n) {\n  if (n <= 0) return 0;\n  if (n <= 1) return 1;\n  const fibSequence = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34];\n  return fibSequence[n - 1];\n}\n\n// Example usage:\nconst result = fib(5); // Output: 8\n```\n\nThis function uses an array called `fibSequence` to store the first few elements of the Fibonacci sequence. It then checks if the input number is less than or equal to 0 or 1 and returns 0 or 1 accordingly. If the input number is greater than 1, it calculates the index of the desired element in the `fibSequence` array and returns the value at that index.", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function fib(n) {\n  if (n <= 0) return 0;\n  if (n <= 1) return 1;\n  const fibSequence = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34];\n  return fibSequence[n - 1];\n}\n\n// Example usage:\nconst result = fib(5); // Output: 8", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 1, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 3, "status": 0}], "status": "FAIL", "passed": 5, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence. ASSISTANT:", "answer": "def fib(n):\n    if n <= 1:\n        return [0, 1]\n    elif n <= 2:\n        return [0, 1, 1]\n    else:\n        a, b = fib(n-1)\n        c = a + b\n        return a, b, c\n\n# Test the function\nprint(fib(10))", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def fib(n):\n    if n <= 1:\n        return [0, 1]\n    elif n <= 2:\n        return [0, 1, 1]\n    else:\n        a, b = fib(n-1)\n        c = a + b\n        return a, b, c\n\n# Test the function\nprint(fib(10))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "too many values to unpack (expected 2)", "exc_type": "ValueError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "too many values to unpack (expected 2)", "exc_type": "ValueError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "too many values to unpack (expected 2)", "exc_type": "ValueError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "too many values to unpack (expected 2)", "exc_type": "ValueError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence. ASSISTANT:", "answer": "Here's a JavaScript function `fib` that takes an input length `n` and returns the first `n` elements of the Fibonacci sequence:\n\n```javascript\nfunction fib(n) {\n  const fibSequence = [0, 1];\n  let currentFibIndex = 0;\n\n  while (currentFibIndex < n) {\n    fibSequence[currentFibIndex] = fibSequence[currentFibIndex - 1] + fibSequence[currentFibIndex - 2];\n    currentFibIndex++;\n  }\n\n  return fibSequence.slice(0, n);\n}\n\n// Example usage:\nconsole.log(fib(5)); // Output: [0, 1, 1, 2, 3]\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function fib(n) {\n  const fibSequence = [0, 1];\n  let currentFibIndex = 0;\n\n  while (currentFibIndex < n) {\n    fibSequence[currentFibIndex] = fibSequence[currentFibIndex - 1] + fibSequence[currentFibIndex - 2];\n    currentFibIndex++;\n  }\n\n  return fibSequence.slice(0, n);\n}\n\n// Example usage:\nconsole.log(fib(5)); // Output: [0, 1, 1, 2, 3]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [null], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [null, null], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [null, null, null], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [null, null, null, null, null], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence. ASSISTANT:", "answer": "def glork(bork):\n    if len(bork) > 10:\n        return [1, 1]\n    elif len(bork) == 0:\n        return [1]\n    else:\n        fib = [0, 1]\n        for i in range(2, len(bork)):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib[:bork]", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def glork(bork):\n    if len(bork) > 10:\n        return [1, 1]\n    elif len(bork) == 0:\n        return [1]\n    else:\n        fib = [0, 1]\n        for i in range(2, len(bork)):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib[:bork]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "object of type 'int' has no len()", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence. ASSISTANT:", "answer": "Here's a JavaScript function `glork` that takes an input length `bork` and returns a list with the first `bork` elements of the Fibonacci sequence:\n\n```javascript\nfunction glork(bork) {\n  const fibSequence = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9197485, 14336352, 23048578, 37021125, 60801760, 98403520, 159612193, 258516219, 418835769, 677137488, 1094632337, 1771113741, 2865730684, 4636844234, 7502566912, 12139399020, 19641865781, 31781133213, 51422938720, 83204057172, 134626931369, 2178309625", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function glork(bork) {\n  const fibSequence = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9197485, 14336352, 23048578, 37021125, 60801760, 98403520, 159612193, 258516219, 418835769, 677137488, 1094632337, 1771113741, 2865730684, 4636844234, 7502566912, 12139399020, 19641865781, 31781133213, 51422938720, 83204057172, 134626931369, 2178309625", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "Unexpected token 'var'", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "Unexpected token 'var'", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "Unexpected token 'var'", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "Unexpected token 'var'", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str. ASSISTANT:", "answer": "def substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "def substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str. ASSISTANT:", "answer": "function substrcount(str, substr) {\n    let count = 0;\n    let index = str.indexOf(substr);\n\n    while (index >= 0) {\n        count++;\n        index = str.indexOf(substr, index + 1);\n    }\n\n    return count;\n}", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=1.0, top_p=1.0, top_k=1, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "jondurbin/airoboros-13b-gpt4-1.4.1-qlora", "runtime": "vllm", "code": "function substrcount(str, substr) {\n    let count = 0;\n    let index = str.indexOf(substr);\n\n    while (index >= 0) {\n        count++;\n        index = str.indexOf(substr, index + 1);\n    }\n\n    return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}