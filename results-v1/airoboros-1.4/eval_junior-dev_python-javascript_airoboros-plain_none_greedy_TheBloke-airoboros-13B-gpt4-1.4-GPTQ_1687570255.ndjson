{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.  PLAINFORMAT ASSISTANT:", "answer": "def meaning_of_life():\n    return 42", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.  PLAINFORMAT ASSISTANT:", "answer": "function meaningOfLife() {\n    return 42;", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "function meaningOfLife() {\n    return 42;", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaningOfLife", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": {"error": "Unexpected end of input", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 1, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.  PLAINFORMAT ASSISTANT:", "answer": "def things():\n    return [5, \"foobar\", \"Madrid\"]", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def things():\n    return [5, \"foobar\", \"Madrid\"]", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": [5, "foobar", "Madrid"], "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.  PLAINFORMAT ASSISTANT:", "answer": "(function () {\n    // Returning a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n    return [5, 'foobar', 'Madrid'];\n})();", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "(function () {\n    // Returning a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n    return [5, 'foobar', 'Madrid'];\n})();", "checks": [{"assert": "f.name", "eq": "things", "got": "", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": {"error": "Unexpected token ')'", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 1, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.  PLAINFORMAT ASSISTANT:", "answer": "{\n    \"Superman\": \"Clark Kent\",\n    \"Batman\": \"Bruce Wayne\",\n    \"Spider-Man\": \"Peter Parker\"\n}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "{\n    \"Superman\": \"Clark Kent\",\n    \"Batman\": \"Bruce Wayne\",\n    \"Spider-Man\": \"Peter Parker\"\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "'list' object has no attribute 'get'", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "'list' object has no attribute 'get'", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "'list' object has no attribute 'get'", "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.  PLAINFORMAT ASSISTANT:", "answer": "function secretIdentities() {\n  return {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    Spider_Man: \"Peter Parker\"\n  };\n}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "function secretIdentities() {\n  return {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    Spider_Man: \"Peter Parker\"\n  };\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretIdentities", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b.  PLAINFORMAT ASSISTANT:", "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": null, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": null, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b.  PLAINFORMAT ASSISTANT:", "answer": "function gcd(a, b) {\n    if (!b) return a;\n    else return gcd(b, a % b);\n}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "function gcd(a, b) {\n    if (!b) return a;\n    else return gcd(b, a % b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana.  PLAINFORMAT ASSISTANT:", "answer": "def gcf_python(x, y):\n    if not y:\n        return x // abs(y)\n    else:\n        return gcf_python(y, x % y)", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def gcf_python(x, y):\n    if not y:\n        return x // abs(y)\n    else:\n        return gcf_python(y, x % y)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "y", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcf_python", "status": 0}], "status": "FAIL", "passed": 2, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana.  PLAINFORMAT ASSISTANT:", "answer": "function gcf(x, y) {\n    if (!y) return x;\n    while (0 === x % y) {\n        x = Math.floor(x / y);\n    }return x;\n}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "function gcf(x, y) {\n    if (!y) return x;\n    while (0 === x % y) {\n        x = Math.floor(x / y);\n    }return x;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.call(100,10)", "eq": 10, "got": 1, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "y", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcf", "status": 0}], "status": "FAIL", "passed": 2, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function factorial(n) with input n that returns the factorial of n using iteration.  PLAINFORMAT ASSISTANT:", "answer": "def factorial_iterative(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def factorial_iterative(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function factorial(n) with input n that returns the factorial of n using iteration.  PLAINFORMAT ASSISTANT:", "answer": "// Function to calculate the factorial of a number using iteration\nfunction factorial(n) {\n    if (typeof n !== 'number' || isNaN(n)) {\n        throw new Error('Argument must be a non-zero integer');\n    }\n    \n    let result = 1;\n    for (let i = 2; i <= n; ++i) {\n        result *= i;\n    }\n    return result;\n}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "// Function to calculate the factorial of a number using iteration\nfunction factorial(n) {\n    if (typeof n !== 'number' || isNaN(n)) {\n        throw new Error('Argument must be a non-zero integer');\n    }\n    \n    let result = 1;\n    for (let i = 2; i <= n; ++i) {\n        result *= i;\n    }\n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function factorial(n) with input n that returns the factorial of n using recursion.  PLAINFORMAT ASSISTANT:", "answer": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function factorial(n) with input n that returns the factorial of n using recursion.  PLAINFORMAT ASSISTANT:", "answer": "// Recursive implementation of factorial function\nfunction factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "// Recursive implementation of factorial function\nfunction factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function glork(bork) with input bork that returns the factorial of bork.  PLAINFORMAT ASSISTANT:", "answer": "def glork(bork):\n    return bork * (bork - 1) // 2 if bork > 0 else 1", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def glork(bork):\n    return bork * (bork - 1) // 2 if bork > 0 else 1", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": 10, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function glork(bork) with input bork that returns the factorial of bork.  PLAINFORMAT ASSISTANT:", "answer": "function glork(bork) {\n    return bork * (parseInt(bork,10)-1)!==0?glork(bork)*bork:(parseInt(bork,10))!==1?undefined:'';", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "function glork(bork) {\n    return bork * (parseInt(bork,10)-1)!==0?glork(bork)*bork:(parseInt(bork,10))!==1?undefined:'';", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "Unexpected end of input", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "Unexpected end of input", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "// Fibonacci series in JavaScript\nfunction fib(n) {\n    let result = [0, 1];\n    \n    for (let i = 2; i < n + 1; ++i) {\n        result[i] = result[i - 1] + result[i - 2];\n    }\n  \n    return result[n];\n}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "// Fibonacci series in JavaScript\nfunction fib(n) {\n    let result = [0, 1];\n    \n    for (let i = 2; i < n + 1; ++i) {\n        result[i] = result[i - 1] + result[i - 2];\n    }\n  \n    return result[n];\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "def fibonacci(n):\n    sequence = [0,1]\n    for i in range(2,n+1):\n        sequence.append((sequence[i-1]+sequence[i-2])%10)\n    return sequence[:n]", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def fibonacci(n):\n    sequence = [0,1]\n    for i in range(2,n+1):\n        sequence.append((sequence[i-1]+sequence[i-2])%10)\n    return sequence[:n]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "function* fib(n) {\n    let fibSeq = [0, 1];\n    \n    for (let i = 2; i <= n; ++i) {\n        yield fibSeq[i] = fibSeq[i - 1] + fibSeq[i - 2];\n    }\n}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "function* fib(n) {\n    let fibSeq = [0, 1];\n    \n    for (let i = 2; i <= n; ++i) {\n        yield fibSeq[i] = fibSeq[i - 1] + fibSeq[i - 2];\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {}, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "def glork(bork):\n    return [fibonacci(i) for i in range(bork)]", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def glork(bork):\n    return [fibonacci(i) for i in range(bork)]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "(() => {\n    'use strict';\n\n    // glork :: Int -> [Int]\n    const glork = bork => {\n        // Fibonacci numbers up to bork terms\n        return take(bork)(fibonnaci());\n    };\n\n\n    // ----------------------- TEST ------------------------\n    // main :: IO ()\n    const main = () =>\n        console.log([...glork(10)]);\n\n\n    // ---------------- GENERIC FUNCTIONS ---------------\n\n    // fibonnaci :: Gen [Int]\n    const fibonnaci =\n        // An infinite list of Fibonacci numbers\n        // (the first n are 0, 1, 2, ..., n-1).\n        // This is achieved by using fold/buildMergeList\n        // in conjunction with the Yield operator (<*).\n        // See \"More on Generators\" section at\n        // https://www.schoolofhaskell.com/user/papers/\n        // for more information about generators.\n        fmapGen(n => n <= 1 ? [n] : [n, n + 1])\n\n\n    // take :: Int -> [a] -> [a]\n    // The first 'take' elements from a list,\n    // wrapped in another container if necessary.\n    const take = n => xs =>\n        0 < n && 'GeneratorFunction' !== xs.constructor.name ? (\n            Array.from({ length: n }, () => xs.next())\n        )[0] : [].concat(...Array.from({\n            length: n\n        }, () => {\n            const x = xs.next();\n\n            return x.done ? [] : [x.value];\n        }));\n\n\n    // MAIN ---\n    return main();\n})();", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "(() => {\n    'use strict';\n\n    // glork :: Int -> [Int]\n    const glork = bork => {\n        // Fibonacci numbers up to bork terms\n        return take(bork)(fibonnaci());\n    };\n\n\n    // ----------------------- TEST ------------------------\n    // main :: IO ()\n    const main = () =>\n        console.log([...glork(10)]);\n\n\n    // ---------------- GENERIC FUNCTIONS ---------------\n\n    // fibonnaci :: Gen [Int]\n    const fibonnaci =\n        // An infinite list of Fibonacci numbers\n        // (the first n are 0, 1, 2, ..., n-1).\n        // This is achieved by using fold/buildMergeList\n        // in conjunction with the Yield operator (<*).\n        // See \"More on Generators\" section at\n        // https://www.schoolofhaskell.com/user/papers/\n        // for more information about generators.\n        fmapGen(n => n <= 1 ? [n] : [n, n + 1])\n\n\n    // take :: Int -> [a] -> [a]\n    // The first 'take' elements from a list,\n    // wrapped in another container if necessary.\n    const take = n => xs =>\n        0 < n && 'GeneratorFunction' !== xs.constructor.name ? (\n            Array.from({ length: n }, () => xs.next())\n        )[0] : [].concat(...Array.from({\n            length: n\n        }, () => {\n            const x = xs.next();\n\n            return x.done ? [] : [x.value];\n        }));\n\n\n    // MAIN ---\n    return main();\n})();", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 0, "status": 0}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "fmapGen is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "fmapGen is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "fmapGen is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "fmapGen is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "list index out of range", "status": 0}, {"assert": "f.name", "eq": "glork", "got": "", "status": 0}], "status": "FAIL", "passed": 0, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str.  PLAINFORMAT ASSISTANT:", "answer": "def substrcount(str, substr):\n    count = 0\n    for char in str:\n        if char == substr[0]:\n            count += 1\n            # Continue checking characters until we reach the end of substring\n            for i in range(1, len(substr)):\n                if char != substr[i]:\n                    break\n                else:\n                    count += 1\n    return count", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def substrcount(str, substr):\n    count = 0\n    for char in str:\n        if char == substr[0]:\n            count += 1\n            # Continue checking characters until we reach the end of substring\n            for i in range(1, len(substr)):\n                if char != substr[i]:\n                    break\n                else:\n                    count += 1\n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str.  PLAINFORMAT ASSISTANT:", "answer": "function substrcount(str, substr) {\n    let count = 0;\n    if (typeof str !== 'undefined') {\n        const lenStr = str.length;\n        if (lenStr > 0 && typeof substr !== 'undefined') {\n            for (let i = 0; i < lenStr - 1; i++) {\n                if (str[i] === substr[0]) {\n                    count++;\n                    for (let j = 1; j < substr.length; j++) {\n                        if (str[i + j] === substr[j]) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-13B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "function substrcount(str, substr) {\n    let count = 0;\n    if (typeof str !== 'undefined') {\n        const lenStr = str.length;\n        if (lenStr > 0 && typeof substr !== 'undefined') {\n            for (let i = 0; i < lenStr - 1; i++) {\n                if (str[i] === substr[0]) {\n                    count++;\n                    for (let j = 1; j < substr.length; j++) {\n                        if (str[i + j] === substr[j]) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 2, "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 5, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 9, "status": 0}], "status": "FAIL", "passed": 4, "total": 7}