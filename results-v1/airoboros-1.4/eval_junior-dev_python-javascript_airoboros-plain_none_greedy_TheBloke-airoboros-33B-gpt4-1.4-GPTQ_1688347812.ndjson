{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.  PLAINFORMAT ASSISTANT:", "answer": "def meaning_of_life():\n    return 42", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.  PLAINFORMAT ASSISTANT:", "answer": "var meaning_of_life = () => {\n    return 42;\n};", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "var meaning_of_life = () => {\n    return 42;\n};", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.  PLAINFORMAT ASSISTANT:", "answer": "from pywhois import lookuptable\nfrom datetime import date\nimport requests\n\ndef things():\n    return [5, \"foobar\", \"Madrid\"]", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "from pywhois import lookuptable\nfrom datetime import date\nimport requests\n\ndef things():\n    return [5, \"foobar\", \"Madrid\"]", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": {"error": "No module named 'pywhois'", "exc_type": "ModuleNotFoundError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.  PLAINFORMAT ASSISTANT:", "answer": "var things = () => [5, \"foobar\", \"Madrid\"];", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "var things = () => [5, \"foobar\", \"Madrid\"];", "checks": [{"assert": "f.name", "eq": "things", "got": "", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": [5, "foobar", "Madrid"], "got": {"error": "Unexpected token ')'", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 1, "total": 3}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.  PLAINFORMAT ASSISTANT:", "answer": "from pprint import pprint\npprint(secretidentities())", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "from pprint import pprint\npprint(secretidentities())", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.  PLAINFORMAT ASSISTANT:", "answer": "var secretIdentities = {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    SpiderMan: \"Peter Parker\"\n};", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "var secretIdentities = {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    SpiderMan: \"Peter Parker\"\n};", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq": "Clark Kent", "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b.  PLAINFORMAT ASSISTANT:", "answer": "def gcd(a,b):\n    if not b: return abs(a)\n    else:     return gcd(b, a%b)", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def gcd(a,b):\n    if not b: return abs(a)\n    else:     return gcd(b, a%b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b.  PLAINFORMAT ASSISTANT:", "answer": "function gcd(a,b){\n    if(!isFinite(a)) return isFinite(b)?1:0;\n    if(!isFinite(b)) return isFinite(a)?1:0;\n    if(a<0 && b<0) return Math.abs(Math.min(-a,-b));\n    else if(a>0 && b>0) return Math.max(a,b);\n    else if(a==0) return b;\n    else if(b==0) return a;\n    else return Math.max(a,b);\n}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "function gcd(a,b){\n    if(!isFinite(a)) return isFinite(b)?1:0;\n    if(!isFinite(b)) return isFinite(a)?1:0;\n    if(a<0 && b<0) return Math.abs(Math.min(-a,-b));\n    else if(a>0 && b>0) return Math.max(a,b);\n    else if(a==0) return b;\n    else if(b==0) return a;\n    else return Math.max(a,b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 100, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana.  PLAINFORMAT ASSISTANT:", "answer": "def gcd(x, y):\n    if y == 0: return abs(x)\n    else:     return gcd(y, x%y)", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def gcd(x, y):\n    if y == 0: return abs(x)\n    else:     return gcd(y, x%y)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "y", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana.  PLAINFORMAT ASSISTANT:", "answer": "var gcd = function(x, y){\n    if(!y) return x;\n    while((x%y)>0) {\n        x=y;\n        y=Math.floor(y/x);\n    }\n    return y;\n}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "var gcd = function(x, y){\n    if(!y) return x;\n    while((x%y)>0) {\n        x=y;\n        y=Math.floor(y/x);\n    }\n    return y;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 0, "status": 0}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,10)", "eq": 10, "got": 10, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "list index out of range", "status": 0}, {"assert": "f.args[1].name", "eq": "banana", "got": "list index out of range", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "", "status": 0}], "status": "FAIL", "passed": 2, "total": 6}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function factorial(n) with input n that returns the factorial of n using iteration.  PLAINFORMAT ASSISTANT:", "answer": "def factorial_iterative(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def factorial_iterative(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": null, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": null, "status": 0}], "status": "FAIL", "passed": 1, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function factorial(n) with input n that returns the factorial of n using iteration.  PLAINFORMAT ASSISTANT:", "answer": "var factorial = (function () {\n    // Recursive implementation of factorial using tail-recursion\n    return function (n) {\n        if (!Number.isInteger(n)) throw new RangeError(\"Input must be an integer\");\n        \n        if (n === 0 || n == null) return 1;\n        else return n * factorial(n - 1);\n    };\n})();", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "var factorial = (function () {\n    // Recursive implementation of factorial using tail-recursion\n    return function (n) {\n        if (!Number.isInteger(n)) throw new RangeError(\"Input must be an integer\");\n        \n        if (n === 0 || n == null) return 1;\n        else return n * factorial(n - 1);\n    };\n})();", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 0, "status": 0}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 5, "status": 0}], "status": "FAIL", "passed": 2, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function factorial(n) with input n that returns the factorial of n using recursion.  PLAINFORMAT ASSISTANT:", "answer": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function factorial(n) with input n that returns the factorial of n using recursion.  PLAINFORMAT ASSISTANT:", "answer": "var factorial = (function () {\n    'use strict';\n    \n    return function factorial(n) {\n        if (!Number.isInteger(n)) throw new TypeError('Expected integer');\n        \n        if (n === 0 || n === 1) return 1;\n        else return n * factorial(n - 1);\n    };\n})();", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "var factorial = (function () {\n    'use strict';\n    \n    return function factorial(n) {\n        if (!Number.isInteger(n)) throw new TypeError('Expected integer');\n        \n        if (n === 0 || n === 1) return 1;\n        else return n * factorial(n - 1);\n    };\n})();", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 0, "status": 0}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 5, "status": 0}], "status": "FAIL", "passed": 2, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function glork(bork) with input bork that returns the factorial of bork.  PLAINFORMAT ASSISTANT:", "answer": "def glork(bork):\n    return functools.reduce(lambda x, y: x*y, range(1, 1 + bork))", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def glork(bork):\n    return functools.reduce(lambda x, y: x*y, range(1, 1 + bork))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "name 'functools' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "name 'functools' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function glork(bork) with input bork that returns the factorial of bork.  PLAINFORMAT ASSISTANT:", "answer": "var fact = (function () {\n    'use strict';\n    \n    // Recursive implementation of factorial using tail-recursion\n    return function (n) {\n        if (!Number.isInteger(n)) throw new TypeError('Expected integer');\n        \n        if (n === 0 || n < 0) return 1;\n        else return n * fact(n - 1);\n    };\n})();", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "var fact = (function () {\n    'use strict';\n    \n    // Recursive implementation of factorial using tail-recursion\n    return function (n) {\n        if (!Number.isInteger(n)) throw new TypeError('Expected integer');\n        \n        if (n === 0 || n < 0) return 1;\n        else return n * fact(n - 1);\n    };\n})();", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 0, "status": 0}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 5, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "list index out of range", "status": 0}, {"assert": "f.name", "eq": "glork", "got": "", "status": 0}], "status": "FAIL", "passed": 2, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "def fib(n):\n    return fibonacci_sequence[n]", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def fib(n):\n    return fibonacci_sequence[n]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "name 'fibonacci_sequence' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "name 'fibonacci_sequence' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "name 'fibonacci_sequence' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "name 'fibonacci_sequence' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "name 'fibonacci_sequence' is not defined", "exc_type": "NameError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "var fib = [1, 2];\nfunction fib(n){return fib[n] || (fib[n] = fib[n - 1] + fib[n - 2]);}", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "var fib = [1, 2];\nfunction fib(n){return fib[n] || (fib[n] = fib[n - 1] + fib[n - 2]);}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "fib is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "fib is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "fib is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "fib is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "fib is not a function", "exc_type": "TypeError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "def fib(n):\n    return [0] + list(range(1, n+2))", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def fib(n):\n    return [0] + list(range(1, n+2))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1, 2], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1, 2, 3], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 2, 3, 4], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 2, 3, 4, 5, 6], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "var fib = (function () {\n    var memo = [0,1];\n    return function (n) {\n        if (!isFinite(n)) throw new Error(\"Input must be finite\");\n        if (n < 2) return [];\n        else if (n === Infinity) return [].concat(...Array.from({length:Infinity},()=>memo));\n        else return Array.from({length:n-1},() => memo[n-1] + memo[n-2]);\n    };\n})();", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "var fib = (function () {\n    var memo = [0,1];\n    return function (n) {\n        if (!isFinite(n)) throw new Error(\"Input must be finite\");\n        if (n < 2) return [];\n        else if (n === Infinity) return [].concat(...Array.from({length:Infinity},()=>memo));\n        else return Array.from({length:n-1},() => memo[n-1] + memo[n-2]);\n    };\n})();", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 0, "status": 0}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": 1, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": 2, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": 3, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": 5, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "list index out of range", "status": 0}], "status": "FAIL", "passed": 0, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "def fibonacci_sequence(length):\n    return [0] + (a for i in range(1+length) for a in (a+b for a, b in zip(fibonacci_sequence(i-1), fibonacci_sequence(i-2)))) if i <= length)", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def fibonacci_sequence(length):\n    return [0] + (a for i in range(1+length) for a in (a+b for a, b in zip(fibonacci_sequence(i-1), fibonacci_sequence(i-2)))) if i <= length)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "unmatched ')' (<string>, line 2)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "unmatched ')' (<string>, line 2)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "unmatched ')' (<string>, line 2)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "unmatched ')' (<string>, line 2)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "length", "status": 0}, {"assert": "f.name", "eq": "glork", "got": "fibonacci_sequence", "status": 0}], "status": "FAIL", "passed": 1, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence.  PLAINFORMAT ASSISTANT:", "answer": "var fib = (function () {\n    'use strict';\n    \n    // Fibonacci sequence generator - up to index n\n    return function (n) {\n        if (!Number.isInteger(n)) throw new TypeError('Expected integer');\n        \n        const result = [];\n        let i;\n        for (i = 0; i < n; ++i) {\n            result[i] = [1, 2][i % 2];\n        }\n        return result;\n    };\n})();\n\nvar glork = function (bork) {\n    'use strict';\n    \n    if (!Array.isArray(bork)) throw new TypeError('Expected array');\n    \n    return bork.slice(0, bork.length);\n};", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "var fib = (function () {\n    'use strict';\n    \n    // Fibonacci sequence generator - up to index n\n    return function (n) {\n        if (!Number.isInteger(n)) throw new TypeError('Expected integer');\n        \n        const result = [];\n        let i;\n        for (i = 0; i < n; ++i) {\n            result[i] = [1, 2][i % 2];\n        }\n        return result;\n    };\n})();\n\nvar glork = function (bork) {\n    'use strict';\n    \n    if (!Array.isArray(bork)) throw new TypeError('Expected array');\n    \n    return bork.slice(0, bork.length);\n};", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 0, "status": 0}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": 1, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": 2, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": 3, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": 5, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "list index out of range", "status": 0}, {"assert": "f.name", "eq": "glork", "got": "", "status": 0}], "status": "FAIL", "passed": 0, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a python function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str.  PLAINFORMAT ASSISTANT:", "answer": "def substrCount(str, substr):\n    return len([x for x in range(len(str)) if str[x:x+len(substr)] == substr])", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "def substrCount(str, substr):\n    return len([x for x in range(len(str)) if str[x:x+len(substr)] == substr])", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrCount", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "A chat between a curious user and an assistant. The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. USER: Write a javascript function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str.  PLAINFORMAT ASSISTANT:", "answer": "var substrCount = (function () {\n    'use strict';\n    \n    //substrCount :: String -> String -> Int\n    return function substrCount(str, substr) {\n        if (!str || !substr) {\n            throw new Error('Both arguments must be provided');\n        }\n        \n        let count = 0;\n        for (let i = 0; i < str.length - substr.length + 1; ++i) {\n            const startIndex = i;\n            while ((startIndex + substr.length) <= str.length && str[startIndex] === substr[0]) {\n                if (str.slice(startIndex, startIndex + substr.length) === substr) {\n                    ++count;\n                    startIndex += substr.length;\n                } else {\n                    break;\n                }\n            }\n        }\n        \n        return count;\n    };\n})();", "params": {"temperature": 1.0, "repetition_penalty": 1.176, "repeat_last_n": 256, "repetition_decay": 128, "top_k": 1, "top_p": 1.0, "max_new_tokens": 512, "beams": 1, "beam_length": 1, "stop_seq": "###"}, "model": "TheBloke/airoboros-33B-gpt4-1.4-GPTQ", "runtime": "exllama", "code": "var substrCount = (function () {\n    'use strict';\n    \n    //substrCount :: String -> String -> Int\n    return function substrCount(str, substr) {\n        if (!str || !substr) {\n            throw new Error('Both arguments must be provided');\n        }\n        \n        let count = 0;\n        for (let i = 0; i < str.length - substr.length + 1; ++i) {\n            const startIndex = i;\n            while ((startIndex + substr.length) <= str.length && str[startIndex] === substr[0]) {\n                if (str.slice(startIndex, startIndex + substr.length) === substr) {\n                    ++count;\n                    startIndex += substr.length;\n                } else {\n                    break;\n                }\n            }\n        }\n        \n        return count;\n    };\n})();", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 0, "status": 0}, {"assert": "f.name", "eq": "substrcount", "got": "", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "list index out of range", "status": 0}, {"assert": "f.args[1].name", "eq": "substr", "got": "list index out of range", "status": 0}, {"assert": "f.call('aaa','a')", "eq": 3, "got": "a", "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": "ab", "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": "abc", "status": 0}], "status": "FAIL", "passed": 0, "total": 7}