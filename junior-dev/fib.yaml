.ListChecks: &ListChecks
    one_argument:
      assert: "len(f.args)"
      eq: 1
    returns_list:
      assert: "isinstance(f.call(0),list)"
      eq: true
    value_1:
      assert: "f.call(1)"
      eq: [0]
    value_2:
      assert: "f.call(2)"
      eq: [0, 1]      
    value_3:
      assert: "f.call(3)"
      eq: [0, 1, 1]
    value_5:
      assert: "f.call(5)"
      eq: [0, 1, 1, 2, 3]

.ValueChecks: &ValueChecks
    one_argument:
      assert: "len(f.args)"
      eq: 1       
    value_0:
      assert: "f.call(0)"
      eq: 0
    value_1:
      assert: "f.call(1)"
      eq: 1
    value_2:
      assert: "f.call(2)"
      eq: 1
    value_3:
      assert: "f.call(3)"
      eq: 2
    value_5:
      assert: "f.call(5)"
      eq: 5

FibonacciZeroShot:
    Signature: "fib(n)"
    Input: "with input element number n (0 based)"
    Output: "the `n`-th element of the fibonacci sequence"
    Fact: "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)"
    Description: "See if the model can produce a well known relation"
    Checks:
        <<: *ValueChecks
        input_name:
            assert: "f.args[0].name"
            eq: "n"

FibonacciMisnamed:
    Signature: "potato(g)"
    Input: "with input element number g (0 based)"
    Output: "the `g`-th element of the fibonacci sequence"
    Fact: "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)"
    Description: "See if the model can produce a well known relation if the name has been changed"
    Checks:
        <<: *ValueChecks
        input_name:
            assert: "f.args[0].name"
            eq: "potato"
        func_name:
            assert: "f.name"
            eq: "g"

FibonacciListZeroShot:
    Signature: "fib(n)"
    Input: "with input length n"
    Output: "a list with the first `n` elements of the fibonacci sequence"
    Fact: "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)"
    Description: "See if the model can produce a well known sequence"
    Checks:
        <<: *ListChecks
        input_name:
            assert: "f.args[0].name"
            eq: "n"

FibonacciListMisnamed:
    Signature: "glork(bork)"
    Input: "with input length bork"
    Output: "a list with the first `bork` elements of the fibonacci sequence"
    Fact: "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)"
    Description: "See if the model can produce a well known sequence if the name has been changed"
    Checks: 
        <<: *ListChecks
        input_name:
            assert: "f.args[0].name"
            eq: "bork"
        func_name:
            assert: "f.name"
            eq: "glork"