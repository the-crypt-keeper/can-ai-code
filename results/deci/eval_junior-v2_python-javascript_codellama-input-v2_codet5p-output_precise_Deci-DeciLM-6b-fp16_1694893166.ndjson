{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a python function with no inputs that returns a single integer, the answer to life the universe and everything\ndef meaning_of_life():", "answer": "\ndef meaning_of_life():\n\n    return 42\n\n# a python function with one input that returns an int\ndef get_age(name):\n    return name[0] + name[-1]\n\n# a python function with two inputs that returns an int\ndef add_numbers(a, b):\n    return a + b\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n\n    return 42\n\n# a python function with one input that returns an int\ndef get_age(name):\n    return name[0] + name[-1]\n\n# a python function with two inputs that returns an int\ndef add_numbers(a, b):\n    return a + b", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "// a javascript function with no inputs that returns a single integer, the answer to life the universe and everything\nfunction meaning_of_life() {", "answer": "\n\nfunction meaning_of_life() {\n\n    return 42;\n}\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n\n    return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a python function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain\ndef things():", "answer": "\ndef things():\n\n    return [5, \"foobar\", \"Madrid\"]\n\n# call the function and print its output\nprint(things())\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def things():\n\n    return [5, \"foobar\", \"Madrid\"]\n\n# call the function and print its output\nprint(things())", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "// a javascript function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain\nfunction things() {", "answer": "\n\nfunction things() {\n\n    return [5, \"foobar\", \"Madrid\"];\n}\n\n// a javascript function with two inputs that returns a list with three values: the number 5, the string 'foobar', and the capital city of Spain\nfunction things(input1, input2) {\n    return [5, \"foobar\", input2];\n}\n\n// a javascript function with one input that returns a list with three values: the number 5, the string 'foobar', and the capital city of Spain\nfunction things(input) {\n    return [5, \"foobar\", input];\n}\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function things() {\n\n    return [5, \"foobar\", \"Madrid\"];\n}\n\n// a javascript function with two inputs that returns a list with three values: the number 5, the string 'foobar', and the capital city of Spain\nfunction things(input1, input2) {\n    return [5, \"foobar\", input2];\n}\n\n// a javascript function with one input that returns a list with three values: the number 5, the string 'foobar', and the capital city of Spain\nfunction things(input) {\n    return [5, \"foobar\", input];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": null, "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a python function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names\ndef secretidentities():", "answer": "\ndef secretidentities():\n\n    return {Superman: 'Clark Kent', Batman: 'Bruce Wayne', Spider-Man: 'Peter Parker'}\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def secretidentities():\n\n    return {Superman: 'Clark Kent', Batman: 'Bruce Wayne', Spider-Man: 'Peter Parker'}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "// a javascript function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names\nfunction secretidentities() {", "answer": "\n\nfunction secretidentities() {\n\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\"\n    }\n}\n\n// a javascript function with two inputs that returns an array of objects mapping the superheroes Superman, Batman and Spider-Man to their real names\nfunction secretidentities(supermanName, batmanName) {\n    var identities = [];\n    \n    if (typeof supermanName === 'string') {\n        identities.push({\n            name: supermanName,\n            identity: secretidentities[supermanName]\n        });\n    } else {\n        throw new Error('Expected string');\n    }\n    \n    if (typeof batmanName === 'string') {\n        identities.push({\n            name: batmanName,\n            identity: secretidentities[batmanName]\n        });\n    } else {\n        throw new Error('Expected string');\n    }\n    \n    return identities;\n}\n\n// a javascript function with three inputs that returns an array of objects mapping the superheroes Superman, Batman and Spider-Man to their real names\nfunction secretidentities(supermanName, batmanName, spiderManName) {\n    var identities = [];\n    \n    if (typeof supermanName === 'string' && typeof batmanName === 'string' && typeof spiderManName === 'string') {\n        identities.push({\n            name: supermanName,\n            identity: secretidentities[supermanName]\n        });\n        \n        identities.push({\n            name: batmanName,\n            identity: secretidentities[batmanName]\n        });\n        \n        identities.push({\n            name: spiderManName,\n            identity: secretidentities[spiderManName]\n        });\n    } else {\n        throw new Error('Expected string');\n    }\n    \n    return identities;\n}\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function secretidentities() {\n\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\"\n    }\n}\n\n// a javascript function with two inputs that returns an array of objects mapping the superheroes Superman, Batman and Spider-Man to their real names\nfunction secretidentities(supermanName, batmanName) {\n    var identities = [];\n    \n    if (typeof supermanName === 'string') {\n        identities.push({\n            name: supermanName,\n            identity: secretidentities[supermanName]\n        });\n    } else {\n        throw new Error('Expected string');\n    }\n    \n    if (typeof batmanName === 'string') {\n        identities.push({\n            name: batmanName,\n            identity: secretidentities[batmanName]\n        });\n    } else {\n        throw new Error('Expected string');\n    }\n    \n    return identities;\n}\n\n// a javascript function with three inputs that returns an array of objects mapping the superheroes Superman, Batman and Spider-Man to their real names\nfunction secretidentities(supermanName, batmanName, spiderManName) {\n    var identities = [];\n    \n    if (typeof supermanName === 'string' && typeof batmanName === 'string' && typeof spiderManName === 'string') {\n        identities.push({\n            name: supermanName,\n            identity: secretidentities[supermanName]\n        });\n        \n        identities.push({\n            name: batmanName,\n            identity: secretidentities[batmanName]\n        });\n        \n        identities.push({\n            name: spiderManName,\n            identity: secretidentities[spiderManName]\n        });\n    } else {\n        throw new Error('Expected string');\n    }\n    \n    return identities;\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a python function with two inputs a and b that returns the greatest common denominator of a and b\ndef gcd(a, b):", "answer": "\ndef gcd(a, b):\n\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n# a python function with one input x that returns the sum of all numbers from 1 to x\ndef sum_of_numbers(x):\n    s = 0\n    for i in range(1, x+1):\n        s += i\n    return s\n\n# a python function with one input x that returns the product of all numbers from 1 to x\ndef prod_of_numbers(x):\n    p = 1\n    for i in range(1, x+1):\n        p *= i\n    return p\n\n# a python function with one input x that returns the quotient of all numbers from 1 to x\ndef quotient_of_numbers(x):\n    q = 1\n    for i in range(1, x+1):\n        q /= i\n    return q\n\n# a python function with one input x that returns the remainder of all numbers from 1 to x\ndef modulo_of_numbers(x):\n    r = 0\n    for i in range(1, x+1):\n        r = r + (i - 1) % i\n    return r\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n# a python function with one input x that returns the sum of all numbers from 1 to x\ndef sum_of_numbers(x):\n    s = 0\n    for i in range(1, x+1):\n        s += i\n    return s\n\n# a python function with one input x that returns the product of all numbers from 1 to x\ndef prod_of_numbers(x):\n    p = 1\n    for i in range(1, x+1):\n        p *= i\n    return p\n\n# a python function with one input x that returns the quotient of all numbers from 1 to x\ndef quotient_of_numbers(x):\n    q = 1\n    for i in range(1, x+1):\n        q /= i\n    return q\n\n# a python function with one input x that returns the remainder of all numbers from 1 to x\ndef modulo_of_numbers(x):\n    r = 0\n    for i in range(1, x+1):\n        r = r + (i - 1) % i\n    return r", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "// a javascript function with two inputs a and b that returns the greatest common denominator of a and b\nfunction gcd(a, b) {", "answer": "\n\nfunction gcd(a, b) {\n\n    return Math.gcd(parseInt(a), parseInt(b));\n}\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n\n    return Math.gcd(parseInt(a), parseInt(b));\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "Math.gcd is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "Math.gcd is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "Math.gcd is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "Math.gcd is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "Math.gcd is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "# a python function with two inputs a and b that returns the greatest common factor of a and b\ndef gcf(a, b):", "answer": "\ndef gcf(a, b):\n\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        while True:\n            if a % b == 0:\n                return a\n            else:\n                a = a / b\n                print(\"The GCF is\", a)\n\nprint(gcf(123456789, 1))\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        while True:\n            if a % b == 0:\n                return a\n            else:\n                a = a / b\n                print(\"The GCF is\", a)\n\nprint(gcf(123456789, 1))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 100, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 0.0, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "// a javascript function with two inputs a and b that returns the greatest common factor of a and b\nfunction gcf(a, b) {", "answer": "\n\nfunction gcf(a, b) {\n\n    var gcd = 0;\n    \n    if (b == 0) return a;\n    else if (a == 0) return b;\n    else {\n        while (true) {\n            gcd += a % b;\n            if (gcd > b) break;\n            a -= gcd * b;\n        }\n        \n        return gcd;\n    }\n}\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function gcf(a, b) {\n\n    var gcd = 0;\n    \n    if (b == 0) return a;\n    else if (a == 0) return b;\n    else {\n        while (true) {\n            gcd += a % b;\n            if (gcd > b) break;\n            a -= gcd * b;\n        }\n        \n        return gcd;\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 6, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a python function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\ndef fofx(x, banana):", "answer": "\ndef fofx(x, banana):\n\n    gcd = 1\n    while True:\n        if x % banana == 0:\n            return banana\n        else:\n            gcd += banana\n            banana /= gcd\n    return None\n\n# call the function with two inputs 2 and 3\nprint(fofx(2, 3))\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n\n    gcd = 1\n    while True:\n        if x % banana == 0:\n            return banana\n        else:\n            gcd += banana\n            banana /= gcd\n    return None\n\n# call the function with two inputs 2 and 3\nprint(fofx(2, 3))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 5e-324, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "// a javascript function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\n\nfunction fofx(x, banana) {\n\n    return gcd(x, banana);\n}\n\n// a javascript function with one input x that returns the greatest common divisor (gcd) of x\nfunction gcd(x) {\n    var result = 1;\n    for (var i = 2; i <= Math.sqrt(x); ++i) {\n        if (x % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n\n    return gcd(x, banana);\n}\n\n// a javascript function with one input x that returns the greatest common divisor (gcd) of x\nfunction gcd(x) {\n    var result = 1;\n    for (var i = 2; i <= Math.sqrt(x); ++i) {\n        if (x % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 2, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 1, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 1, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 6, "total": 9}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a python function with input n that returns the factorial of n using iteration\ndef factorial(n):", "answer": "\ndef factorial(n):\n\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# call the function and print out the result\nprint(factorial(5))\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def factorial(n):\n\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# call the function and print out the result\nprint(factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "// a javascript function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n    var result = 1;\n    \n    for (var i=2;i<=n;i++) {\n        result *= i;\n    }\n    \n    return result;\n}\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n    var result = 1;\n    \n    for (var i=2;i<=n;i++) {\n        result *= i;\n    }\n    \n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a python function with input n that returns the factorial of n using recursion\ndef factorial(n):", "answer": "\ndef factorial(n):\n\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def factorial(n):\n\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "// a javascript function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n    if (n == 0 || n === 1) return 1;\n    else return n * factorial(n - 1);\n}\n\n// a javascript function with input n that returns the factorial of n using iteration\nfunction factorialIteration(n){\n    var result = 1, i = 2;\n    \n    while (i <= n) {\n        result *= i;\n        i++;\n    }\n    \n    return result;\n}\n\nconsole.log(\"The factorial of 5 is: \" + factorial(5));\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n    if (n == 0 || n === 1) return 1;\n    else return n * factorial(n - 1);\n}\n\n// a javascript function with input n that returns the factorial of n using iteration\nfunction factorialIteration(n){\n    var result = 1, i = 2;\n    \n    while (i <= n) {\n        result *= i;\n        i++;\n    }\n    \n    return result;\n}\n\nconsole.log(\"The factorial of 5 is: \" + factorial(5));", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a python function with input bork that returns the factorial of bork\ndef glork(bork):", "answer": "\ndef glork(bork):\n\n    return bork * (glork(bork - 1))\n\nprint(glork(5))\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def glork(bork):\n\n    return bork * (glork(bork - 1))\n\nprint(glork(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "maximum recursion depth exceeded", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "maximum recursion depth exceeded", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "// a javascript function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n    return bork * (glork(bork - 1));\n}\n\n// a javascript function with output bork that returns the factorial of bork\nfunction glork2(bork) {\n    return bork + \"!\";\n}\n\nvar bork = 5;\nconsole.log(\"The factorial of bork is: \", glork(bork), \"\\n\");\nconsole.log(\"The factorial of bork is: \", glork2(bork), \"\\n\");\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n    return bork * (glork(bork - 1));\n}\n\n// a javascript function with output bork that returns the factorial of bork\nfunction glork2(bork) {\n    return bork + \"!\";\n}\n\nvar bork = 5;\nconsole.log(\"The factorial of bork is: \", glork(bork), \"\\n\");\nconsole.log(\"The factorial of bork is: \", glork2(bork), \"\\n\");", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a python function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence\ndef fib(n):", "answer": "\ndef fib(n):\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n\n# print out the first 5 elements of the fibonacci sequence\nprint(fib(5))\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def fib(n):\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n\n# print out the first 5 elements of the fibonacci sequence\nprint(fib(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "maximum recursion depth exceeded in comparison", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "// a javascript function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n  if (n < 2) return [1, 1];\n  const prev = fib(n - 1);\n  const next = prev[1] + prev[0];\n  return [next, next];\n}\n\n// a javascript function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence\nconst fibs = () => {\n  let prev = [];\n  for (let i = 0; i <= 5; i++) {\n    prev.push([i, fib(i)]);\n  }\n  return prev;\n};\n\nconsole.log(fibs());\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n  if (n < 2) return [1, 1];\n  const prev = fib(n - 1);\n  const next = prev[1] + prev[0];\n  return [next, next];\n}\n\n// a javascript function with input element number n (0 based) that returns the n-th element of the fibonacci sequence\nconst fibs = () => {\n  let prev = [];\n  for (let i = 0; i <= 5; i++) {\n    prev.push([i, fib(i)]);\n  }\n  return prev;\n};\n\nconsole.log(fibs());", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": [1, 1], "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": [1, 1], "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": [2, 2], "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": [4, 4], "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": [16, 16], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a python function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence\ndef potato(g):", "answer": "\ndef potato(g):\n\n    if g == 1: return 1\n    elif g == 2: return 1\n    else: return potato(g-1)+potato(g-2)\n\nprint(potato(3))\n# 5\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def potato(g):\n\n    if g == 1: return 1\n    elif g == 2: return 1\n    else: return potato(g-1)+potato(g-2)\n\nprint(potato(3))\n# 5", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "maximum recursion depth exceeded in comparison", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 7, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "// a javascript function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence\nfunction potato(g) {", "answer": "\n\nfunction potato(g) {\n\n  return document.getElementById(\"fib\" + g).value;\n}\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function potato(g) {\n\n  return document.getElementById(\"fib\" + g).value;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "document is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "document is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "document is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "document is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "document is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a python function with input length n that returns a list with the first `n` elements of the fibonacci sequence\ndef fib(n):", "answer": "\ndef fib(n):\n\n    if n < 2:\n        return [0,1]\n    else:\n        return [fib(n-1)+fib(n-2), fib(n-2)]\n\n# print the first 5 terms of the fibonacci sequence\nprint(fib(5))\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def fib(n):\n\n    if n < 2:\n        return [0,1]\n    else:\n        return [fib(n-1)+fib(n-2), fib(n-2)]\n\n# print the first 5 terms of the fibonacci sequence\nprint(fib(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [[0, 1, 0, 1], [0, 1]], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [[[0, 1, 0, 1], [0, 1], 0, 1], [0, 1]], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [[[[[0, 1, 0, 1], [0, 1], 0, 1], [0, 1], [0, 1, 0, 1], [0, 1]], [[0, 1, 0, 1], [0, 1]], [[0, 1, 0, 1], [0, 1], 0, 1], [0, 1]], [[[0, 1, 0, 1], [0, 1], 0, 1], [0, 1]]], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "// a javascript function with input length n that returns a list with the first `n` elements of the fibonacci sequence\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n  if (n < 2) return [0,1];\n  var a = Math.floor(Math.random() * 9);\n  var b = Math.floor(Math.random() * 9);\n  var c = Math.floor(Math.random() * 9);\n  var d = Math.floor(Math.random() * 9);\n  \n  return [a,b,c,d].sort((a,b)=>a-b).slice(0,n);\n}\n\n// a javascript function with input length n that returns a list with the last `n` elements of the fibonacci sequence\nfunction revFib(n){\n  if (n < 2) return [];\n  var a = Math.floor(Math.random() * 9);\n  var b = Math.floor(Math.random() * 9);\n  var c = Math.floor(Math.random() * 9);\n  var d = Math.floor(Math.random() * 9);\n  \n  return [d,c,b,a].sort((a,b)=>a-b).reverse().slice(-n);\n}\n\n// a javascript function with input length n that returns a list with the first `n` elements of the fibonacci sequence reversed\nfunction revFibRev(n){\n  if (n < 2) return [];\n  var a = Math.floor(Math.random() * 9);\n  var b = Math.floor(Math.random() * 9);\n  var c = Math.floor(Math.random() * 9);\n  var d = Math.floor(Math.random() * 9);\n  \n  return [d,c,b,a].sort((a,b)=>a-b).reverse();\n}\n\n// a javascript function with input length n that returns a list with the last `n` elements of the fibonacci sequence reversed\nfunction revFibLast(n){\n  if (n < 2) return [];\n  var a = Math.floor(Math.random() * 9);\n  var b = Math.floor(Math.random() * 9);\n  var c = Math.floor(Math.random() * 9);\n \n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n  if (n < 2) return [0,1];\n  var a = Math.floor(Math.random() * 9);\n  var b = Math.floor(Math.random() * 9);\n  var c = Math.floor(Math.random() * 9);\n  var d = Math.floor(Math.random() * 9);\n  \n  return [a,b,c,d].sort((a,b)=>a-b).slice(0,n);\n}\n\n// a javascript function with input length n that returns a list with the last n elements of the fibonacci sequence\nfunction revFib(n){\n  if (n < 2) return [];\n  var a = Math.floor(Math.random() * 9);\n  var b = Math.floor(Math.random() * 9);\n  var c = Math.floor(Math.random() * 9);\n  var d = Math.floor(Math.random() * 9);\n  \n  return [d,c,b,a].sort((a,b)=>a-b).reverse().slice(-n);\n}\n\n// a javascript function with input length n that returns a list with the first n elements of the fibonacci sequence reversed\nfunction revFibRev(n){\n  if (n < 2) return [];\n  var a = Math.floor(Math.random() * 9);\n  var b = Math.floor(Math.random() * 9);\n  var c = Math.floor(Math.random() * 9);\n  var d = Math.floor(Math.random() * 9);\n  \n  return [d,c,b,a].sort((a,b)=>a-b).reverse();\n}\n\n// a javascript function with input length n that returns a list with the last n elements of the fibonacci sequence reversed\nfunction revFibLast(n){\n  if (n < 2) return [];\n  var a = Math.floor(Math.random() * 9);\n  var b = Math.floor(Math.random() * 9);\n  var c = Math.floor(Math.random() * 9);", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "Unexpected end of input", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "Unexpected end of input", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "Unexpected end of input", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "Unexpected end of input", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "# a python function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence\ndef glork(bork):", "answer": "\ndef glork(bork):\n\n    return [fib[0:bork] for fib in fibonacci_sequence()]\n\n# print the first 10 elements of the fibonacci sequence\nprint(glork(10))\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def glork(bork):\n\n    return [fib[0:bork] for fib in fibonacci_sequence()]\n\n# print the first 10 elements of the fibonacci sequence\nprint(glork(10))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "name 'fibonacci_sequence' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "name 'fibonacci_sequence' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "name 'fibonacci_sequence' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "name 'fibonacci_sequence' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "// a javascript function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  return [1,2].map((x)=> x + bork);\n}\n\n// a javascript function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence\nconst glork = (bork) => [1,2].map((x)=> x + bork);\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n  return [1,2].map((x)=> x + bork);\n}\n\n// a javascript function with input length bork that returns a list with the first bork elements of the fibonacci sequence\nconst glork = (bork) => [1,2].map((x)=> x + bork);", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "Identifier 'glork' has already been declared", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "Identifier 'glork' has already been declared", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "Identifier 'glork' has already been declared", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "Identifier 'glork' has already been declared", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a python function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\ndef substrcount(str, substr):", "answer": "\ndef substrcount(str, substr):\n\n    count = 0\n    for i in range(len(str)):\n        if str[i] == substr:\n            count += 1\n    return count\n\n# a python function with inputs `list` and `substr` that returns a list containing all occurrences of substring `substr` in `list`\ndef substrinlist(list, substr):\n    result = []\n    for item in list:\n        if substr in item:\n            result.append(item)\n    return result\n\n# a python function with inputs `dict` and `key` that returns a list containing all values associated to key `key` in `dict`\ndef dictvalues(dct, key):\n    result = []\n    for k in dct:\n        if k == key:\n            result.append(dct[k])\n    return result\n\n# a python function with inputs `list` and `key` that returns a list containing all keys associated to key `key` in `list`\ndef listkeys(lst, key):\n    result = []\n    for k in lst:\n        if k == key:\n            result.append(k)\n    return result\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n\n    count = 0\n    for i in range(len(str)):\n        if str[i] == substr:\n            count += 1\n    return count\n\n# a python function with inputs list and substr that returns a list containing all occurrences of substring substr in list\ndef substrinlist(list, substr):\n    result = []\n    for item in list:\n        if substr in item:\n            result.append(item)\n    return result\n\n# a python function with inputs dict and key that returns a list containing all values associated to key key in dict\ndef dictvalues(dct, key):\n    result = []\n    for k in dct:\n        if k == key:\n            result.append(dct[k])\n    return result\n\n# a python function with inputs list and key that returns a list containing all keys associated to key key in list\ndef listkeys(lst, key):\n    result = []\n    for k in lst:\n        if k == key:\n            result.append(k)\n    return result", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 0, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 0, "status": 0}], "status": "FAIL", "passed": 5, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "// a javascript function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\nfunction substrcount(str, substr) {", "answer": "\n\nfunction substrcount(str, substr) {\n\n  let count = 0;\n  \n  for (let i=0; i<str.length; i++) {\n    if (str[i] === substr) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n// a javascript function with inputs `arr` and `substr` that returns an array containing all indices where `substr` appears in `arr`.\nfunction findindicesof(arr, substr) {\n  let result = [];\n  \n  for (let i=0; i<arr.length; i++) {\n    if (arr[i].includes(substr)) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n}\n\n// a javascript function with inputs `arr` and `substr` that returns an array containing all indices where `substr` does not appear in `arr`.\nfunction findnonindicesof(arr, substr) {\n  let result = [];\n  \n  for (let i=0; i<arr.length; i++) {\n    if (!arr[i].includes(substr)) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n}\n\n// a javascript function with inputs `str` and `substr` that returns true if `substr` is found in `str`, otherwise false.\nfunction contains(str, substr) {\n  return str.indexOf(substr) !== -1;\n}\n\n// a javascript function with inputs `str` and `substr` that returns true if `substr` is not found in `str`, otherwise false.\nfunction notcontains(str, substr) {\n  return !contains(str, substr);\n}\n\n// a javascript function with inputs `str` and `substr` that returns true if `substr` is found at least once in `str`, otherwise false.\nfunction containsatleastonce(str, substr) {\n  return substrcount(str, substr) > 0;\n}\n\n// a javascript function with inputs `str` and `substr` that returns true if `substr` is found exactly once in `str`, otherwise false.\nfunction containsexactlyonce(str, substr) {\n  return substrcount(str, substr) == 1;\n}\n\n// a javascript function with\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "Deci-DeciLM-6b-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n\n  let count = 0;\n  \n  for (let i=0; i<str.length; i++) {\n    if (str[i] === substr) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n// a javascript function with inputs arr and substr that returns an array containing all indices where substr appears in arr.\nfunction findindicesof(arr, substr) {\n  let result = [];\n  \n  for (let i=0; i<arr.length; i++) {\n    if (arr[i].includes(substr)) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n}\n\n// a javascript function with inputs arr and substr that returns an array containing all indices where substr does not appear in arr.\nfunction findnonindicesof(arr, substr) {\n  let result = [];\n  \n  for (let i=0; i<arr.length; i++) {\n    if (!arr[i].includes(substr)) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n}\n\n// a javascript function with inputs str and substr that returns true if substr is found in str, otherwise false.\nfunction contains(str, substr) {\n  return str.indexOf(substr) !== -1;\n}\n\n// a javascript function with inputs str and substr that returns true if substr is not found in str, otherwise false.\nfunction notcontains(str, substr) {\n  return !contains(str, substr);\n}\n\n// a javascript function with inputs str and substr that returns true if substr is found at least once in str, otherwise false.\nfunction containsatleastonce(str, substr) {\n  return substrcount(str, substr) > 0;\n}\n\n// a javascript function with inputs str and substr that returns true if substr is found exactly once in str, otherwise false.\nfunction containsexactlyonce(str, substr) {\n  return substrcount(str, substr) == 1;\n}\n\n// a javascript function with", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 0, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 0, "status": 0}], "status": "FAIL", "passed": 5, "total": 7}