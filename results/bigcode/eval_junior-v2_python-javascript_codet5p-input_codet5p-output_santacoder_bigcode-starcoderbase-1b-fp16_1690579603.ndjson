{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\ndef substrcount(str, substr):\n", "answer": "\ndef substrcount(str, substr):\n\treturn str.count(substr)\n\n\nprint(substrcount(\"Hello World\", \"World\")) # 1\nprint(substrcount(\"Hello World\", \"llllo\")) # 0\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n\treturn str.count(substr)\n\n\nprint(substrcount(\"Hello World\", \"World\")) # 1\nprint(substrcount(\"Hello World\", \"llllo\")) # 0", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "\n// a function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\nfunction substrcount(str, substr) {", "answer": "\n\nfunction substrcount(str, substr) {\n\n  return str.split(substr).length - 1;\n}\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n\n  return str.split(substr).length - 1;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using iteration\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n\tif (n == 0 or n == 1):\n\t\treturn 1\n\n\telse:\n\t\treturn n * factorial(n-1)\n\nprint(\"The factorial of 5 is\",factorial(5))\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def factorial(n):\n\tif (n == 0 or n == 1):\n\t\treturn 1\n\n\telse:\n\t\treturn n * factorial(n-1)\n\nprint(\"The factorial of 5 is\",factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  let result = 1;\n\n  for (let i = 2; i <= n; ++i) {\n    result *= i;\n  }\n\n  return result;\n}\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n  let result = 1;\n\n  for (let i = 2; i <= n; ++i) {\n    result *= i;\n  }\n\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using recursion\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n\tif (n == 0 or n == 1):\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1)\n\n\nprint(\"The factorial of 5 is\",factorial(5))\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def factorial(n):\n\tif (n == 0 or n == 1):\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1)\n\n\nprint(\"The factorial of 5 is\",factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  if (n === 0 || n === 1) return 1;\n\n  return n * factorial(n - 1);\n}\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n  if (n === 0 || n === 1) return 1;\n\n  return n * factorial(n - 1);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a function with input bork that returns the factorial of bork\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n\treturn 1 if bork == 0 else bork * glork(bork-1)\n\n\nprint(glork(5))\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def glork(bork):\n\treturn 1 if bork == 0 else bork * glork(bork-1)\n\n\nprint(glork(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "\n// a function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  return (bork === 0? 1 : bork * glork(bork - 1));\n}\nconsole.log(glork(5)) // => 120\n```\n\n## License\nMIT \u00a9 [<NAME>](https://github.com/joshua-mccarthy)\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "## License\nMIT \u00a9 [<NAME>](https://github.com/joshua-mccarthy)", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a function with two inputs a and b that returns the greatest common denominator of a and b\ndef gcd(a, b):\n", "answer": "\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\telse:\n\t\treturn gcd(b, a % b)\n\n\n# a function to find the least common multiple between two numbers\ndef lcm(a, b):\n\treturn int((float(a)*float(b))/gcd(a, b))\n\n\n# a function to calculate the number of digits in an integer\ndef num_digits(n):\n    return len(str(abs(int(n))))\n\n\n# a function to check if a string is palindrome or not\ndef is_palindrome(s):\n\tfor i in range(len(s)//2):\n\t\tif s[i]!= s[-1-i]:\n\t\t\treturn False\n\treturn True\n\n\n# a function to print all prime factors of a given positive integer n\ndef prime_factors(n):\n\tprime = []\n\twhile n > 1:\n\t\tif n%2==0:\n\t\t\tn=n//2\n\t\telse:\n\t\t\tn=3*n+1\n\t\tprime.append(n)\n\tprint(\"Prime Factors : \", end=\"\")\n\tfor x in prime:\n\t\tprint(x,end=\" \")\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\telse:\n\t\treturn gcd(b, a % b)\n\n\n# a function to find the least common multiple between two numbers\ndef lcm(a, b):\n\treturn int((float(a)*float(b))/gcd(a, b))\n\n\n# a function to calculate the number of digits in an integer\ndef num_digits(n):\n    return len(str(abs(int(n))))\n\n\n# a function to check if a string is palindrome or not\ndef is_palindrome(s):\n\tfor i in range(len(s)//2):\n\t\tif s[i]!= s[-1-i]:\n\t\t\treturn False\n\treturn True\n\n\n# a function to print all prime factors of a given positive integer n\ndef prime_factors(n):\n\tprime = []\n\twhile n > 1:\n\t\tif n%2==0:\n\t\t\tn=n//2\n\t\telse:\n\t\t\tn=3*n+1\n\t\tprime.append(n)\n\tprint(\"Prime Factors : \", end=\"\")\n\tfor x in prime:\n\t\tprint(x,end=\" \")", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "\n// a function with two inputs a and b that returns the greatest common denominator of a and b\nfunction gcd(a, b) {", "answer": "\n\nfunction gcd(a, b) {\n\n  if (b === 0) return a;\n\n  return gcd(b, a % b);\n}\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n\n  if (b === 0) return a;\n\n  return gcd(b, a % b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "# a function with two inputs a and b that returns the greatest common factor of a and b\ndef gcf(a, b):\n", "answer": "\ndef gcf(a, b):\n\tif (b == 0):\n\t\treturn a\n\telse:\n\t\treturn gcf(b, a % b)\n\n\nprint(\"Greatest Common Factor\")\nprint(\"Enter first number:\")\nnum1 = int(input())\nprint(\"Enter second number:\")\nnum2 = int(input())\ngcd = gcf(abs(num1), abs(num2))\nprint(\"The GCF is\", gcd)\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n\tif (b == 0):\n\t\treturn a\n\telse:\n\t\treturn gcf(b, a % b)\n\n\nprint(\"Greatest Common Factor\")\nprint(\"Enter first number:\")\nnum1 = int(input())\nprint(\"Enter second number:\")\nnum2 = int(input())\ngcd = gcf(abs(num1), abs(num2))\nprint(\"The GCF is\", gcd)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "\n// a function with two inputs a and b that returns the greatest common factor of a and b\nfunction gcf(a, b) {", "answer": "\n\nfunction gcf(a, b) {\n\n  if (b === 0) return a;\n\n  var r = gcf(b, a % b);\n  return r? r : b;\n}\n\nconsole.log(\"gcf(24, 6) is \" + gcf(24, 6)); // should print '6'\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function gcf(a, b) {\n\n  if (b === 0) return a;\n\n  var r = gcf(b, a % b);\n  return r? r : b;\n}\n\nconsole.log(\"gcf(24, 6) is \" + gcf(24, 6)); // should print '6'", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\ndef fofx(x, banana):\n", "answer": "\ndef fofx(x, banana):\n\treturn gcd(x, banana)\n\n\nprint(fofx(10, 2)) # prints 5\nprint(fofx(3, 4)) # prints 1\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n\treturn gcd(x, banana)\n\n\nprint(fofx(10, 2)) # prints 5\nprint(fofx(3, 4)) # prints 1", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "\n// a function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\n\nfunction fofx(x, banana) {\n\n  return gcd(x, banana);\n}\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n\n  return gcd(x, banana);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\ndef meaning_of_life():\n", "answer": "\ndef meaning_of_life():\n\treturn 42\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n\treturn 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "\n// a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life() {", "answer": "\n\nfunction meaning_of_life() {\n\n  return 42;\n}\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\ndef things():\n", "answer": "\ndef things():\n\treturn [5, \"foobar\", \"Madrid\"]\n\n\nprint(things()) # prints out the output from the function\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def things():\n\treturn [5, \"foobar\", \"Madrid\"]\n\n\nprint(things()) # prints out the output from the function", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "\n// a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things() {", "answer": "\n\nfunction things() {\n\n    return [5, \"foobar\", \"Madrid\"];\n}\n```\n\n### `let` and `const`\n\nThe keyword `let` declares a variable in its own scope. The value assigned to it can be reassigned later on using the same name or by assigning another expression to it.\n\n```javascript\nlet x = 10; // declare an integer named x\nx = 20; // assign 20 to x\nconsole.log(x); // prints 20\n```\n\nA constant cannot be changed after declaration. It's declared as follows:\n\n```javascript\nconst PI = Math.PI; // declare a constant named PI\nPI = 3.14; // change the value of PI\nconsole.log(PI); // prints NaN (not a number)\n```\n\n## Functions\n\nFunctions are blocks of code that perform some specific task. They have two main characteristics:\n\n1. **They take parameters** - they accept input arguments when called.\n2. **They return results** - they produce output values.\n\nIn JavaScript we use functions for performing tasks. A function has a name, a set of parameters and a body. We call this function a _function definition_. Here's how you define a function:\n\n```javascript\nfunction myFunction(param1, param2) {\n  // do something here...\n}\n```\n\nWe can then invoke our function like so:\n\n```javascript\nmyFunction(\"foo\", \"bar\");\n```\n\nIf we want to pass more than one parameter to a function, we need to wrap them into parentheses:\n\n```javascript\nmyFunction(\"foo\", \"bar\", \"baz\");\n```\n\nWhen invoking a function, we don't need to specify the names of all the parameters. If we only provide the required ones, the compiler will automatically infer their types from the context where the function is invoked. For example, if we write `myFunction()`, the compiler will infer that `param1` and `param2` should be strings.\n\nHere's what happens when we try to invoke a function without providing any parameters:\n\n```javascript\nmyFunction();\n```\n\nThis will throw an error because there are not enough parameters provided to satisfy the function signature.\n\nLet's see how we can make our function work!\n\n## Function Parameters\n\nParameters are passed to a function through\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "### `let` and `const`\n\nThe keyword `let` declares a variable in its own scope. The value assigned to it can be reassigned later on using the same name or by assigning another expression to it.", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\ndef secretidentities():\n", "answer": "\ndef secretidentities():\n\treturn {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': '<NAME>'}\n\n\n# a function that takes in a string as input and returns True if it contains any of the words \"super\", \"bat\" or \"spider\". False otherwise.\ndef has_any(string):\n    return ('super' in string) | ('bat' in string) | ('spider' in string)\n\n\n# a function that takes in two strings as input and returns True if they are equal (case insensitive). False otherwise.\ndef equals(a, b):\n    return a == b.lower()\n\n\n# a function that takes in a list of strings as input and returns True if all elements in the list contain at least one word containing either \"super\", \"bat\" or \"spider\". False otherwise.\ndef allwords(listofstrings):\n    for i in range(len(listofstrings)):\n        if not has_any(listofstrings[i]):\n            return False\n    return True\n\n\n# a function that takes in a dictionary as input and returns True if every key in the dictionary is also present in another dictionary. False otherwise.\ndef samekeys(dict1, dict2):\n    keys = set(dict1.keys()) & set(dict2.keys())\n    return len(keys) == 0\n\n\n# a function that takes in a dictionary as input and returns True if every value in the dictionary is also present in another dictionary. False otherwise.\ndef samevalues(dict1, dict2):\n    values = set(dict1.values()) & set(dict2.values())\n    return len(values) == 0\n\n\n# a function that takes in a dictionary as input and returns True if every key in the dictionary is also present in another dictionary whose corresponding values are both lists. False otherwise.\ndef samelists(dict1, dict2):\n    keys = set(dict1.keys()) & set(dict2.keys())\n    values = set([x for x in dict1.values()]) & set([y for y in dict2.values()])\n    return len(keys) == len(values)\n\n\n# a function that takes in a dictionary as input and returns True if every key in the dictionary is also present in another dictionary whose corresponding values are both dictionaries. False otherwise.\ndef samedicts(dict1, dict2\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def secretidentities():\n\treturn {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': '<NAME>'}\n\n\n# a function that takes in a string as input and returns True if it contains any of the words \"super\", \"bat\" or \"spider\". False otherwise.\ndef has_any(string):\n    return ('super' in string) | ('bat' in string) | ('spider' in string)\n\n\n# a function that takes in two strings as input and returns True if they are equal (case insensitive). False otherwise.\ndef equals(a, b):\n    return a == b.lower()\n\n\n# a function that takes in a list of strings as input and returns True if all elements in the list contain at least one word containing either \"super\", \"bat\" or \"spider\". False otherwise.\ndef allwords(listofstrings):\n    for i in range(len(listofstrings)):\n        if not has_any(listofstrings[i]):\n            return False\n    return True\n\n\n# a function that takes in a dictionary as input and returns True if every key in the dictionary is also present in another dictionary. False otherwise.\ndef samekeys(dict1, dict2):\n    keys = set(dict1.keys()) & set(dict2.keys())\n    return len(keys) == 0\n\n\n# a function that takes in a dictionary as input and returns True if every value in the dictionary is also present in another dictionary. False otherwise.\ndef samevalues(dict1, dict2):\n    values = set(dict1.values()) & set(dict2.values())\n    return len(values) == 0\n\n\n# a function that takes in a dictionary as input and returns True if every key in the dictionary is also present in another dictionary whose corresponding values are both lists. False otherwise.\ndef samelists(dict1, dict2):\n    keys = set(dict1.keys()) & set(dict2.keys())\n    values = set([x for x in dict1.values()]) & set([y for y in dict2.values()])\n    return len(keys) == len(values)\n\n\n# a function that takes in a dictionary as input and returns True if every key in the dictionary is also present in another dictionary whose corresponding values are both dictionaries. False otherwise.\ndef samedicts(dict1, dict2", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "\n// a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\nfunction secretidentities() {", "answer": "\n\nfunction secretidentities() {\n\n  return {\n    \"Superman\": \"<NAME>\",\n    \"Batman\": \"<NAME>\",\n    \"Spider-Man\": \"<NAME>\"\n  };\n}\n\nconsole.log(secretidentities());\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function secretidentities() {\n\n  return {\n    \"Superman\": \"<NAME>\",\n    \"Batman\": \"<NAME>\",\n    \"Spider-Man\": \"<NAME>\"\n  };\n}\n\nconsole.log(secretidentities());", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "<NAME>", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "<NAME>", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "<NAME>", "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n\tif n <= 1:\n\t\treturn n\n\n\telse:\n\t\treturn fib(n - 1) + fib(n - 2)\n\nprint(fib(5))\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def fib(n):\n\tif n <= 1:\n\t\treturn n\n\n\telse:\n\t\treturn fib(n - 1) + fib(n - 2)\n\nprint(fib(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "\n// a function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n  if (n <= 1) return n;\n\n  let f = [0, 1];\n  for (let i = 3; i < n+1; ++i) {\n    const temp = f[i - 1] + f[i - 2];\n    f.push(temp);\n  }\n  return f[n];\n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n  if (n <= 1) return n;\n\n  let f = [0, 1];\n  for (let i = 3; i < n+1; ++i) {\n    const temp = f[i - 1] + f[i - 2];\n    f.push(temp);\n  }\n  return f[n];\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef potato(g):\n", "answer": "\ndef potato(g):\n\tif g < 0:\n\t\treturn None\n\n\tif g == 0 or g == 1:\n\t\treturn 1\n\n\treturn potato(g - 1) + potato(g - 2)\n\nprint(potato(5))\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def potato(g):\n\tif g < 0:\n\t\treturn None\n\n\tif g == 0 or g == 1:\n\t\treturn 1\n\n\treturn potato(g - 1) + potato(g - 2)\n\nprint(potato(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 1, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 2, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 8, "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "\n// a function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction potato(g) {", "answer": "\n\nfunction potato(g) {\n\n  if (g === 0 || g === 1) return g;\n\n  let f = [0, 1];\n  for (let i = 2; i <= g; ++i) {\n    const temp = f[i - 1] + f[i - 2];\n    f.push(temp);\n  }\n  return f[g];\n}\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function potato(g) {\n\n  if (g === 0 || g === 1) return g;\n\n  let f = [0, 1];\n  for (let i = 2; i <= g; ++i) {\n    const temp = f[i - 1] + f[i - 2];\n    f.push(temp);\n  }\n  return f[g];\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a function with input length n that returns a list with the first `n` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n\tif (n <= 1):\n\t\treturn [n]\n\n\telse:\n\t\treturn fib(n - 1) + fib(n - 2)\n\nprint(fib(5))\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def fib(n):\n\tif (n <= 1):\n\t\treturn [n]\n\n\telse:\n\t\treturn fib(n - 1) + fib(n - 2)\n\nprint(fib(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 0], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 0, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 0, 1, 1, 0, 1, 0, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "\n// a function with input length n that returns a list with the first `n` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n  if (n <= 1) return [n];\n\n  const f = fib(n - 1);\n  const s = fib(n - 2);\n\n  return [...f,...s];\n}\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n  if (n <= 1) return [n];\n\n  const f = fib(n - 1);\n  const s = fib(n - 2);\n\n  return [...f,...s];\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 0], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 0, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 0, 1, 1, 0, 1, 0, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "# a function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n\tif (bork <= 0):\n\t\treturn [0]\n\n\tfib = []\n\tfib.append(0)\n\tfib.append(1)\n\t\n\tfor i in range(2, bork+1):\n\t\tfib.append(fib[i-1]+fib[i-2])\n\t\t\n\treturn fib[:bork]\n\nprint(glork(5))\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "def glork(bork):\n\tif (bork <= 0):\n\t\treturn [0]\n\n\tfib = []\n\tfib.append(0)\n\tfib.append(1)\n\t\n\tfor i in range(2, bork+1):\n\t\tfib.append(fib[i-1]+fib[i-2])\n\t\t\n\treturn fib[:bork]\n\nprint(glork(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "\n// a function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  if (bork === undefined || bork < 0) return [];\n\n  let result = [fib(0), fib(1)];\n  for (let i = 2; i <= bork; ++i)\n    result.push(result[i - 1] + result[i - 2]);\n\n  return result;\n}\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-1b-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n  if (bork === undefined || bork < 0) return [];\n\n  let result = [fib(0), fib(1)];\n  for (let i = 2; i <= bork; ++i)\n    result.push(result[i - 1] + result[i - 2]);\n\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "fib is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "fib is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "fib is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "fib is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}