{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\ndef substrcount(str, substr):\n", "answer": "\ndef substrcount(str, substr):\n\treturn str.count(substr)\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n\treturn str.count(substr)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "\n// a function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\nfunction substrcount(str, substr) {", "answer": "\n\nfunction substrcount(str, substr) {\n\n  var count = 0;\n\n  for (var i=0;i<str.length - substr.length +1 ;++i){\n    if ((str[i] == substr[0]) && (str.substring(i, i+substr.length)==substr)){\n      ++count;\n    }\n  }\n  \n  return count;\n  \n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n\n  var count = 0;\n\n  for (var i=0;i<str.length - substr.length +1 ;++i){\n    if ((str[i] == substr[0]) && (str.substring(i, i+substr.length)==substr)){\n      ++count;\n    }\n  }\n  \n  return count;\n  \n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using iteration\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n\tresult = 1 # set result to one, since we'll be multiplying by it\n\n\tfor i in range (2, n + 1):\n\t\tresult *= i\n\t\n\treturn result\n\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def factorial(n):\n\tresult = 1 # set result to one, since we'll be multiplying by it\n\n\tfor i in range (2, n + 1):\n\t\tresult *= i\n\t\n\treturn result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  let result = 1;\n\n  for (let i=2;i<=n;++i){\n    // console.log(\"result: \", result);\n    // console.log(\"i: \", i);\n\n    if ((i % 3 ===0 || i%5===0)){\n      continue;\n    } else{\n      result *= i;\n    }\n  }\n  \n  return result;\n  \n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n  let result = 1;\n\n  for (let i=2;i<=n;++i){\n    // console.log(\"result: \", result);\n    // console.log(\"i: \", i);\n\n    if ((i % 3 ===0 || i%5===0)){\n      continue;\n    } else{\n      result *= i;\n    }\n  }\n  \n  return result;\n  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 8, "status": 0}], "status": "FAIL", "passed": 3, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using recursion\ndef factorial(n):\n", "answer": "\ndef factorial(n):\n\tif (n == 0 or n==1) :\n\t\treturn 1\n\n\telse: \n\t\treturn n * factorial(n-1) # recursive call to itself \n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def factorial(n):\n\tif (n == 0 or n==1) :\n\t\treturn 1\n\n\telse: \n\t\treturn n * factorial(n-1) # recursive call to itself", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "\n// a function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\n\nfunction factorial(n) {\n\n  if (n === 1 || n === 0){\n    return 1;\n  } else{\n    let result = n * factorial(n - 1); \n    console.log(`The value is ${result}`); // this will print out all values in order to see what's happening inside the recursive call stack\n    return result; \n  };  \n}; \n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function factorial(n) {\n\n  if (n === 1 || n === 0){\n    return 1;\n  } else{\n    let result = n * factorial(n - 1); \n    console.log(The value is ${result}); // this will print out all values in order to see what's happening inside the recursive call stack\n    return result; \n  };  \n};", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "missing ) after argument list", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "missing ) after argument list", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 1, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a function with input bork that returns the factorial of bork\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n\treturn 1 if (bork == 0) else (glork(bork - 1)*bork)\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def glork(bork):\n\treturn 1 if (bork == 0) else (glork(bork - 1)*bork)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "\n// a function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  return (bork === 0 || bork === 1? 1 : bork * glork(--bork)); // recursive call to itself, decrementing by one each time.\n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n  return (bork === 0 || bork === 1? 1 : bork * glork(--bork)); // recursive call to itself, decrementing by one each time.\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a function with two inputs a and b that returns the greatest common denominator of a and b\ndef gcd(a, b):\n", "answer": "\ndef gcd(a, b):\n\twhile (b!= 0) :\n\t\tr = a % b; \n\t\ta = b ; \n\t\tb = r \n\treturn a\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n\twhile (b!= 0) :\n\t\tr = a % b; \n\t\ta = b ; \n\t\tb = r \n\treturn a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "\n// a function with two inputs a and b that returns the greatest common denominator of a and b\nfunction gcd(a, b) {", "answer": "\n\nfunction gcd(a, b) {\n\n  if (b === 0){\n    return a;\n  } else{\n    var remainder = a % b;\n    // console.log(\"remainder: \" + remainder);\n    return gcd(b, remainder);\n  }\n  \n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n\n  if (b === 0){\n    return a;\n  } else{\n    var remainder = a % b;\n    // console.log(\"remainder: \" + remainder);\n    return gcd(b, remainder);\n  }\n  \n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "# a function with two inputs a and b that returns the greatest common factor of a and b\ndef gcf(a, b):\n", "answer": "\ndef gcf(a, b):\n\tif (b == 0) :\n\t\treturn a;\n\n\telse: \n\t\treturn gcf(b, a % b); # recursive call to find GCF using Euclid's algorithm. \n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n\tif (b == 0) :\n\t\treturn a;\n\n\telse: \n\t\treturn gcf(b, a % b); # recursive call to find GCF using Euclid's algorithm.", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "\n// a function with two inputs a and b that returns the greatest common factor of a and b\nfunction gcf(a, b) {", "answer": "\n\nfunction gcf(a, b) {\n\n  if (b === 0 ||!Number.isInteger(a)) return NaN;\n\n  while (!Number.isNaN(b)) [a, b] = [b % a, Math.floor(b / a)]; // eslint-disable-line no-param-reassign\n\n  return Number.parseInt(`${a}`, 10);\n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function gcf(a, b) {\n\n  if (b === 0 ||!Number.isInteger(a)) return NaN;\n\n  while (!Number.isNaN(b)) [a, b] = [b % a, Math.floor(b / a)]; // eslint-disable-line no-param-reassign\n\n  return Number.parseInt(${a}, 10);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "Unexpected token ','", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "Unexpected token ','", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "Unexpected token ','", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "Unexpected token ','", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "Unexpected token ','", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\ndef fofx(x, banana):\n", "answer": "\ndef fofx(x, banana):\n\treturn gcd(x,banana)\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n\treturn gcd(x,banana)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "\n// a function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\n\nfunction fofx(x, banana) {\n\n  return gcd(x,banana); // write your code here!\n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n\n  return gcd(x,banana); // write your code here!\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "gcd is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\ndef meaning_of_life():\n", "answer": "\ndef meaning_of_life():\n\treturn 42\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n\treturn 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "\n// a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life() {", "answer": "\n\nfunction meaning_of_life() {\n\n    return 42;\n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n\n    return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\ndef things():\n", "answer": "\ndef things():\n\treturn [5,'foobar','Madrid']\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def things():\n\treturn [5,'foobar','Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "\n// a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things() {", "answer": "\n\nfunction things() {\n\n  return [\n    5,\n    \"foobar\",\n    getCapitalCity(\"Spain\") // this will be replaced by the value returned from `getCapitalCity` when it's called in the browser.\n  ];\n}\n```\n\n2) The second argument to `createComponent` should be an object containing all your component's props and their default values (if any). This way you can use them as regular variables inside your components' render functions without having to pass them down through multiple levels of nested objects or using React Contexts.\n\n```js\nimport createComponent from \"@re-active/react\";\nconst MyComponent = createComponent(MyReactFunctionComponent, {\n  name: \"<NAME>\",\n  age: null,\n  occupation: undefined\n});\n<MyComponent />; // renders <div>Hello World</div>, because we didn't specify anything for these props!\n<MyComponent name=\"Bob\" /> // renders <div><NAME></div>. We specified Bob as our name prop so now it'll say Hello Bob instead :)\n```\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "2) The second argument to `createComponent` should be an object containing all your component's props and their default values (if any). This way you can use them as regular variables inside your components' render functions without having to pass them down through multiple levels of nested objects or using React Contexts.", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\ndef secretidentities():\n", "answer": "\ndef secretidentities():\n\treturn {\n\t\t'Superman': '<NAME>', \n\t\t'Batman': 'B<NAME>ne', \n\t\t'Spider-Man': '<NAME>' \n\t}\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def secretidentities():\n\treturn {\n\t\t'Superman': '<NAME>', \n\t\t'Batman': 'B<NAME>ne', \n\t\t'Spider-Man': '<NAME>' \n\t}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "<NAME>", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "B<NAME>ne", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "<NAME>", "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "\n// a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\nfunction secretidentities() {", "answer": "\n\nfunction secretidentities() {\n\n  return {\n    'Superman': '<NAME>', \n    'Batman': '<NAME>', \n    \"Spider-Man\": \"<NAME>\" \n  } \n}\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function secretidentities() {\n\n  return {\n    'Superman': '<NAME>', \n    'Batman': '<NAME>', \n    \"Spider-Man\": \"<NAME>\" \n  } \n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "<NAME>", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "<NAME>", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "<NAME>", "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n\tif n < 2:\n\t\treturn n\n\n\telse: \n\t\treturn fib(n - 1) + fib(n - 2)\n\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def fib(n):\n\tif n < 2:\n\t\treturn n\n\n\telse: \n\t\treturn fib(n - 1) + fib(n - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "\n// a function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n    if (!fib.cache[n])\n        return fib.cache[n] = fib(n - 1) + fib(n - 2);\n\n    else \n        return fib.cache[n];\n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n    if (!fib.cache[n])\n        return fib.cache[n] = fib(n - 1) + fib(n - 2);\n\n    else \n        return fib.cache[n];\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "Cannot read properties of undefined (reading '0')", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "Cannot read properties of undefined (reading '1')", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "Cannot read properties of undefined (reading '2')", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "Cannot read properties of undefined (reading '3')", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "Cannot read properties of undefined (reading '5')", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef potato(g):\n", "answer": "\ndef potato(g):\n\tif g==0:\n\t\treturn 0;\n\telif g==1 or g==2:\n\t\treturn 1;\n\telse:\n\t\treturn potato(g-1)+potato(g-2);\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def potato(g):\n\tif g==0:\n\t\treturn 0;\n\telif g==1 or g==2:\n\t\treturn 1;\n\telse:\n\t\treturn potato(g-1)+potato(g-2);", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "\n// a function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction potato(g) {", "answer": "\n\nfunction potato(g) {\n\n    if (!fib[g])\n        return;\n\n    let result = [];\n    \n    for (let i=0 ; i<g+1 ; ++i){\n        // console.log(`fib(${i})=${fib[i]}`);\n\n        const f = fib[i];\n        \n        if ((f % 3 === 0 || f % 5 === 0))\n            continue;\n            \n        result.push(f);\n    }\n\n    return Math.max(...result);\n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function potato(g) {\n\n    if (!fib[g])\n        return;\n\n    let result = [];\n    \n    for (let i=0 ; i<g+1 ; ++i){\n        // console.log(fib(${i})=${fib[i]});\n\n        const f = fib[i];\n        \n        if ((f % 3 === 0 || f % 5 === 0))\n            continue;\n            \n        result.push(f);\n    }\n\n    return Math.max(...result);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "non-zero result code 2", "output": ""}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "non-zero result code 2", "output": ""}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "non-zero result code 2", "output": ""}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "non-zero result code 2", "output": ""}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "non-zero result code 2", "output": ""}, "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a function with input length n that returns a list with the first `n` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):\n", "answer": "\ndef fib(n):\n\tif (n <= 1):\n\t\treturn [0] if (n==0) else [1]\n\n\tfib_list = []\n\t\n\tfor i in range(n+1):\n\t\tfib_list.append((i>1) * fib_list[i-1]+fib_list[i-2])\n\t\t\n\treturn fib_list[:n]\n\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def fib(n):\n\tif (n <= 1):\n\t\treturn [0] if (n==0) else [1]\n\n\tfib_list = []\n\t\n\tfor i in range(n+1):\n\t\tfib_list.append((i>1) * fib_list[i-1]+fib_list[i-2])\n\t\t\n\treturn fib_list[:n]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "list index out of range", "exc_type": "IndexError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "list index out of range", "exc_type": "IndexError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "list index out of range", "exc_type": "IndexError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "\n// a function with input length n that returns a list with the first `n` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\n\nfunction fib(n) {\n\n  if (n === 0 || n === 1){\n    return [0, 1];\n  } else{\n    let arr = [];\n\n    for (let i=0;i<n;++i){\n      // console.log(\"arr\", arr);\n\n      const lastTwoElements = arr[arr.length - 2] && arr[arr.length - 1];\n      \n      if (!lastTwoElements ){\n        break;\n      }else{\n\n        const sumOfLastTwoElements = lastTwoElements[0]+lastTwoElements[1];\n        \n        arr.push([sumOfLastTwoElements]);\n        \n      }\n      \n    }\n    \n    return arr;\n    \n  }\n  \n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function fib(n) {\n\n  if (n === 0 || n === 1){\n    return [0, 1];\n  } else{\n    let arr = [];\n\n    for (let i=0;i<n;++i){\n      // console.log(\"arr\", arr);\n\n      const lastTwoElements = arr[arr.length - 2] && arr[arr.length - 1];\n      \n      if (!lastTwoElements ){\n        break;\n      }else{\n\n        const sumOfLastTwoElements = lastTwoElements[0]+lastTwoElements[1];\n        \n        arr.push([sumOfLastTwoElements]);\n        \n      }\n      \n    }\n    \n    return arr;\n    \n  }\n  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "# a function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef glork(bork):\n", "answer": "\ndef glork(bork):\n\tfib = [0] * (bork+1); # initialize array to hold values for all indices up to n. \n\tfib[0], fib[1] = 0, 1; # set initial values\n\t\n\tfor i in range(2, len(fib)):\n\t\tfib[i] = fib[i - 1] + fib[i - 2];\n\n\treturn fib[:bork];\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "def glork(bork):\n\tfib = [0] * (bork+1); # initialize array to hold values for all indices up to n. \n\tfib[0], fib[1] = 0, 1; # set initial values\n\t\n\tfor i in range(2, len(fib)):\n\t\tfib[i] = fib[i - 1] + fib[i - 2];\n\n\treturn fib[:bork];", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 7, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "\n// a function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {", "answer": "\n\nfunction glork(bork) {\n\n  if (bork === 0 || bork === 1){\n    return [0];\n  } else{\n    var result = [];\n\n    for (var i=0;i<bork;++i){\n      // console.log(\"glork\",result);\n\n      let lastTwoElements = result[result.length - 2]? result[result.length - 2]: 0 ;\n      \n      result.push((lastTwoElements+result[result.length - 1])%10);\n      \n    };\n    \n    return result;\n\n  }\n  \n}\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "bigcode-starcoderbase-fp16", "runtime": "transformers", "code": "function glork(bork) {\n\n  if (bork === 0 || bork === 1){\n    return [0];\n  } else{\n    var result = [];\n\n    for (var i=0;i<bork;++i){\n      // console.log(\"glork\",result);\n\n      let lastTwoElements = result[result.length - 2]? result[result.length - 2]: 0 ;\n      \n      result.push((lastTwoElements+result[result.length - 1])%10);\n      \n    };\n    \n    return result;\n\n  }\n  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [null, null], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [null, null, null], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [null, null, null, null, null], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 5, "total": 8}