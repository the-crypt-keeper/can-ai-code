{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\n\n### Response:", "answer": "  def substr_count(str, substr):\n    count = 0\n    for char in str:\n        if char == substr[0]:\n            while char != substr[-1] and char in str:\n                char += 1\n                count += 1\n    return count", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def substr_count(str, substr):\n    count = 0\n    for char in str:\n        if char == substr[0]:\n            while char != substr[-1] and char in str:\n                char += 1\n                count += 1\n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substr_count", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 0, "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": {"error": "can only concatenate str (not \"int\") to str", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": {"error": "can only concatenate str (not \"int\") to str", "exc_type": "TypeError"}, "status": 0}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\n\n### Response:", "answer": "  function substrCount(str, substr) {\n    let count = 0;\n    for (let i=0; i<str.length; i++) {\n        if (str[i] === substr[0]) {\n            for (let j=1; j<substr.length; j++) {\n                if (str[i+j] !== substr[j]) break;\n            }\n            if (j == substr.length) count++;\n        }\n    }\n    return count;\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function substrCount(str, substr) {\n    let count = 0;\n    for (let i=0; i<str.length; i++) {\n        if (str[i] === substr[0]) {\n            for (let j=1; j<substr.length; j++) {\n                if (str[i+j] !== substr[j]) break;\n            }\n            if (j == substr.length) count++;\n        }\n    }\n    return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrCount", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": {"error": "j is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": {"error": "j is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": {"error": "j is not defined", "exc_type": "ReferenceError"}, "status": 0}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function factorial(n) with input n that returns the factorial of n using iteration\n\n### Response:", "answer": "  def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    \n    else:\n        result = 1\n        \n        for i in range(2, n+1):\n            result *= i\n            \n        return result", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    \n    else:\n        result = 1\n        \n        for i in range(2, n+1):\n            result *= i\n            \n        return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function factorial(n) with input n that returns the factorial of n using iteration\n\n### Response:", "answer": "  function factorial(n){\n    if (n <= 0) {\n        return 1;\n    } else {\n        let result = 1;\n        for (let i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function factorial(n){\n    if (n <= 0) {\n        return 1;\n    } else {\n        let result = 1;\n        for (let i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function factorial(n) with input n that returns the factorial of n using recursion\n\n### Response:", "answer": "  def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function factorial(n) with input n that returns the factorial of n using recursion\n\n### Response:", "answer": "  function factorial(n){\n    if (n <= 1) {\n        return 1;\n    } else {\n        const result = n * factorial(n - 1);\n        return result;\n    }\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function factorial(n){\n    if (n <= 1) {\n        return 1;\n    } else {\n        const result = n * factorial(n - 1);\n        return result;\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function glork(bork) with input bork that returns the factorial of bork\n\n### Response:", "answer": "  def glork(bork):\n    result = 1\n    while bork > 0:\n        result *= bork\n        bork -= 1\n    return result", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def glork(bork):\n    result = 1\n    while bork > 0:\n        result *= bork\n        bork -= 1\n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function glork(bork) with input bork that returns the factorial of bork\n\n### Response:", "answer": "  function glork(bork) {\n    var fact = 1;\n    for (var i=2;i<=bork;i++) {\n        fact *= i;\n    }\n    return fact;\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function glork(bork) {\n    var fact = 1;\n    for (var i=2;i<=bork;i++) {\n        fact *= i;\n    }\n    return fact;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b\n\n### Response:", "answer": "  def gcd(a, b):\n    if a > b:\n        return gcd(b, a % b)\n    else:\n        return gcd(a % b, b)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    if a > b:\n        return gcd(b, a % b)\n    else:\n        return gcd(a % b, b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "maximum recursion depth exceeded in comparison", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "maximum recursion depth exceeded in comparison", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b\n\n### Response:", "answer": "  function gcd(a, b) {\n    let result = Math.min(Math.floor(a / b), Math.floor(b / a));\n    return result;\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n    let result = Math.min(Math.floor(a / b), Math.floor(b / a));\n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 0, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 0, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 0, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "FAIL", "passed": 5, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b\n\n### Response:", "answer": "  def gcf(a, b):\n    if a == 0 or b == 0:\n        return 1\n    \n    else:\n        while a % b != 0:\n            a = a - (b // a)\n            \n        return b", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n    if a == 0 or b == 0:\n        return 1\n    \n    else:\n        while a % b != 0:\n            a = a - (b // a)\n            \n        return b", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 1, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 1, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 6, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b\n\n### Response:", "answer": "  function gcf(a, b) {\n    var f = Math.floor(b / a);\n    return (f == b % a ? f : -1);\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function gcf(a, b) {\n    var f = Math.floor(b / a);\n    return (f == b % a ? f : -1);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": -1, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": -1, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 0, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": -1, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": -1, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\n\n### Response:", "answer": "  def gcd_fofx(x, banana):\n    if isinstance(banana, int):\n        return gcd(x, banana)\n    else:\n        raise ValueError(\"'banana' should be an integer\")", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def gcd_fofx(x, banana):\n    if isinstance(banana, int):\n        return gcd(x, banana)\n    else:\n        raise ValueError(\"'banana' should be an integer\")", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "gcd_fofx", "status": 0}], "status": "FAIL", "passed": 3, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\n\n### Response:", "answer": "  function gcd(x, banana) {\n    let result = Math.max(Math.floor(x / banana), Math.floor(banana / x));\n    return result;\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function gcd(x, banana) {\n    let result = Math.max(Math.floor(x / banana), Math.floor(banana / x));\n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 5, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": null, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": null, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 5, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything\n\n### Response:", "answer": "  def meaning_of_life():\n    return 42", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything\n\n### Response:", "answer": "  function meaning_of_life(){ return 42; }", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function meaning_of_life(){ return 42; }", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain\n\n### Response:", "answer": "  def things():\n    return [5, \"foobar\", \"Madrid\"]", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def things():\n    return [5, \"foobar\", \"Madrid\"]", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain\n\n### Response:", "answer": " \n const things = () => [5, 'foobar', 'Madrid']", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "const things = () => [5, 'foobar', 'Madrid']", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names\n\n### Response:", "answer": "  def secretidentities():\n    return { 'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker' }", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def secretidentities():\n    return { 'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker' }", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names\n\n### Response:", "answer": " \n const secretidentities = {\n    \"Superman\": \"Clark Kent\",\n    \"Batman\": \"Bruce Wayne\",\n    \"Spider-Man\": \"Peter Parker\"\n};", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "const secretidentities = {\n    \"Superman\": \"Clark Kent\",\n    \"Batman\": \"Bruce Wayne\",\n    \"Spider-Man\": \"Peter Parker\"\n};", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence\n\n### Response:", "answer": "  def fib(n):\n    if n <= 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n <= 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 1, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 2, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 8, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence\n\n### Response:", "answer": "  function fib(n){\n    if (n <= 1) return 1;\n    else return fib(n-2) + fib(n-1);\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function fib(n){\n    if (n <= 1) return 1;\n    else return fib(n-2) + fib(n-1);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 1, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 2, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 8, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence\n\n### Response:", "answer": "  def potato(g):\n    if g < 1 or g > len(fib)-2:\n        return -1\n    else:\n        return fib[g-1]", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def potato(g):\n    if g < 1 or g > len(fib)-2:\n        return -1\n    else:\n        return fib[g-1]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": -1, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "name 'fib' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "name 'fib' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "name 'fib' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "name 'fib' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence\n\n### Response:", "answer": "  function potato(g){\n    var fib = [1,2], i=3;\n    \n    while(i<g+1){\n        if(fib[i-1] <= g && g > fib[i]){\n            return fib[i];\n        }else {\n            i++;\n        }\n    }\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function potato(g){\n    var fib = [1,2], i=3;\n    \n    while(i<g+1){\n        if(fib[i-1] <= g && g > fib[i]){\n            return fib[i];\n        }else {\n            i++;\n        }\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence\n\n### Response:", "answer": "  def fib(n):\n    if n <= 1:\n        return [0]\n    \n    else:\n        a = 0\n        b = 1\n        \n        for i in range(2, n+1):\n            c = a + b\n            \n            a,b = b,c\n            \n        return [a] + [b] + [c] + [fib(i) for i in range(n-3)]", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n <= 1:\n        return [0]\n    \n    else:\n        a = 0\n        b = 1\n        \n        for i in range(2, n+1):\n            c = a + b\n            \n            a,b = b,c\n            \n        return [a] + [b] + [c] + [fib(i) for i in range(n-3)]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 1, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 2, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [3, 5, 5, [0], [0]], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence\n\n### Response:", "answer": "  function fib(n){\n    var arr = [0], result;\n    \n    for (var i=1; i<=n; i++) {\n        result = arr[i-2] + arr[i-1];\n        arr.push(result);\n    }\n    \n    return arr;\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function fib(n){\n    var arr = [0], result;\n    \n    for (var i=1; i<=n; i++) {\n        result = arr[i-2] + arr[i-1];\n        arr.push(result);\n    }\n    \n    return arr;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, null], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, null, null], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, null, null, null], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, null, null, null, null, null], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```python and end with ```.\n\n### User:\nWrite a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence\n\n### Response:", "answer": "  def glork(bork):\n    if bork < 2:\n        return [1] * bork\n    \n    else:\n        a = 0\n        b = 1\n        \n        for i in range(bork - 1):\n            c = a + b\n            \n            a, b = b, c\n            \n        return [a] + [b] + [c] + ...", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if bork < 2:\n        return [1] * bork\n    \n    else:\n        a = 0\n        b = 1\n        \n        for i in range(bork - 1):\n            c = a + b\n            \n            a, b = b, c\n            \n        return [a] + [b] + [c] + ...", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "can only concatenate list (not \"ellipsis\") to list", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "can only concatenate list (not \"ellipsis\") to list", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "can only concatenate list (not \"ellipsis\") to list", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "### System:\nYou are an AI assistant that follows instruction extremely well. Write simple, concise code that does not rely on any library functions.  Code must start with ```javascript and end with ```.\n\n### User:\nWrite a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence\n\n### Response:", "answer": "  function glork(bork) {\n    var fib = [],\n        i;\n    \n    for (i = 0; i < bork; i++) {\n      fib.push(Math.sqrt(5) * Math.cos((2 * i + 1) / 4));\n    }\n    \n    return fib;\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 0,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "psmathur-orca_mini_v3_7b-fp16", "runtime": "transformers", "code": "function glork(bork) {\n    var fib = [],\n        i;\n    \n    for (i = 0; i < bork; i++) {\n      fib.push(Math.sqrt(5) * Math.cos((2 * i + 1) / 4));\n    }\n    \n    return fib;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [2.1665540391889446], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [2.1665540391889446, 1.6361060491817936], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [2.1665540391889446, 1.6361060491817936, 0.7050822371416442], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [2.1665540391889446, 1.6361060491817936, 0.7050822371416442, -0.39857029715347475, -1.4046389220803512], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}