{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a python function with no inputs that returns a single integer, the answer to life the universe and everything\ndef meaning_of_life():", "answer": "def meaning_of_life():\n    return 42\n\n\nprint(meaning_of_life())\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42\n\n\nprint(meaning_of_life())", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "// a javascript function with no inputs that returns a single integer, the answer to life the universe and everything\nfunction meaning_of_life() {", "answer": "\nfunction meaning_of_life() {\n    return 42;\n  }\n  \n  // a recursive Javascript function which takes an input n (default value is 1) and adds it to itself until it reaches 100. \n  // The function returns the sum of all numbers from 1 to 100 inclusive.\n  function addTogether(n = 1){\n      if (n == 100){\n          return 100;\n      } else{\n          return n + addTogether(n+1);\n      }\n  };\n\n  /* A class for performing basic arithmetic operations */\n  class Calculator {\n\n    constructor(){\n        this._operand01 = null;\n        this._operand02 = null;\n        this._operation = null;\n    }\n  \n    setOperand01(value) {\n        if (!isNaN(parseFloat(value)) && isFinite(value)){\n            this._operand01 = parseFloat(value); \n        }else{\n            throw new Error(\"Invalid operand\");\n        } \n    }\n    \n    get operand01() {\n        return this._operand01;\n    }\n    \n    setOperand02(value) {\n        if(!isNaN(parseFloat(value)) && isFinite(value)){\n            this._operand02 = parseFloat(value);  \n        }else{\n            throw new Error(\"Invalid operand\");\n        }  \n    }\n    \n    get operand02() {\n        return this._operand02;\n    }\n    \n    setOperation(symbol) {\n        switch(symbol){\n            case \"+\":\n                this._operation = \"add\"; \n                break; \n            case \"-\":\n                this._operation = \"subtract\";  \n                break;  \n            case \"*\":\n                this._operation = \"multiply\";   \n                break;    \n            case \"/\":\n                this._operation = \"divide\";     \n                break;      \n            default:\n                throw new Error(\"Invalid operation symbol\");    \n        }   \n    }\n    \n    get operation() {\n        return this._operation;\n    }\n    \n    performCalculation(){\n        let result = NaN;\n        \n        switch(this._operation){\n            case 'add':\n               result = this._operand01 + this._operand02; \n               break; \n            case 'subtract':\n               result = this._operand01 - this._operand02; \n               break;  \n            case 'multiply':\n               result = this._operand01 * this._operand02; \n               break;       \n            case 'divide':\n               if (this._operand02 === 0){\n                   throw new Error('Division by", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n    return 42;\n  }\n  \n  // a recursive Javascript function which takes an input n (default value is 1) and adds it to itself until it reaches 100. \n  // The function returns the sum of all numbers from 1 to 100 inclusive.\n  function addTogether(n = 1){\n      if (n == 100){\n          return 100;\n      } else{\n          return n + addTogether(n+1);\n      }\n  };\n\n  /* A class for performing basic arithmetic operations */\n  class Calculator {\n\n    constructor(){\n        this._operand01 = null;\n        this._operand02 = null;\n        this._operation = null;\n    }\n  \n    setOperand01(value) {\n        if (!isNaN(parseFloat(value)) && isFinite(value)){\n            this._operand01 = parseFloat(value); \n        }else{\n            throw new Error(\"Invalid operand\");\n        } \n    }\n    \n    get operand01() {\n        return this._operand01;\n    }\n    \n    setOperand02(value) {\n        if(!isNaN(parseFloat(value)) && isFinite(value)){\n            this._operand02 = parseFloat(value);  \n        }else{\n            throw new Error(\"Invalid operand\");\n        }  \n    }\n    \n    get operand02() {\n        return this._operand02;\n    }\n    \n    setOperation(symbol) {\n        switch(symbol){\n            case \"+\":\n                this._operation = \"add\"; \n                break; \n            case \"-\":\n                this._operation = \"subtract\";  \n                break;  \n            case \"*\":\n                this._operation = \"multiply\";   \n                break;    \n            case \"/\":\n                this._operation = \"divide\";     \n                break;      \n            default:\n                throw new Error(\"Invalid operation symbol\");    \n        }   \n    }\n    \n    get operation() {\n        return this._operation;\n    }\n    \n    performCalculation(){\n        let result = NaN;\n        \n        switch(this._operation){\n            case 'add':\n               result = this._operand01 + this._operand02; \n               break; \n            case 'subtract':\n               result = this._operand01 - this._operand02; \n               break;  \n            case 'multiply':\n               result = this._operand01 * this._operand02; \n               break;       \n            case 'divide':\n               if (this._operand02 === 0){\n                   throw new Error('Division by", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": {"error": "Invalid or unexpected token", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a python function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain\ndef things():", "answer": "def things():\n    return [5,'foobar','Madrid']\n\n\nprint(things()) # should print '[5, \\'foobar\\', \\'Madrid\\']'\n\n\n#\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def things():\n    return [5,'foobar','Madrid']\n\n\nprint(things()) # should print '[5, \\'foobar\\', \\'Madrid\\']'\n\n\n#", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "// a javascript function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain\nfunction things() {", "answer": "\nfunction things() {\n    return [5, \"foobar\", \"Madrid\"];\n  }\n  \n  // call your function and save its result in a variable called `result`\n  const result = things();\n\n  console.log(result);", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function things() {\n    return [5, \"foobar\", \"Madrid\"];\n  }\n  \n  // call your function and save its result in a variable called result\n  const result = things();\n\n  console.log(result);", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a python function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names\ndef secretidentities():", "answer": "def secretidentities():\n    return {\n        \"Superman\": \"<NAME>\", \n        \"Batman\": \"<NAME>\", \n        \"Spider-Man\":\"Peter Parker\"\n    }\n\n\nsecret_identity = secretidentities() # calling our function gives us back a dictionary of all three heroes mapped to their respective real name.\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def secretidentities():\n    return {\n        \"Superman\": \"<NAME>\", \n        \"Batman\": \"<NAME>\", \n        \"Spider-Man\":\"Peter Parker\"\n    }\n\n\nsecret_identity = secretidentities() # calling our function gives us back a dictionary of all three heroes mapped to their respective real name.", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "<NAME>", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "<NAME>", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "FAIL", "passed": 3, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "// a javascript function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names\nfunction secretidentities() {", "answer": "\nfunction secretidentities() {\n    return {\"Superman\":\"Clark Kent\", \"Batman\":\"Tony Stark\",\"Spider-Man\":\"Peter Parker\"};\n  }", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function secretidentities() {\n    return {\"Superman\":\"Clark Kent\", \"Batman\":\"Tony Stark\",\"Spider-Man\":\"Peter Parker\"};\n  }", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Tony Stark", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a python function with two inputs a and b that returns the greatest common denominator of a and b\ndef gcd(a, b):", "answer": "def gcd(a, b):\n    # if one of them is 0 then return the other number as GCD\n    if (a == 0 or b==0):\n        return max(abs(a), abs(b))\n\n    while True:\n\n        remainder = a % b\n\n        # if remainder becomes zero then B is the answer\n        if remainder == 0 :\n            return b\n        \n        else:\n\n            # reassign A to be equal to B \n            a=b\n            \n            # assign B to be the remainder\n            b=remainder\n\n\nprint(\"The greatest common divisor for 128456 and 93754 is:\",gcd(128456, 93754))\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    # if one of them is 0 then return the other number as GCD\n    if (a == 0 or b==0):\n        return max(abs(a), abs(b))\n\n    while True:\n\n        remainder = a % b\n\n        # if remainder becomes zero then B is the answer\n        if remainder == 0 :\n            return b\n        \n        else:\n\n            # reassign A to be equal to B \n            a=b\n            \n            # assign B to be the remainder\n            b=remainder\n\n\nprint(\"The greatest common divisor for 128456 and 93754 is:\",gcd(128456, 93754))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "// a javascript function with two inputs a and b that returns the greatest common denominator of a and b\nfunction gcd(a, b) {", "answer": "\nfunction gcd(a, b) {\n    if (b == 0){\n        return a;\n    } else{\n        return gcd(b, a % b); // recursive call using new values for a and b\n    }\n}", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n    if (b == 0){\n        return a;\n    } else{\n        return gcd(b, a % b); // recursive call using new values for a and b\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "# a python function with two inputs a and b that returns the greatest common factor of a and b\ndef gcf(a, b):", "answer": "def gcf(a, b):\n    if (b == 0):\n        return a;\n    else:\n        return gcf(b, a % b);\n\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n    if (b == 0):\n        return a;\n    else:\n        return gcf(b, a % b);", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "// a javascript function with two inputs a and b that returns the greatest common factor of a and b\nfunction gcf(a, b) {", "answer": "\nfunction gcf(a, b) {\n    if (b == 0){\n        return a;\n    } else{\n        return gcf(b, a % b);\n    };\n};\n\n\n/*\n* A recursive solution to find the least common multiple. This is more efficient than the above iterative solution because we are making fewer multiplications.\n*/\nfunction lcm_recursive(x, y) {\n  // Base case: one of the numbers is zero\n  if (!x || !y) {\n      return 0;\n  }\n\n  // Apply the general formula for LCM:\n  // lcm(a, b) = |a * b| / GCF(a, b)\n  var z = x * y;\n  return z / gcf(x, y);\n}", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function gcf(a, b) {\n    if (b == 0){\n        return a;\n    } else{\n        return gcf(b, a % b);\n    };\n};\n\n\n/*\n* A recursive solution to find the least common multiple. This is more efficient than the above iterative solution because we are making fewer multiplications.\n*/\nfunction lcm_recursive(x, y) {\n  // Base case: one of the numbers is zero\n  if (!x || !y) {\n      return 0;\n  }\n\n  // Apply the general formula for LCM:\n  // lcm(a, b) = |a * b| / GCF(a, b)\n  var z = x * y;\n  return z / gcf(x, y);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a python function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\ndef fofx(x, banana):", "answer": "def fofx(x, banana):\n    if x == 0:\n        return banana\n\n    else:\n        # recursive call to our function using // as integer division \n        return fofx(banana % x, x)\n\n\nprint(\"The GCD is\", fofx(128, 64))\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n    if x == 0:\n        return banana\n\n    else:\n        # recursive call to our function using // as integer division \n        return fofx(banana % x, x)\n\n\nprint(\"The GCD is\", fofx(128, 64))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "// a javascript function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\nfunction fofx(x, banana) {\n    // if both numbers are even then return 2 times the result of calling this same function on half of each number\n    if ((banana % 2 === 0 && x % 2 === 0))\n        return 2 * fofx(Math.floor(x / 2), Math.floor(banana / 2));\n\n    // else if only one is odd then call this same function on (one-half of) either number \n    else if (!(banana % 2 === 0 || x % 2 === 0))\n        return fofx((Math.ceil(x / 2)), (Math.ceil(banana / 2)));\n\n    // else subtract the smaller from larger until you can no longer do it and return the difference between original values\n    else \n        return (x - banana);\n}", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n    // if both numbers are even then return 2 times the result of calling this same function on half of each number\n    if ((banana % 2 === 0 && x % 2 === 0))\n        return 2 * fofx(Math.floor(x / 2), Math.floor(banana / 2));\n\n    // else if only one is odd then call this same function on (one-half of) either number \n    else if (!(banana % 2 === 0 || x % 2 === 0))\n        return fofx((Math.ceil(x / 2)), (Math.ceil(banana / 2)));\n\n    // else subtract the smaller from larger until you can no longer do it and return the difference between original values\n    else \n        return (x - banana);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": -3, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 3, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 6, "total": 9}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a python function with input n that returns the factorial of n using iteration\ndef factorial(n):", "answer": "def factorial(n):\n    result = 1 # intitialize!\n    for i in range (1, n+1):\n        print(\"i is: \", i)\n        result *= i\n\n    return result\n\n\nprint (\"5!=\", factorial(5))\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def factorial(n):\n    result = 1 # intitialize!\n    for i in range (1, n+1):\n        print(\"i is: \", i)\n        result *= i\n\n    return result\n\n\nprint (\"5!=\", factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "// a javascript function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\nfunction factorial(n) {\n  let result = 1;\n\n  for (let i = 2; i <= n; ++i)\n    result *= i;\n  \n  return result;\n}", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  let result = 1;\n\n  for (let i = 2; i <= n; ++i)\n    result *= i;\n  \n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a python function with input n that returns the factorial of n using recursion\ndef factorial(n):", "answer": "def factorial(n):\n    if (n == 0 or n==1):\n        return 1;\n    else: \n        return n * factorial(n-1)\n\n\nprint(\"The value of facotrial for number 5 is \",factorial(5))\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if (n == 0 or n==1):\n        return 1;\n    else: \n        return n * factorial(n-1)\n\n\nprint(\"The value of facotrial for number 5 is \",factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "// a javascript function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\nfunction factorial(n) {\n  if (n === 0 || n === 1) return 1;\n\n  // otherwise, call the same function again but pass in `n-1` this time\n  return n * factorial(n - 1);\n}", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  if (n === 0 || n === 1) return 1;\n\n  // otherwise, call the same function again but pass in n-1 this time\n  return n * factorial(n - 1);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a python function with input bork that returns the factorial of bork\ndef glork(bork):", "answer": "def glork(bork):\n    if type(bork) == int:\n        return 1 if (bork <=0 ) else reduce((lambda x,y : x*y), range(2,bork+1)) \n    elif type(bork) in [str, float]: \n        raise TypeError(\"I don't like your data type\")\n    else:\n        print \"hey i'm cool\"\n        \n    \n\n\nprint glork.__doc__\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if type(bork) == int:\n        return 1 if (bork <=0 ) else reduce((lambda x,y : x*y), range(2,bork+1)) \n    elif type(bork) in [str, float]: \n        raise TypeError(\"I don't like your data type\")\n    else:\n        print \"hey i'm cool\"\n        \n    \n\n\nprint glork.__doc__", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "Missing parentheses in call to 'print'. Did you mean print(\"hey i'm cool\")? (<string>, line 7)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "Missing parentheses in call to 'print'. Did you mean print(\"hey i'm cool\")? (<string>, line 7)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "// a javascript function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\nfunction glork(bork) {\n  let result = 1;\n\n  for (let i = 2; i <= bork; ++i)\n    result *= i;\n  \n  return result;\n}", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  let result = 1;\n\n  for (let i = 2; i <= bork; ++i)\n    result *= i;\n  \n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a python function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence\ndef fib(n):", "answer": "def fib(n):\n    if n == 1 or n==2:\n        return 1\n    else: \n        return fib(n-1)+fib(n-2)\n\n\nprint(\"The first 5 Fibonacci numbers are:\")\nfor i in range(1,6): # note we start at 1 and end at 5!\n    print(f\"{i}: {fib(i)}\")\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 1 or n==2:\n        return 1\n    else: \n        return fib(n-1)+fib(n-2)\n\n\nprint(\"The first 5 Fibonacci numbers are:\")\nfor i in range(1,6): # note we start at 1 and end at 5!\n    print(f\"{i}: {fib(i)}\")", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "maximum recursion depth exceeded in comparison", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "// a javascript function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence\nfunction fib(n) {", "answer": "\nfunction fib(n) {\n    if ([1, 2].includes(n)) return [0, 1][n];\n\n    let arr = [0, 1]\n    \n    for (let i=2;i<=n;i++)\n        arr.push(arr[i-1]+arr[i-2])\n        \n    return arr[n]\n    \n}", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function fib(n) {\n    if ([1, 2].includes(n)) return [0, 1][n];\n\n    let arr = [0, 1]\n    \n    for (let i=2;i<=n;i++)\n        arr.push(arr[i-1]+arr[i-2])\n        \n    return arr[n]\n    \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a python function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence\ndef potato(g):", "answer": "def potato(g):\n    if g == 1:\n        return [1]\n\n    elif g > 2 and len(potato(g-1)) >= 3: # this is to avoid an infinite loop when calling for n = 4,5...\n        return [sum(potato(g - 1)[i:(i + 2)]) for i in range((len(potato(g - 1))))][:-1]\n    \n    else: \n        return [fib_seq[i+1]+fib_seq[i] for i in range(g)]\n\n\nif __name__==\"__main__\":\n    print(\"Enter the value of N:\")\n    n=int(input())\n    print(\"\\nThe {} term of Fibonacci Sequence is {}\".format(n,fibonacci(n)))\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def potato(g):\n    if g == 1:\n        return [1]\n\n    elif g > 2 and len(potato(g-1)) >= 3: # this is to avoid an infinite loop when calling for n = 4,5...\n        return [sum(potato(g - 1)[i:(i + 2)]) for i in range((len(potato(g - 1))))][:-1]\n    \n    else: \n        return [fib_seq[i+1]+fib_seq[i] for i in range(g)]\n\n\nif __name__==\"__main__\":\n    print(\"Enter the value of N:\")\n    n=int(input())\n    print(\"\\nThe {} term of Fibonacci Sequence is {}\".format(n,fibonacci(n)))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "// a javascript function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence\nfunction potato(g) {", "answer": "\nfunction potato(g) {\n    // base cases: 1st and 2nd elements are always 1, so return those.\n    if (g === 0 || g === 1){\n        return [1]; \n    } else{ \n        var arr = [];\n        for (var i=0;i<=g+1;i++){\n            if ((arr[i-1] + arr[i - 2]) > Number.MAX_SAFE_INTEGER ){\n                break; \n            }else{ \n                arr.push((arr[i-1]+arr[i-2]));  \n            };  \n        }; \n        console.log(\"array is \" , arr);\n        return arr[g];  \n    };  \n};", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function potato(g) {\n    // base cases: 1st and 2nd elements are always 1, so return those.\n    if (g === 0 || g === 1){\n        return [1]; \n    } else{ \n        var arr = [];\n        for (var i=0;i<=g+1;i++){\n            if ((arr[i-1] + arr[i - 2]) > Number.MAX_SAFE_INTEGER ){\n                break; \n            }else{ \n                arr.push((arr[i-1]+arr[i-2]));  \n            };  \n        }; \n        console.log(\"array is \" , arr);\n        return arr[g];  \n    };  \n};", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": [1], "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": null, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": null, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": null, "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a python function with input length n that returns a list with the first `n` elements of the fibonacci sequence\ndef fib(n):", "answer": "def fib(n):\n    if (n == 0 or n == 1):\n        return [x for x in range(n)]\n\n    # initialize variables to store the values from each step of the iteration\n    prev = 0 \n    curr = 1 \n\n    # create an empty array to hold all the values generated by our loop below.\n    result_arr = []\n    \n    while len(result_arr) < n:\n\n        # append current value to results arr, then set previous and current vars equal to their respective sums\n        result_arr += [curr] \n        temp = curr + prev\n        prev = curr\n        curr = temp\n        \n    return result_arr\n\n\nprint(\"fib(5)\")\nprint(fib(5))\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def fib(n):\n    if (n == 0 or n == 1):\n        return [x for x in range(n)]\n\n    # initialize variables to store the values from each step of the iteration\n    prev = 0 \n    curr = 1 \n\n    # create an empty array to hold all the values generated by our loop below.\n    result_arr = []\n    \n    while len(result_arr) < n:\n\n        # append current value to results arr, then set previous and current vars equal to their respective sums\n        result_arr += [curr] \n        temp = curr + prev\n        prev = curr\n        curr = temp\n        \n    return result_arr\n\n\nprint(\"fib(5)\")\nprint(fib(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "// a javascript function with input length n that returns a list with the first `n` elements of the fibonacci sequence\nfunction fib(n) {", "answer": "\nfunction fib(n) {\n  if (n <= 0 || !Number.isInteger(n)) return [];\n\n  let seq = [1, 2]; // seed values for the sequence\n  \n  while (seq[seq.length - 1] < n){\n    const next_number = seq[seq.length - 1] + seq[seq.length - 2]; \n    seq.push(next_number); \n  }\n\n  return seq;\n}", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n <= 0 || !Number.isInteger(n)) return [];\n\n  let seq = [1, 2]; // seed values for the sequence\n  \n  while (seq[seq.length - 1] < n){\n    const next_number = seq[seq.length - 1] + seq[seq.length - 2]; \n    seq.push(next_number); \n  }\n\n  return seq;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1, 2], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 2], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 2, 3], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "# a python function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence\ndef glork(bork):", "answer": "def glork(bork):\n    # initialize variables to store our values from the previous iteration (a and b) as well as the current one (c). \n    c = 1\n    a, b = 0, 1\n\n    # create an empty array. we'll fill it up in the loop below.\n    arr = []\n    \n    for i in range(bork + 2):\n        if len(arr) == 3:\n            break\n\n        elif len(arr) < 3 or i % 4 != 0: \n            c += a + b\n            a, b = b, c\n        \n        else:\n            continue\n    \n        arr.append(c)\n        \n    return arr\n\n\nprint(glork(5))\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def glork(bork):\n    # initialize variables to store our values from the previous iteration (a and b) as well as the current one (c). \n    c = 1\n    a, b = 0, 1\n\n    # create an empty array. we'll fill it up in the loop below.\n    arr = []\n    \n    for i in range(bork + 2):\n        if len(arr) == 3:\n            break\n\n        elif len(arr) < 3 or i % 4 != 0: \n            c += a + b\n            a, b = b, c\n        \n        else:\n            continue\n    \n        arr.append(c)\n        \n    return arr\n\n\nprint(glork(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [2, 5, 12], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [2, 5, 12], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [2, 5, 12], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [2, 5, 12], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "// a javascript function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence\nfunction glork(bork) {", "answer": "\nfunction glork(bork) {\n  let arr = [0, 1];\n\n  for (let i = 2; i < bork + 1; ++i)\n    arr.push(arr[i - 2] + arr[i - 1]);\n  \n  return arr;\n}", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  let arr = [0, 1];\n\n  for (let i = 2; i < bork + 1; ++i)\n    arr.push(arr[i - 2] + arr[i - 1]);\n  \n  return arr;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a python function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\ndef substrcount(str, substr):", "answer": "def substrcount(str, substr):\n    count = 0 # initialize counter to zero\n    \n    if len(str) == 1:\n        return int(str==substr)\n\n    for i in range(len(str)):\n        \n        if str[i] != substr[0]:\n            continue\n\n        flag = True \n        j=1\n        while (j < len(substr)) & flag:\n            \n            if ((i+j)<=(len(str)-1)) :\n                if str[i+j]==substr[j]:\n                    j+=1 \n                else: \n                    flag = False \n            else: \n                flag = False \n                \n        if flag: \n            count += 1\n            \n    return count\n\n\nprint(\"The number of occurrences is:\", substrcount('banana', 'na'))\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    count = 0 # initialize counter to zero\n    \n    if len(str) == 1:\n        return int(str==substr)\n\n    for i in range(len(str)):\n        \n        if str[i] != substr[0]:\n            continue\n\n        flag = True \n        j=1\n        while (j < len(substr)) & flag:\n            \n            if ((i+j)<=(len(str)-1)) :\n                if str[i+j]==substr[j]:\n                    j+=1 \n                else: \n                    flag = False \n            else: \n                flag = False \n                \n        if flag: \n            count += 1\n            \n    return count\n\n\nprint(\"The number of occurrences is:\", substrcount('banana', 'na'))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "// a javascript function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\nfunction substrcount(str, substr) {", "answer": "\nfunction substrcount(str, substr) {\n  // initialize count to 0\n  let count = 0;\n\n  // use regex findall method on str to get all matches of substr within str \n  const matches = [...str.matchAll(new RegExp(`${substr}`, 'g'))];\n  \n  // iterate over each match found using forEach\n  matches.forEach((m) => {\n    // increment count by 1 \n    count += 1;\n  });\n\n  return count;\n}", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 70000,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1\n}\n", "model": "WisdomShell-CodeShell-7B-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n  // initialize count to 0\n  let count = 0;\n\n  // use regex findall method on str to get all matches of substr within str \n  const matches = [...str.matchAll(new RegExp(${substr}, 'g'))];\n  \n  // iterate over each match found using forEach\n  matches.forEach((m) => {\n    // increment count by 1 \n    count += 1;\n  });\n\n  return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": {"error": "missing ) after argument list", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": {"error": "missing ) after argument list", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": {"error": "missing ) after argument list", "exc_type": "SyntaxError"}, "status": 0}], "status": "FAIL", "passed": 4, "total": 7}