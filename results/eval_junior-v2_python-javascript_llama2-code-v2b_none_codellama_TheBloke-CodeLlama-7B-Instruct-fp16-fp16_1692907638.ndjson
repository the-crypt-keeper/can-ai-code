{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything. [/INST]", "answer": "```\ndef meaning_of_life():\n    return 42\n```\nThis function returns the integer 42, which is the answer to the ultimate question of life, the universe, and everything.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything. [/INST]", "answer": "```\nfunction meaning_of_life() {\n  return 42;\n}\n```", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain. [/INST]", "answer": "```\ndef things():\n    return [5, 'foobar', 'Madrid']\n```\nExplanation:\n\n* The function `things()` takes no input arguments.\n* It returns a list with three elements:\n\t1. The number 5.\n\t2. The string 'foobar'.\n\t3. The capital city of Spain, which is 'Madrid'.\n\nNote: The capital city of Spain is a string, not a variable, so it is enclosed in single quotes.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def things():\n    return [5, 'foobar', 'Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain. [/INST]", "answer": "```\nfunction things() {\n  return [5, 'foobar', 'Madrid'];\n}\n```\nThis function returns an array with three elements: 5, 'foobar', and 'Madrid'.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function things() {\n  return [5, 'foobar', 'Madrid'];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names. [/INST]", "answer": "```\ndef secretidentities():\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    }\n```\nThis function returns a dictionary with the superheroes as keys and their real names as values.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def secretidentities():\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    }", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names. [/INST]", "answer": "```\nfunction secretIdentities() {\n  return {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    Spider-Man: \"Peter Parker\"\n  };\n}\n```", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function secretIdentities() {\n  return {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    Spider-Man: \"Peter Parker\"\n  };\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretIdentities", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b. [/INST]", "answer": "```\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n```\nThis function uses the Euclidean algorithm to compute the greatest common divisor of two numbers. It recursively calls itself with the smaller number as the first argument and the remainder of the division of the first number by the second number as the second argument, until the second number is 0, at which point the function returns the first number.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b. [/INST]", "answer": "```\nfunction gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n```\nThis function uses the Euclidean algorithm to compute the greatest common divisor of two numbers. It works by repeatedly subtracting the smaller number from the larger number until the smaller number is 0, at which point the larger number is the greatest common divisor.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b. [/INST]", "answer": "```\ndef gcf(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcf(b % a, a)\n```\nThis function uses the Euclidean algorithm to find the greatest common factor of two numbers. It works by repeatedly subtracting the smaller number from the larger number until the smaller number is 0, at which point the larger number is the greatest common factor.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcf(b % a, a)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b. [/INST]", "answer": "```\nfunction gcf(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcf(b, a % b);\n}\n```\nThis function uses a recursive approach to find the greatest common factor of two numbers. It works by repeatedly dividing the larger number by the smaller number until the smaller number is 0, at which point the larger number is the greatest common factor.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function gcf(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcf(b, a % b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana. [/INST]", "answer": "```\ndef fofx(x, banana):\n    return gcd(x, banana)\n```\nHere, `gcd` is a built-in function in Python that returns the greatest common divisor of two numbers. In this case, it returns the gcd of `x` and `banana`.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n    return gcd(x, banana)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "name 'gcd' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana. [/INST]", "answer": "```\nfunction gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n\nfunction fofx(x, banana) {\n  return gcd(x, banana);\n}\n```\nThis function takes two inputs, x and banana, and returns the greatest common denominator (gcd) of x and banana using the Euclidean algorithm.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n\nfunction fofx(x, banana) {\n  return gcd(x, banana);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "a", "status": 0}, {"assert": "f.args[1].name", "eq": "banana", "got": "b", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 6, "total": 9}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function factorial(n) with input n that returns the factorial of n using iteration. [/INST]", "answer": "```\ndef factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n```\nThis function uses iteration to calculate the factorial of a given number. It starts with the result being 1 and then iterates through the numbers from 1 to n, multiplying the result by each number. The function returns the final result, which is the factorial of n.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function factorial(n) with input n that returns the factorial of n using iteration. [/INST]", "answer": "```\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n```\nThis function uses a for loop to iterate from 1 to n and calculates the factorial of n by multiplying the current value of i with the result variable. The function returns the final value of result, which is the factorial of n.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function factorial(n) with input n that returns the factorial of n using recursion. [/INST]", "answer": "```\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\nThis function uses recursion to calculate the factorial of a given number. It takes in a single argument `n` and returns the factorial of `n`. The function uses a base case of `n == 0`, where the factorial is defined to be 1. For all other values of `n`, the function calls itself with `n-1` as the argument, and multiplies the result by `n` to get the final factorial.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function factorial(n) with input n that returns the factorial of n using recursion. [/INST]", "answer": "```\nfunction factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n```\nThis function uses recursion to calculate the factorial of a given number. It takes in a single argument `n` and returns the factorial of `n`. The function first checks if `n` is equal to 0, in which case the factorial is defined to be 1. Otherwise, it calculates the factorial of `n - 1` using the same function and then multiplies it by `n` to get the final result.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function glork(bork) with input bork that returns the factorial of bork. [/INST]", "answer": "```\ndef glork(bork):\n    result = 1\n    for i in range(1, bork+1):\n        result *= i\n    return result\n```\nThis function takes in a single argument `bork` and returns the factorial of that number. It uses a loop to calculate the factorial by multiplying `i` by `result` for each value of `i` from 1 to `bork`. The final result is returned at the end of the function.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def glork(bork):\n    result = 1\n    for i in range(1, bork+1):\n        result *= i\n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function glork(bork) with input bork that returns the factorial of bork. [/INST]", "answer": "```\nfunction glork(bork) {\n  let result = 1;\n  for (let i = 2; i <= bork; i++) {\n    result *= i;\n  }\n  return result;\n}\n```\nThis function takes a single argument `bork` and returns the factorial of that number. The function uses a `for` loop to calculate the factorial, starting from 2 and multiplying the result by each subsequent number until the input `bork` is reached. The final result is returned as the output of the function.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  let result = 1;\n  for (let i = 2; i <= bork; i++) {\n    result *= i;\n  }\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence. [/INST]", "answer": "```\ndef fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n```\nThis function uses a recursive approach to calculate the `n`-th element of the Fibonacci sequence. It checks if `n` is less than or equal to 1, in which case it returns `n` directly. Otherwise, it calls itself twice with `n-1` and `n-2` as arguments, and returns the sum of the two results. This process continues until the base case is reached, which is when `n` is 0 or 1, in which case the function returns 0 or 1 directly.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence. [/INST]", "answer": "```\nfunction fib(n) {\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n-1) + fib(n-2);\n}\n```\nThis function uses a recursive approach to calculate the `n`-th element of the Fibonacci sequence. It checks if `n` is less than or equal to 1, in which case it returns `n` directly. Otherwise, it calls itself twice with `n-1` and `n-2` as arguments, and returns the sum of the two results. This process continues until the base case is reached, where `n` is 0 or 1, and the function returns the corresponding value.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n-1) + fib(n-2);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence. [/INST]", "answer": "```\ndef potato(g):\n    a, b = 0, 1\n    for _ in range(g):\n        a, b = b, a + b\n    return a\n```\nThis function uses a loop to iterate `g` times, adding the previous two elements of the Fibonacci sequence to get the next element. The function returns the `g`-th element of the Fibonacci sequence.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def potato(g):\n    a, b = 0, 1\n    for _ in range(g):\n        a, b = b, a + b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence. [/INST]", "answer": "```\nfunction potato(g) {\n  let fib = [0, 1];\n  for (let i = 2; i <= g; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib[g];\n}\n```\nThis function uses a loop to generate the Fibonacci sequence up to the `g`-th element, and then returns that element. The `fib` array is initialized with the first two elements of the sequence, and then each subsequent element is calculated by adding the previous two elements.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function potato(g) {\n  let fib = [0, 1];\n  for (let i = 2; i <= g; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib[g];\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence. [/INST]", "answer": "```\ndef fib(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    else:\n        result = [0, 1]\n        for i in range(2, n):\n            result.append(result[i-1] + result[i-2])\n        return result\n```\nThis function uses a recursive approach to calculate the first `n` elements of the Fibonacci sequence. It starts by checking if `n` is 0 or 1, in which case it returns a list with the corresponding single element. Otherwise, it creates an empty list `result` and iterates over the range of `n` elements, adding the previous two elements of the sequence to the list and returning it.\n\nFor example, if `n` is 5, the function will return `[0, 1, 1, 2, 3, 5]`.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    else:\n        result = [0, 1]\n        for i in range(2, n):\n            result.append(result[i-1] + result[i-2])\n        return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence. [/INST]", "answer": "```\nfunction fib(n) {\n  let fibList = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fibList.push(fibList[i - 1] + fibList[i - 2]);\n  }\n  return fibList.slice(0, n);\n}\n```\nThis function uses a loop to generate the first `n` elements of the Fibonacci sequence, starting from `fibList[0] = 0` and `fibList[1] = 1`. The loop iterates `n - 2` times, and each iteration adds the previous two elements of the list to get the next element. The function then returns the first `n` elements of the list using the `slice()` method.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function fib(n) {\n  let fibList = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fibList.push(fibList[i - 1] + fibList[i - 2]);\n  }\n  return fibList.slice(0, n);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence. [/INST]", "answer": "```\ndef glork(bork):\n    fib = [0, 1]\n    for i in range(bork):\n        fib.append(fib[-1] + fib[-2])\n    return fib[:bork]\n```\nThis function uses a list to store the Fibonacci sequence, and appends the next number to the list in each iteration of the loop. The function then returns the first `bork` elements of the list.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def glork(bork):\n    fib = [0, 1]\n    for i in range(bork):\n        fib.append(fib[-1] + fib[-2])\n    return fib[:bork]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence. [/INST]", "answer": "```\nfunction glork(bork) {\n  const fibonacci = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fibonacci.push(fibonacci[i - 1] + fibonacci[i - 2]);\n  }\n  return fibonacci;\n}\n```\nThis function uses a loop to generate the first `bork` elements of the Fibonacci sequence and returns them in a list. The `fibonacci` variable is initialized with the first two elements of the sequence, and each iteration of the loop adds the previous two elements to get the next element of the sequence. The function returns the list of `bork` elements.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  const fibonacci = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fibonacci.push(fibonacci[i - 1] + fibonacci[i - 2]);\n  }\n  return fibonacci;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 7, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "<s>[INST] <<SYS>>\nProvide answers in Python.  The code must start with ```python and end with ```.\n<</SYS>>\n\nWrite a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`. [/INST]", "answer": "```\ndef substrcount(str, substr):\n    return str.count(substr)\n```\nThis function uses the `count()` method of the `str` object to count the number of times the sub-string `substr` occurs in `str`. The `count()` method returns an integer indicating the number of times the sub-string is found.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    return str.count(substr)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "<s>[INST] <<SYS>>\nProvide answers in JavaScript.  The code must start with ```javascript and end with ```.\n<</SYS>>\n\nWrite a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`. [/INST]", "answer": "```\nfunction substrCount(str, substr) {\n  return str.split(substr).length - 1;\n}\n```\nExplanation:\n\n* The `split()` method is used to split the input string `str` into an array of substrings, where each substring is separated by the sub-string `substr`.\n* The `length` property of the resulting array is then used to determine the number of times the sub-string `substr` occurs in `str`.\n* The `- 1` is added to the result to account for the fact that the first element of the array is an empty string, which is not a valid occurrence of the sub-string `substr`.\n\nFor example, if `str` is \"hello world\" and `substr` is \"l\", the resulting array would be `[\"he\", \"o wor\", \"d\"]`, and the length of this array would be 3, so the function would return 3.", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 1,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "TheBloke-CodeLlama-7B-Instruct-fp16-fp16", "runtime": "transformers", "code": "function substrCount(str, substr) {\n  return str.split(substr).length - 1;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrCount", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}