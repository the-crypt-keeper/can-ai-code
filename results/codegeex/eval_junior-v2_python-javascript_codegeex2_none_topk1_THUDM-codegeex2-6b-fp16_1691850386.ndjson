{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# language: Python\n# write a function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.", "answer": "\n\n\ndef substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i : i + len(substr)] == substr:\n            count += 1\n    return count\n\n\nprint(substrcount(\"abcabcabc\", \"abc\"))\nprint(substrcount(\"abcabcabc\", \"abcd\"))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i : i + len(substr)] == substr:\n            count += 1\n    return count\n\n\nprint(substrcount(\"abcabcabc\", \"abc\"))\nprint(substrcount(\"abcabcabc\", \"abcd\"))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "// language: JavaScript\n// write a function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.", "answer": "\n\n// Example 1:\n\n// Input: str = \"aaa\", sub = \"a\"\n// Output: 3\n// Explanation: There are three \"a\"s in the string.\n// Example 2:\n\n// Input: str = \"aaa\", sub = \"b\"\n// Output: 0\n// Explanation: There are no \"b\"s in the string.\n// Example 3:\n\n// Input: str = \"abab\", sub = \"ab\"\n// Output: 2\n// Explanation: There are two \"ab\"s in the string.\n// Example 4:\n\n// Input: str = \"aaaaaaaaaaaaab\", sub = \"a\"\n// Output: 1\n// Explanation: There is one \"a\" at the very first index of the string.\n// Example 5:\n\n// Input: str = \"\", sub = \"a\"\n// Output: 0\n\n\n// The length of both `str` and `sub` will be at most 100.\n\n/**\n * @param {string} str\n * @param {string} sub\n * @return {number}\n */\nvar countSubstrings = function(str, sub) {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        let j = i;\n        let k = 0;\n        while (j < str.length && k < sub.length && str[j] === sub[k]) {\n            j++;\n            k++;\n            count++;\n        }\n    }\n    return count;\n};", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "// Example 1:\n\n// Input: str = \"aaa\", sub = \"a\"\n// Output: 3\n// Explanation: There are three \"a\"s in the string.\n// Example 2:\n\n// Input: str = \"aaa\", sub = \"b\"\n// Output: 0\n// Explanation: There are no \"b\"s in the string.\n// Example 3:\n\n// Input: str = \"abab\", sub = \"ab\"\n// Output: 2\n// Explanation: There are two \"ab\"s in the string.\n// Example 4:\n\n// Input: str = \"aaaaaaaaaaaaab\", sub = \"a\"\n// Output: 1\n// Explanation: There is one \"a\" at the very first index of the string.\n// Example 5:\n\n// Input: str = \"\", sub = \"a\"\n// Output: 0\n\n\n// The length of both `str` and `sub` will be at most 100.\n\n/**\n * @param {string} str\n * @param {string} sub\n * @return {number}\n */\nvar countSubstrings = function(str, sub) {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        let j = i;\n        let k = 0;\n        while (j < str.length && k < sub.length && str[j] === sub[k]) {\n            j++;\n            k++;\n            count++;\n        }\n    }\n    return count;\n};", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 7}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# language: Python\n# write a function factorial(n) with input n that returns the factorial of n using iteration.", "answer": "\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(factorial(5))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "// language: JavaScript\n// write a function factorial(n) with input n that returns the factorial of n using iteration.", "answer": "\n\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nconsole.log(factorial(5));\n// should print 120\nconsole.log(factorial(10));\n// should print 3628800", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nconsole.log(factorial(5));\n// should print 120\nconsole.log(factorial(10));\n// should print 3628800", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# language: Python\n# write a function factorial(n) with input n that returns the factorial of n using recursion.", "answer": "\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(factorial(5))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "// language: JavaScript\n// write a function factorial(n) with input n that returns the factorial of n using recursion.", "answer": "\n\nfunction factorial(n) {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5)); // should return 120", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5)); // should return 120", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# language: Python\n# write a function glork(bork) with input bork that returns the factorial of bork.", "answer": "\n\n\ndef glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n\n\nprint(glork(5))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n\n\nprint(glork(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "// language: JavaScript\n// write a function glork(bork) with input bork that returns the factorial of bork.", "answer": "\n\nfunction glork(bork) {\n  if (bork < 0) {\n    return \"bork bork bork\";\n  } else if (bork === 0) {\n    return 1;\n  } else {\n    return bork * glork(bork - 1);\n  }\n}\n\nconsole.log(glork(4));\n// should return 24\nconsole.log(glork(0));\n// should return 1\nconsole.log(glork(-1));\n// should return \"bork bork bork\"", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  if (bork < 0) {\n    return \"bork bork bork\";\n  } else if (bork === 0) {\n    return 1;\n  } else {\n    return bork * glork(bork - 1);\n  }\n}\n\nconsole.log(glork(4));\n// should return 24\nconsole.log(glork(0));\n// should return 1\nconsole.log(glork(-1));\n// should return \"bork bork bork\"", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# language: Python\n# write a function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.", "answer": "\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nprint(gcd(12, 15))\nprint(gcd(15, 12))\nprint(gcd(15, 15))\nprint(gcd(15, 10))\nprint(gcd(10, 15))\nprint(gcd(10, 10))\nprint(gcd(10, 5))\nprint(gcd(5, 10))\nprint(gcd(5, 5))\nprint(gcd(5, 0))\nprint(gcd(0, 5))\nprint(gcd(0, 0))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nprint(gcd(12, 15))\nprint(gcd(15, 12))\nprint(gcd(15, 15))\nprint(gcd(15, 10))\nprint(gcd(10, 15))\nprint(gcd(10, 10))\nprint(gcd(10, 5))\nprint(gcd(5, 10))\nprint(gcd(5, 5))\nprint(gcd(5, 0))\nprint(gcd(0, 5))\nprint(gcd(0, 0))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "// language: JavaScript\n// write a function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.", "answer": "\n\nfunction gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n\nconsole.log(gcd(12, 15)); // 3\nconsole.log(gcd(12, 18)); // 6\nconsole.log(gcd(12, 20)); // 12", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n\nconsole.log(gcd(12, 15)); // 3\nconsole.log(gcd(12, 18)); // 6\nconsole.log(gcd(12, 20)); // 12", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "# language: Python\n# write a function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.", "answer": "\n\n\ndef gcf(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\nprint(gcf(10, 20))\nprint(gcf(10, 15))\nprint(gcf(10, 10))\nprint(gcf(10, 5))\nprint(gcf(10, 3))\nprint(gcf(10, 2))\nprint(gcf(10, 1))\nprint(gcf(10, 0))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\nprint(gcf(10, 20))\nprint(gcf(10, 15))\nprint(gcf(10, 10))\nprint(gcf(10, 5))\nprint(gcf(10, 3))\nprint(gcf(10, 2))\nprint(gcf(10, 1))\nprint(gcf(10, 0))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "// language: JavaScript\n// write a function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.", "answer": "\n\nfunction gcf(a, b) {\n  if (a % b === 0) {\n    return b;\n  } else {\n    return gcf(b, a % b);\n  }\n}\n\nconsole.log(gcf(12, 16)); // should return 4\nconsole.log(gcf(2, 16)); // should return 2", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "function gcf(a, b) {\n  if (a % b === 0) {\n    return b;\n  } else {\n    return gcf(b, a % b);\n  }\n}\n\nconsole.log(gcf(12, 16)); // should return 4\nconsole.log(gcf(2, 16)); // should return 2", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 8, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# language: Python\n# write a function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.", "answer": "\n\n\ndef fofx(x, banana):\n    if x == 0:\n        return banana\n    if banana == 0:\n        return x\n    if x > banana:\n        return fofx(banana, x % banana)\n    else:\n        return fofx(x, banana % x)\n\n\nprint(fofx(10, 15))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n    if x == 0:\n        return banana\n    if banana == 0:\n        return x\n    if x > banana:\n        return fofx(banana, x % banana)\n    else:\n        return fofx(x, banana % x)\n\n\nprint(fofx(10, 15))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "// language: JavaScript\n// write a function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.", "answer": "\n\nfunction gcd(x, y) {\n  if (y === 0) {\n    return x;\n  }\n  return gcd(y, x % y);\n}\n\nfunction fofx(x, banana) {\n  return gcd(x, banana);\n}\n\nconsole.log(fofx(12, 15)); // 3\nconsole.log(fofx(12, 12)); // 12\nconsole.log(fofx(12, 18)); // 6", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "function gcd(x, y) {\n  if (y === 0) {\n    return x;\n  }\n  return gcd(y, x % y);\n}\n\nfunction fofx(x, banana) {\n  return gcd(x, banana);\n}\n\nconsole.log(fofx(12, 15)); // 3\nconsole.log(fofx(12, 12)); // 12\nconsole.log(fofx(12, 18)); // 6", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "y", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# language: Python\n# write a function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.", "answer": "\n\n\ndef meaning_of_life():\n    return 42\n\n\nprint(meaning_of_life())", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42\n\n\nprint(meaning_of_life())", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "// language: JavaScript\n// write a function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.", "answer": "\n\nfunction meaning_of_life() {\n    return 42;\n}\n\nconsole.log(meaning_of_life());", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n    return 42;\n}\n\nconsole.log(meaning_of_life());", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# language: Python\n# write a function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.", "answer": "\n\ndef things():\n    return [5, \"foobar\", \"Spain\"]\n\n\nprint(things())", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def things():\n    return [5, \"foobar\", \"Spain\"]\n\n\nprint(things())", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Spain", "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "// language: JavaScript\n// write a function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.", "answer": "\n\nfunction things() {\n    return [5, 'foobar', 'Madrid']\n}\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "function things() {\n    return [5, 'foobar', 'Madrid']\n}\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program that prints the output of things()\nconsole.log(things())\n\n// write a program", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# language: Python\n# write a function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.", "answer": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "// language: JavaScript\n// write a function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.", "answer": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "# language: Python\n# write a function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.", "answer": "\n\n\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nprint(fib(5))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nprint(fib(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "// language: JavaScript\n// write a function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.", "answer": "\n\n// Example:\n\n// fib(0) -> 0\n// fib(1) -> 1\n// fib(2) -> 1\n// fib(3) -> 2\n// fib(4) -> 3\n// fib(5) -> 5\n// fib(6) -> 8\n// fib(7) -> 13\n// fib(8) -> 21\n// fib(9) -> 34\n// fib(10) -> 55\n// fib(11) -> 89\n// fib(12) -> 144\n// fib(13) -> 233\n// fib(14) -> 377\n// fib(15) -> 610\n// fib(16) -> 987\n\n// The answer is guaranteed to fit within the 32-bit signed integer range.\n\n\n\n//     fib(0) -> 0\n//     fib(1) -> 1\n//     fib(2) -> 1\n//     fib(3) -> 2\n//     fib(4) -> 3\n//     fib(5) -> 5\n//     fib(6) -> 8\n//     fib(7) -> 13\n//     fib(8) -> 21\n//     fib(9) -> 34\n//     fib(10) -> 55\n//     fib(11) -> 89\n//     fib(12) -> 144\n//     fib(13) -> 233\n//     fib(14) -> 377\n//     fib(15) -> 610\n//     fib(16) -> 987\n\n\n\n//     fib(0) -> 0\n//     fib(1) -> 1\n//     fib(2) -> 1\n//     fib(3) -> 2\n//     fib(4) -> 3\n//     fib(5) -> 5\n//     fib(6) -> 8\n//     fib(7) -> 13\n//     fib(8) -> 21\n//     fib(9) -> 34\n//     fib(10) -> ", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "// Example:\n\n// fib(0) -> 0\n// fib(1) -> 1\n// fib(2) -> 1\n// fib(3) -> 2\n// fib(4) -> 3\n// fib(5) -> 5\n// fib(6) -> 8\n// fib(7) -> 13\n// fib(8) -> 21\n// fib(9) -> 34\n// fib(10) -> 55\n// fib(11) -> 89\n// fib(12) -> 144\n// fib(13) -> 233\n// fib(14) -> 377\n// fib(15) -> 610\n// fib(16) -> 987\n\n// The answer is guaranteed to fit within the 32-bit signed integer range.\n\n\n\n//     fib(0) -> 0\n//     fib(1) -> 1\n//     fib(2) -> 1\n//     fib(3) -> 2\n//     fib(4) -> 3\n//     fib(5) -> 5\n//     fib(6) -> 8\n//     fib(7) -> 13\n//     fib(8) -> 21\n//     fib(9) -> 34\n//     fib(10) -> 55\n//     fib(11) -> 89\n//     fib(12) -> 144\n//     fib(13) -> 233\n//     fib(14) -> 377\n//     fib(15) -> 610\n//     fib(16) -> 987\n\n\n\n//     fib(0) -> 0\n//     fib(1) -> 1\n//     fib(2) -> 1\n//     fib(3) -> 2\n//     fib(4) -> 3\n//     fib(5) -> 5\n//     fib(6) -> 8\n//     fib(7) -> 13\n//     fib(8) -> 21\n//     fib(9) -> 34\n//     fib(10) ->", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# language: Python\n# write a function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.", "answer": "\n\n\ndef potato(g):\n    if g == 0:\n        return 0\n    elif g == 1:\n        return 1\n    else:\n        return potato(g - 1) + potato(g - 2)\n\n\nprint(potato(5))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def potato(g):\n    if g == 0:\n        return 0\n    elif g == 1:\n        return 1\n    else:\n        return potato(g - 1) + potato(g - 2)\n\n\nprint(potato(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "// language: JavaScript\n// write a function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.", "answer": "\n\n// Example:\n\n// potato(0) -> 0\n// potato(1) -> 1\n// potato(2) -> 1\n// potato(3) -> 2\n// potato(4) -> 3\n// potato(5) -> 5\n// potato(6) -> 8\n// potato(7) -> 13\n// potato(8) -> 21\n// potato(9) -> 34\n// potato(10) -> 55\n// potato(11) -> 89\n// potato(12) -> 144\n// potato(13) -> 233\n// potato(14) -> 377\n// potato(15) -> 610\n// potato(16) -> 987\n// potato(17) -> 1597\n// potato(18) -> 2584\n// potato(19) -> 4181\n// potato(20) -> 6765\n// potato(21) -> 10946\n// potato(22) -> 17711\n// potato(23) -> 28657\n// potato(24) -> 46368\n// potato(25) -> 75025\n// potato(26) -> 121393\n// potato(27) -> 196418\n// potato(28) -> 317811\n// potato(29) -> 514229\n// potato(30) -> 832040\n// potato(31) -> 1346269\n// potato(32) -> 2178309\n// potato(33) -> 3524578\n// potato(34) -> 5702887\n// potato(35) -> 9227465\n// potato(36) -> 14930352\n// potato(37) -> 24157817\n// potato(38) -> 39088169\n// potato", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "// Example:\n\n// potato(0) -> 0\n// potato(1) -> 1\n// potato(2) -> 1\n// potato(3) -> 2\n// potato(4) -> 3\n// potato(5) -> 5\n// potato(6) -> 8\n// potato(7) -> 13\n// potato(8) -> 21\n// potato(9) -> 34\n// potato(10) -> 55\n// potato(11) -> 89\n// potato(12) -> 144\n// potato(13) -> 233\n// potato(14) -> 377\n// potato(15) -> 610\n// potato(16) -> 987\n// potato(17) -> 1597\n// potato(18) -> 2584\n// potato(19) -> 4181\n// potato(20) -> 6765\n// potato(21) -> 10946\n// potato(22) -> 17711\n// potato(23) -> 28657\n// potato(24) -> 46368\n// potato(25) -> 75025\n// potato(26) -> 121393\n// potato(27) -> 196418\n// potato(28) -> 317811\n// potato(29) -> 514229\n// potato(30) -> 832040\n// potato(31) -> 1346269\n// potato(32) -> 2178309\n// potato(33) -> 3524578\n// potato(34) -> 5702887\n// potato(35) -> 9227465\n// potato(36) -> 14930352\n// potato(37) -> 24157817\n// potato(38) -> 39088169\n// potato", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# language: Python\n# write a function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.", "answer": "\n\n\ndef fib(n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    return fib(n - 1) + [fib(n - 2)[-1] + fib(n - 2)[-2]]\n\n\nprint(fib(10))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    return fib(n - 1) + [fib(n - 2)[-1] + fib(n - 2)[-2]]\n\n\nprint(fib(10))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "list index out of range", "exc_type": "IndexError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "list index out of range", "exc_type": "IndexError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "list index out of range", "exc_type": "IndexError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "list index out of range", "exc_type": "IndexError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "// language: JavaScript\n// write a function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.", "answer": "\n\nfunction fib(n) {\n  let fibArray = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fibArray.push(fibArray[i - 1] + fibArray[i - 2]);\n  }\n  return fibArray;\n}\n\nconsole.log(fib(10));\n// should print [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\n// write a program that prints the first 20 terms of the fibonacci sequence.\n\nfunction fibonacci(n) {\n  let fibArray = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fibArray.push(fibArray[i - 1] + fibArray[i - 2]);\n  }\n  return fibArray;\n}\n\nconsole.log(fibonacci(20));\n// should print [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n\n\nfunction fibonacci(n) {\n  let fibArray = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fibArray.push(fibArray[i - 1] + fibArray[i - 2]);\n  }\n  return fibArray;\n}\n\nconsole.log(fibonacci(100));\n// should print [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "function fib(n) {\n  let fibArray = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fibArray.push(fibArray[i - 1] + fibArray[i - 2]);\n  }\n  return fibArray;\n}\n\nconsole.log(fib(10));\n// should print [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\n// write a program that prints the first 20 terms of the fibonacci sequence.\n\nfunction fibonacci(n) {\n  let fibArray = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fibArray.push(fibArray[i - 1] + fibArray[i - 2]);\n  }\n  return fibArray;\n}\n\nconsole.log(fibonacci(20));\n// should print [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n\n\nfunction fibonacci(n) {\n  let fibArray = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fibArray.push(fibArray[i - 1] + fibArray[i - 2]);\n  }\n  return fibArray;\n}\n\nconsole.log(fibonacci(100));\n// should print [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "# language: Python\n# write a function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.", "answer": "\n\n\ndef glork(bork):\n    fib = [0, 1]\n    for i in range(2, bork):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[:bork]\n\n\nprint(glork(10))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "def glork(bork):\n    fib = [0, 1]\n    for i in range(2, bork):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[:bork]\n\n\nprint(glork(10))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "// language: JavaScript\n// write a function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.", "answer": "\n\nfunction glork(bork) {\n  let fib = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib;\n}\n\nconsole.log(glork(10));\n// should print [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\nconsole.log(glork(1));\n// should print [0, 1]\n\nconsole.log(glork(0));\n// should print [0]", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "THUDM-codegeex2-6b-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  let fib = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib;\n}\n\nconsole.log(glork(10));\n// should print [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\nconsole.log(glork(1));\n// should print [0, 1]\n\nconsole.log(glork(0));\n// should print [0]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 7, "total": 8}