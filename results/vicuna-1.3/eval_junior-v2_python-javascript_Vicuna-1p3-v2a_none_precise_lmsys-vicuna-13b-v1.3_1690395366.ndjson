{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\nASSISTANT:", "answer": "```python\ndef meaning_of_life():\n    return 42\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\nASSISTANT:", "answer": "```javascript\nfunction meaning_of_life() {\n  return 42;\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function meaning_of_life() {\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\nASSISTANT:", "answer": "```python\ndef things():\n    return [5, 'foobar', 'Madrid']\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def things():\n    return [5, 'foobar', 'Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\nASSISTANT:", "answer": "```javascript\nfunction things() {\n  return [5, 'foobar', 'Madrid'];\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function things() {\n  return [5, 'foobar', 'Madrid'];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\nASSISTANT:", "answer": "```python\ndef secretidentities():\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    }\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def secretidentities():\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    }", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\nASSISTANT:", "answer": "```javascript\nfunction secretidentities() {\n  return {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    SpiderMan: \"Peter Parker\"\n  };\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function secretidentities() {\n  return {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    SpiderMan: \"Peter Parker\"\n  };\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.\nASSISTANT:", "answer": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.\nASSISTANT:", "answer": "```javascript\nfunction gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.\nASSISTANT:", "answer": "```python\ndef gcf(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        gcf = 1\n        while a % b != 0:\n            a = b\n            b = gcf\n        return gcf\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def gcf(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        gcf = 1\n        while a % b != 0:\n            a = b\n            b = gcf\n        return gcf", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 1, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 8, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.\nASSISTANT:", "answer": "```javascript\nfunction gcf(a, b) {\n  // Check if b is zero\n  if (b === 0) {\n    return a;\n  }\n\n  // Find the greatest power of b that divides a\n  var i = Math.floor(Math.log2(a)) + 1;\n\n  // If b does not divide a, return b\n  if (i >= a / b) {\n    return b;\n  }\n\n  // Otherwise, divide a and b by their greatest common factor\n  while (a % b !== 0) {\n    i--;\n    b = Math.abs(b);\n  }\n\n  return b;\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function gcf(a, b) {\n  // Check if b is zero\n  if (b === 0) {\n    return a;\n  }\n\n  // Find the greatest power of b that divides a\n  var i = Math.floor(Math.log2(a)) + 1;\n\n  // If b does not divide a, return b\n  if (i >= a / b) {\n    return b;\n  }\n\n  // Otherwise, divide a and b by their greatest common factor\n  while (a % b !== 0) {\n    i--;\n    b = Math.abs(b);\n  }\n\n  return b;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 7, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 8, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.\nASSISTANT:", "answer": "```python\ndef fofx(x, banana):\n    if x == 0:\n        return banana\n    else:\n        return fofx(x % banana, banana // x)\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def fofx(x, banana):\n    if x == 0:\n        return banana\n    else:\n        return fofx(x % banana, banana // x)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 0, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 6, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.\nASSISTANT:", "answer": "```javascript\nfunction gcd(a, b) {\n  if (b === 0) return a;\n  return gcd(b, a % b);\n}\n\nfunction fofx(x, banana) {\n  const x_num = parseInt(x);\n  const banana_num = parseInt(banana);\n  const gcd = gcd(x_num, banana_num);\n  return gcd;\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function gcd(a, b) {\n  if (b === 0) return a;\n  return gcd(b, a % b);\n}\n\nfunction fofx(x, banana) {\n  const x_num = parseInt(x);\n  const banana_num = parseInt(banana);\n  const gcd = gcd(x_num, banana_num);\n  return gcd;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "a", "status": 0}, {"assert": "f.args[1].name", "eq": "banana", "got": "b", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 6, "total": 9}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function factorial(n) with input n that returns the factorial of n using iteration.\nASSISTANT:", "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function factorial(n) with input n that returns the factorial of n using iteration.\nASSISTANT:", "answer": "```javascript\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function factorial(n) with input n that returns the factorial of n using recursion.\nASSISTANT:", "answer": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function factorial(n) with input n that returns the factorial of n using recursion.\nASSISTANT:", "answer": "```javascript\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function glork(bork) with input bork that returns the factorial of bork.\nASSISTANT:", "answer": "```python\ndef glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork-1)\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function glork(bork) with input bork that returns the factorial of bork.\nASSISTANT:", "answer": "```javascript\nfunction glork(bork) {\n  let result = 1;\n  for (let i = 1; i <= bork; i++) {\n    result *= i;\n  }\n  return result;\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function glork(bork) {\n  let result = 1;\n  for (let i = 1; i <= bork; i++) {\n    result *= i;\n  }\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\nASSISTANT:", "answer": "```python\ndef fib(n):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(n-2):\n            a, b = b, a + b\n        return b\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(n-2):\n            a, b = b, a + b\n        return b", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 1, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 3, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 5, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\nASSISTANT:", "answer": "```javascript\nfunction fib(n) {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n      a = b;\n      b = a + b;\n    }\n    return b;\n  }\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function fib(n) {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n      a = b;\n      b = a + b;\n    }\n    return b;\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 2, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": 4, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 16, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.\nASSISTANT:", "answer": "```python\ndef potato(g):\n    fib = [0, 1]\n    for i in range(2, g+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[g]\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def potato(g):\n    fib = [0, 1]\n    for i in range(2, g+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[g]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.\nASSISTANT:", "answer": "```javascript\nfunction potato(g) {\n  let fib = [0, 1];\n  for (let i = 2; i <= g; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib[g];\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function potato(g) {\n  let fib = [0, 1];\n  for (let i = 2; i <= g; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib[g];\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.\nASSISTANT:", "answer": "```python\ndef fib(n):\n    a, b = 0, 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        a, b = b, a + b\n    return result\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def fib(n):\n    a, b = 0, 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        a, b = b, a + b\n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.\nASSISTANT:", "answer": "```javascript\nfunction fib(n) {\n  let a = 0, b = 1;\n  let result = [];\n  \n  for (let i = 0; i < n; i++) {\n    result.push(a);\n    a = b;\n    b = a + b;\n  }\n  \n  return result;\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function fib(n) {\n  let a = 0, b = 1;\n  let result = [];\n  \n  for (let i = 0; i < n; i++) {\n    result.push(a);\n    a = b;\n    b = a + b;\n  }\n  \n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 2, 4, 8], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 5, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.\nASSISTANT:", "answer": "```python\ndef glork(bork):\n    fib = [0, 1]\n    result = []\n    for i in range(min(bork, len(fib))):\n        result.append(fib[i])\n        fib.append(fib[i+1])\n    return result\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def glork(bork):\n    fib = [0, 1]\n    result = []\n    for i in range(min(bork, len(fib))):\n        result.append(fib[i])\n        fib.append(fib[i+1])\n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 6, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.\nASSISTANT:", "answer": "```javascript\nfunction glork(bork) {\n  let fib = [0, 1];\n  let result = [];\n  for (let i = 0; i < bork; i++) {\n    result.push(fib[i % 2]);\n    fib[i % 2] = fib[Math.floor(i / 2)];\n  }\n  return result;\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function glork(bork) {\n  let fib = [0, 1];\n  let result = [];\n  for (let i = 0; i < bork; i++) {\n    result.push(fib[i % 2]);\n    fib[i % 2] = fib[Math.floor(i / 2)];\n  }\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 0], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 0, 0, 0], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 6, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.\nASSISTANT:", "answer": "```python\ndef substrcount(str, substr):\n    count = 0\n    for char in str:\n        if char == substr[0]:\n            count += 1\n            for i in range(1, len(substr)):\n                if str[i] != str[i-1]:\n                    break\n                count += 1\n    return count\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "def substrcount(str, substr):\n    count = 0\n    for char in str:\n        if char == substr[0]:\n            count += 1\n            for i in range(1, len(substr)):\n                if str[i] != str[i-1]:\n                    break\n                count += 1\n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.\n\nUSER: Write simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.\nASSISTANT:", "answer": "```javascript\nfunction substrcount(str, substr) {\n  let count = 0;\n  for (let i = 0; i < str.length - substr.length + 1; i++) {\n    if (str.substring(i, i + substr.length) === substr) {\n      count++;\n    }\n  }\n  return count;\n}\n```", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.176, frequency_penalty=0.0, temperature=0.7, top_p=0.1, top_k=40, use_beam_search=False, stop=[], ignore_eos=False, max_tokens=512, logprobs=None)", "model": "lmsys/vicuna-13b-v1.3", "runtime": "vllm", "code": "function substrcount(str, substr) {\n  let count = 0;\n  for (let i = 0; i < str.length - substr.length + 1; i++) {\n    if (str.substring(i, i + substr.length) === substr) {\n      count++;\n    }\n  }\n  return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}